@model ContactEditViewModel
@using Business.Model
@{
    Layout = "_GenericEditorLayout";
    ViewData["Title"] = "Edit Contact";
    ViewData["Breadcrumb"] = new Dictionary<string, string>
{
        { "Home", "/Home/Index" },
        { "Contacts", "/Contact/Index" },
        { "Edit", "#" }
    };

    var dbContext = Context.RequestServices.GetRequiredService<FarmMasterContext>();
}

<partial name="_ComponentModalContactActionReason" />

@if (Model.Contact.ContactType == Business.Model.Contact.Type.Individual)
{
    <div class="ui visible warning message">
        <div class="header">Attention about GDPR!</div>

        When adding in new data about an individual, <strong>ensure you have their consent!</strong>
    </div>
}

@if (Model.Contact.ContactType == Business.Model.Contact.Type.Entity)
{
    <div class="ui visible warning message">
        <div class="header">Attention about GDPR!</div>

        When adding in new data about an entity, if that data belongs to an individual person
        instead of the entity as a whole, then you must <strong>ensure you have that individual's consent!</strong>
    </div>
}

<partial name="_ViewModelWithMessagePartial" model="Model" />

<section class="editor section">
    <section>
        <form class="ui form" method="post" asp-action="Edit">
            <input type="hidden" asp-for="Contact.ContactId" />
            <input type="hidden" asp-for="Contact.ContactType" />
            <input type="hidden" asp-for="Contact.Timestamp" />

            <section>
                <h4>
                    General Info
                </h4>
                <div class="content">
                    <div class="field">
                        <label>Full Name</label>
                        <input asp-for="Contact.FullName" />
                    </div>
                    <button type="submit" class="ui fluid primary button">
                        Update Information
                    </button>
                    <div asp-validation-summary="All"></div>
                </div>
            </section>
        </form>
    </section>

    @foreach(var info in new[] {
         new { Header = "Phone Numbers", Section = "sectionPhoneNumbers" },
         new { Header = "Email Addresses", Section = "sectionEmails" }
    })
    {
        <section class="ui form">
            <h4>
                @info.Header
            </h4>
            <div id="@info.Section" class="content">
                <table class="ui striped table">
                    <thead>
                        <tr>
                            <th class="editor action"></th>
                            <th>Name</th>
                            <th>Number</th>
                        </tr>
                    </thead>
                    <tbody></tbody>
                </table>
                <div class="table action section three inline actions">
                    <div class="inline field">
                        <label>Name:</label>
                        <input class="name" type="text" />
                    </div>
                    <div class="inline field">
                        <label>Value:</label>
                        <input class="value" type="text" />
                    </div>
                    <button class="ui primary submit button" type="button">Add</button>
                </div>
                <div class="ui error message transition hidden"></div>
            </div>
        </section>
    }
</section>

@section Scripts {
    <script type="module">
        import { Validation, FarmAjax, FarmAjaxMessageType } from "/js/index.js";
        Validation.hookupForm(document.querySelector(".ui.form"));

        const sectionPhoneNumbers = document.getElementById("sectionPhoneNumbers");
        const sectionEmails = document.getElementById("sectionEmails");

        function addRow(refreshUrl, deleteUrl, elemSection, nameValueId) {
            const tbody = elemSection.querySelector("table tbody");
            const tr = tbody.appendChild(document.createElement("tr"));
            tr.dataset.id = nameValueId.id;
            {
                let td = tr.appendChild(document.createElement("td"));
                {
                    const button = td.appendChild(document.createElement("button"));
                    button.type = "button";
                    button.classList.add("ui", "red", "icon", "button");
                    button.onclick = () => {
                        ajaxDelete(deleteUrl, elemSection, tr)
                        ajaxRefresh(refreshUrl, deleteUrl, elemSection, nameValueId.id);
                    };
                    {
                        const i = button.appendChild(document.createElement("i"));
                        i.classList.add("close", "icon");
                    }
                }

                td = tr.appendChild(document.createElement("td"));
                td.innerText = nameValueId.name;

                td = tr.appendChild(document.createElement("td"));
                td.innerText = nameValueId.value;
            }
        }

        function ajaxAdd(url, refreshUrl, deleteUrl, elemSection, valueNameOverride = null) {
            const inputName = elemSection.querySelector("input.name");
            const inputValue = elemSection.querySelector("input.value");
            const name = inputName.value;
            const value = inputValue.value;
            FarmAjax.postWithMessageAndValueResponse(
                url,
                {
                    name: name,
                    value: value,
                    id: @Model.Contact.ContactId,
                    reason: "TEST"
                },
                rv => {
                    if (rv.messageType !== FarmAjaxMessageType.Information) {
                        rv.populateMessageBox(elemSection.querySelector("div.error.message"));
                        return;
                    }

                    inputName.value = "";
                    inputValue.value = "";

                    if (valueNameOverride !== null)
                        value = valueNameOverride;

                    addRow(refreshUrl, deleteUrl, elemSection, { name: name, value: value, id: rv.value });
                }
            );
        }

        function ajaxDelete(url, elemSection, elemRow) {
            FarmAjax.postWithMessageResponse(
                url,
                {
                    byId: @Model.Contact.ContactId,
                    forId: elemRow.dataset.id,
                    reason: "TEST"
                },
                response => {
                    if (response.messageType !== FarmAjaxMessageType.Information) {
                        response.populateMessageBox(elemSection.querySelector("div.error.message"));
                        return;
                    }

                    // For some reason, the "elemRow" we're given is missing it's parent's info, so we're doing this
                    // stylishly.
                    elemSection
                        .querySelectorAll("table tbody tr")
                        .forEach(row => {
                            if (row.dataset.id !== elemRow.dataset.id)
                                return;

                            row.parentElement.removeChild(row);
                        });
                }
            );
        }

        function ajaxRefresh(url, deleteUrl, elemSection) {
            FarmAjax.postWithMessageAndValueResponse(
                url,
                {
                    id: @Model.Contact.ContactId
                },
                rv => {
                    if (rv.messageType !== FarmAjaxMessageType.Information) {
                        rv.populateMessageBox(elemSection.querySelector("div.error.message"));
                        return;
                    }

                    const tbody = elemSection.querySelector("table tbody");
                    tbody.innerHtml = "";
                    tbody.innerText = "";

                    for (const nameValueId of rv.value)
                        addRow(url, deleteUrl, elemSection, nameValueId);
                }
            );
        }

        function setupTable(elemSection, addUrl, deleteUrl, refreshUrl) {
            ajaxRefresh(refreshUrl, deleteUrl, elemSection);
            elemSection
                .querySelector("button.submit.button")
                .addEventListener("click", _ => {
                    const inputValue = elemSection.querySelector("input.value");

                    ajaxAdd(
                        addUrl,
                        refreshUrl,
                        deleteUrl,
                        elemSection,
                        (inputValue.selectedOptions) ? inputValue.selectedOptions[0].text : null
                    );
                });
        }

        setupTable(
            sectionPhoneNumbers,
            "/Ajax/Contact_ById_PhoneNumber_Add_ReturnsId",
            "/Ajax/Contact_ById_PhoneNumber_Delete_ById",
            "/Ajax/Contact_ById_PhoneNumber_AsNameValueId_All"
        );

        setupTable(
            sectionEmails,
            "/Ajax/Contact_ById_Email_Add_ReturnsId",
            "/Ajax/Contact_ById_Email_Delete_ById",
            "/Ajax/Contact_ById_Email_AsNameValueId_All"
        );
    </script>
}