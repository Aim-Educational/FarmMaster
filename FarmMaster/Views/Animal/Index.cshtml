@model AnimalIndexViewModel
@{ 
    Layout = "_GenericEditorLayout";
    ViewData["Title"] = "Animals";
    ViewData["Breadcrumb"] = new Dictionary<string, string>()
    {
        { "Home", "/" },
        { "Animals", "/Animal/" }
    };
}

<partial name="_ViewModelWithMessagePartial" model="Model" />

<section class="editor section">
    <section>
        <div class="content">
            <div class="top padded items">
                <a class="ui primary button" asp-action="Create">Create New Animal</a>
            </div>
        </div>
    </section>
    <section class="ui form">
        <h4>Search</h4>
        <div id="searchContent" class="content">
            <div class="field">
                <label>Name</label>
                <input id="inputName" type="text" />
            </div>
            <div class="field">
                <label>Gender</label>
                <div id="dropdownGender" class="ui clearable search selection dropdown">
                    <input type="hidden" />
                    <i class="dropdown icon"></i>
                    <div class="text"></div>
                    <div class="menu">
                        <div class="item">@Animal.Gender.Male</div>
                        <div class="item">@Animal.Gender.Female</div>
                        <div class="item">@Animal.Gender.Other</div>
                    </div>
                </div>
            </div>
            <div class="field">
                <label>Species</label>
                <div id="dropdownSpecies" class="ui clearable search selection dropdown">
                    <input type="hidden" />
                    <i class="dropdown icon"></i>
                    <div class="text"></div>
                    <div class="menu">
                    </div>
                </div>
            </div>
            <div class="field">
                <label>Breed</label>
                <div id="dropdownBreeds" class="ui multiple search selection dropdown">
                    <input type="hidden" />
                    <i class="dropdown icon"></i>
                    <div class="text"></div>
                    <div class="menu">
                    </div>
                </div>
            </div>
        </div>
    </section>
    <section>
        <div class="content">
            <div class="top padded items"><!--Padding--></div>
            <div class="ui grid">
                <div id="rowAnimals" class="three column stackable row">
                </div>
            </div>

            <div class="top padded items">
                <button id="buttonLoadMore" class="ui inverted secondary fluid button">
                    Load More
                </button>
            </div>
        </div>
    </section>
</section>

@section Scripts {
    <script type="module">
        import { GraphQL } from "/js/index.js";

        // Useful constants/globals
        const ANIMALS_PER_FETCH = 15;
        const IMAGE_WIDTH = 664;
        const IMAGE_HEIGHT = 700;
        let animalCount = 0;

        // Button to load more content.
        const buttonLoadMore = document.getElementById("buttonLoadMore");

        // Param 'animal' is data from GraphQL, see fetchAnimals below.
        // Creates a new card from the animal info.
        function addAnimalCard(animal) {
            const row = document.getElementById("rowAnimals");

            const column = row.appendChild(document.createElement("div"));
            column.classList.add("column");
            {
                const a = column.appendChild(document.createElement("a"));
                a.href = "/Animal/Edit/" + animal.id;
                {
                    const divCard = a.appendChild(document.createElement("div"));
                    divCard.classList.add("ui", "card");
                    {
                        // Image
                        let div = divCard.appendChild(document.createElement("div"));
                        div.classList.add("image");
                        {
                            const img = div.appendChild(document.createElement("img"));
                            img.src = "/Image/Get?imageId=" + animal.imageId + "&width=" + IMAGE_WIDTH + "&height=" + IMAGE_HEIGHT;
                        }

                        const divContent = divCard.appendChild(document.createElement("div"));
                        divContent.classList.add("content");
                        {
                            // Name; gender icon; can reproduce icon
                            div = divContent.appendChild(document.createElement("div"));
                            div.classList.add("header");
                            {
                                div.innerText = animal.name;

                                let i = div.appendChild(document.createElement("i"));
                                if (animal.sex === "MALE")
                                    i.classList.add("right", "floated", "blue", "man", "icon");
                                else if (animal.sex === "FEMALE")
                                    i.classList.add("right", "floated", "pink", "woman", "icon");
                                else
                                    alert("NOT SUPPORTED YET: Unknown gender icon");

                                i = div.appendChild(document.createElement("i"));
                                i.classList.add("right", "floated", "red", "heart", "icon");
                            }

                            // Tag
                            div = divContent.appendChild(document.createElement("div"));
                            div.classList.add("meta");
                            {
                                div.innerText = "[" + animal.tag + "]";
                            }

                            // Gender (text version); Species; Simplified breed(s)
                            div = divContent.appendChild(document.createElement("div"));
                            div.classList.add("meta");
                            {
                                const genderText = animal.sex[0].toUpperCase() + animal.sex.substr(1).toLowerCase();
                                const breedText =
                                    (animal.breeds.length == 0)
                                        ? "Unknown breed"
                                        : (animal.breeds.length > 1)
                                            ? "Cross breed"
                                            : animal.breeds[0];

                                div.innerText = genderText + " " + animal.species.name + " - " + breedText;
                            }

                            // Owner; mum; dad
                            div = divContent.appendChild(document.createElement("div"));
                            div.classList.add("description");
                            {
                                // owner
                                let i = div.appendChild(document.createElement("i"));
                                let span = div.appendChild(document.createElement("span"));
                                i.classList.add("user", "icon");
                                span.innerText = animal.owner.name;
                                div.appendChild(document.createElement("br"));

                                // dad
                                i = div.appendChild(document.createElement("i"));
                                span = div.appendChild(document.createElement("span"));
                                i.classList.add("teal", "male", "icon");
                                span.innerText = (animal.dad && animal.dad.name + " [" + animal.dad.tag + "]") || "Unknown";
                                div.appendChild(document.createElement("br"));

                                // mum
                                i = div.appendChild(document.createElement("i"));
                                span = div.appendChild(document.createElement("span"));
                                i.classList.add("pink", "female", "icon");
                                span.innerText = (animal.mum && animal.mum.name + " [" + animal.mum.tag + "]") || "Unknown";
                                div.appendChild(document.createElement("br"));
                            }
                        }
                    }
                }
            }
        }

        // Fetches the next set of animals to add.
        // initialQuery is used to setup the species dropdown as well.
        // otherVars is used to contain filter options.
        function fetchAnimals(take, skip, initialQuery = false, otherVars = {}) {
            buttonLoadMore.classList.add("transition", "hidden");
            otherVars.take = take;
            otherVars.skip = skip;
            otherVars.initialQuery = initialQuery;
            GraphQL.query(`query FetchAnimals($take:Int!,        $skip:Int!,    $initialQuery: Boolean!,
                                              $nameRegex:String, $speciesId:ID, $breedIds:[ID],          $gender:Gender){
                    animals(take:$take, skip:$skip, nameRegex:$nameRegex, speciesId:$speciesId, breedIds:$breedIds, gender:$gender){
                        id
                        name
                        tag
                        sex
                        imageId
                        species {
                            name
                        }
                        breeds
                        owner {
                            name
                        }
                        dad {
                            name
                            tag
                        }
                        mum {
                            name
                            tag
                        }
                    }
                    species @@include(if: $initialQuery) {
                        id
                        name
                    }
                }`, otherVars)
                .then(data => {
                    // If we got less than we asked for, assume we've reached the end.
                    // Otherwise, make the "Load more" button visible again.
                    if (data.animals.length >= take) {
                        buttonLoadMore.classList.remove("hidden");
                        buttonLoadMore.classList.add("visible");
                    }

                    animalCount += data.animals.length;
                    for (const animal of data.animals)
                        addAnimalCard(animal);

                    // Load the species dropdown.
                    if (initialQuery) {
                        const speciesMenu = document.getElementById("dropdownSpecies").querySelector(".menu");
                        for (const species of data.species) {
                            const div = speciesMenu.appendChild(document.createElement("div"));
                            div.classList.add("item");
                            div.dataset.value = species.id;
                            div.innerText = species.name;
                        }
                        $("dropdownSpecies").dropdown();
                    }
                })
                .catch(e => alert(JSON.stringify(e)));
        }

        function resetCards() {
            animalCount = 0;
            const row = document.getElementById("rowAnimals");

            row.innerHTML = "";
        }

        function onSearchInputChanged() {
            const nameRegex = document.getElementById("inputName").value;
            const gender = document.getElementById("dropdownGender").querySelector("input").value;
            const speciesId = document.getElementById("dropdownSpecies").querySelector("input").value;
            const breedIds = document.getElementById("dropdownBreeds").querySelector("input").value.split(',');

            // Conditionally add the filter options.
            const vars = {};
            if (nameRegex.length > 0)   vars.nameRegex = nameRegex;
            if (gender.length > 0)      vars.gender = gender;
            if (speciesId.length > 0)   vars.speciesId = speciesId;
            if (breedIds[0].length > 0) vars.breedIds = breedIds;

            resetCards();
            fetchAnimals(ANIMALS_PER_FETCH, animalCount, false, vars);
        }

        const searchInputs = document.getElementById("searchContent").querySelectorAll("input");
        for (const input of searchInputs)
            input.addEventListener("change", () => onSearchInputChanged());

        fetchAnimals(ANIMALS_PER_FETCH, animalCount, true);
        buttonLoadMore.addEventListener("click", () => onSearchInputChanged());

        // When the species selected changes, get the new breed options.
        document.getElementById("dropdownSpecies").querySelector("input").addEventListener("change", function () {
            const dropdown = document.getElementById("dropdownBreeds");
            const menu = dropdown.querySelector(".menu");

            // Remove all old values
            for (const item of menu.querySelectorAll(".item"))
                menu.removeChild(item);

            const speciesId = document.getElementById("dropdownSpecies").querySelector("input").value;
            if (speciesId.length === 0)
                return;

            // Get and add new ones.
            GraphQL.query(`query GetBreeds($speciesId:ID){
                    breeds(speciesId:$speciesId) {
                        id
                        name
                    }
                }`, { speciesId })
                .then(data => {
                    for (const breed of data.breeds) {
                        const div = document.createElement("div");
                        div.classList.add("item");
                        div.dataset.value = breed.id;
                        div.innerText = breed.name;
                        menu.appendChild(div);
                    }

                    $(dropdown).dropdown();
                })
                .catch(e => alert(JSON.stringify(e)));
        });

        $(".ui.dropdown").dropdown();
    </script>
}