@model AnimalCreateEditViewModel
@{ 
    var pageBreadcrumb = new Dictionary<string, string>()
    {
        { "Home", "/" },
        { "Animals", "/Animal/" },
        { 
            (Model.IsCreate) ? "Create" : "Edit", 
            (Model.IsCreate) ? "/Animal/Create/" : $"/Animal/Edit/{Model.AnimalId}" 
        }
    }; // Stored in a variable so we can reuse it for some JS code.
    var lifeEventBreadcrumb = pageBreadcrumb.Select(kvp => $"{kvp.Key}:{kvp.Value}")
                                            .Aggregate((s1, s2) => $"{s1}>{s2}");
    lifeEventBreadcrumb += $">{Model.Name}:/Animal/Edit/{Model.AnimalId}";

    Layout = "_GenericEditorLayout";
    ViewData["Title"] = $"{(Model.IsCreate ? "Create" : "Edit")} an animal";
    ViewData["Breadcrumb"] = pageBreadcrumb;
}

<partial name="_ViewModelWithMessagePartial" model="@Model" />
<partial name="_ModalAreYouSure_NoUndo" />

<section class="editor section">
    <section>
        <h4>Information</h4>
        <div class="content">
            <form class="ui form" method="post" enctype="multipart/form-data" asp-action="CreateEdit">
                <input type="hidden" asp-for="IsCreate" />
                <input type="hidden" asp-for="AnimalId" />
                <input type="hidden" asp-for="ImageId" />

                <div class="field">
                    @{
                        var imageLink = (Model.ImageId == null)
                                        ? "/images/icons/default.png"
                                        : $"/Image/Get?imageId={Model.ImageId}&width=760&height=800";
                    }
                    <label>Image</label>
                    <a href="@imageLink" target="_blank">
                        <img id="image"
                             class="ui centered image"
                             src="@imageLink"
                             style="max-width: 100%; max-height: 400px; width: 380px; height: auto;" />
                    </a>
                    <input id="inputImage" asp-for="Image" />
                </div>

                <div class="field">
                    <label>Name</label>
                    <input asp-for="Name" autocomplete="off" />
                </div>
                <div class="field">
                    <label>Tag</label>
                    <input asp-for="Tag" autocomplete="off" />
                </div>
                <div class="field">
                    <label>Gender</label>
                    <div class="ui search selection dropdown">
                        <input type="hidden" asp-for="Sex" value="@($"{Model.Sex}".ToLower())" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                            <div class="item">@Animal.Gender.Male</div>
                            <div class="item">@Animal.Gender.Female</div>
                            <div class="item">@Animal.Gender.Other</div>
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label>Owner</label>
                    <div class="ui search selection dropdown">
                        <input id="selectOwner" type="hidden" asp-for="OwnerId" value="@Model.OwnerId" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label>Holding</label>
                    <div class="ui search selection dropdown">
                        <input id="selectHolding" type="hidden" asp-for="HoldingId" value="@Model.HoldingId" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label>Species</label>
                    <div class="ui search selection dropdown">
                        <input id="selectSpecies" type="hidden" asp-for="SpeciesId" value="@(Model.SpeciesId ?? null)" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label>Dad</label>
                    <div class="ui disabled search selection dropdown">
                        <input id="selectDad" type="hidden" asp-for="DadId" value="@(Model.DadId ?? null)" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label>Mum</label>
                    <div class="ui disabled search selection dropdown">
                        <input id="selectMum" type="hidden" asp-for="MumId" value="@(Model.MumId ?? null)" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                </div>
                <div class="field">
                    <label>Breeds</label>
                    @{
                        var breedValueString = (Model.BreedIds?.Any() ?? false)
                                               ? Model.BreedIds.Select(id => $"{id}").Aggregate((s1, s2) => s1 + "," + s2)
                                               : null;
                    }
                    <div class="ui disabled multiple search selection dropdown">
                        <input id="selectBreeds" type="hidden" asp-for="BreedIds" value="@breedValueString" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                </div>

                <button class="ui primary fluid button" type="submit">
                    @(Model.IsCreate ? "Create New Animal" : "Edit Animal")
                </button>
            </form>
        </div>
    </section>
    <section>
        <h4>Characteristics</h4>
        @if(!Model.IsCreate)
        {
            <div class="content">
                <partial name="_ComponentCharacteristics" model='new ComponentCharacteristicsViewModel
                {
                    AjaxListUrl = "/Ajax/Animal_ById_Characteristic_AsNameValueTypeInheritedId_All",
                    AjaxAddUrl = "/Ajax/Animal_ById_Characteristic_Add",
                    AjaxDeleteUrl = "/Ajax/Animal_ById_Characteristic_Delete_ById",
                    EntityId = Model.AnimalId ?? -1
                }' />
            </div>
        }
        else
        {
            <div class="ui info message transition visible">
                Characteristics can only be modified once the animal has been created.
            </div>
        }
    </section>

    <section>
        <h4>Life Events</h4>
        @if(!Model.IsCreate)
        {
            <div class="content">
                <div class="ui fluid styled accordion">
                    <div class="title">
                        <i class="dropdown icon"></i>
                        Add a life event
                    </div>
                    <div class="content ui form">
                        <div class="field">
                            <label>Type</label>
                            <div class="ui search selection dropdown">
                                <input id="selectLifeEvent" type="hidden" />
                                <i class="dropdown icon"></i>
                                <div class="text"></div>
                                <div class="menu">
                                </div>
                            </div>
                        </div>
                        <button id="buttonCreateEvent" class="ui button">Goto Event Creation Editor</button>
                    </div>
                </div>
                <div id="errorLifeEvents" class="ui error message transition hidden"></div>
                <table id="tableLifeEvents" class="ui striped table">
                    <thead>
                        <tr class="three columns">
                            <th class="editor action"></th>
                            <th>Name</th>
                            <th>Date created</th>
                            <th></th>
                        </tr>
                    </thead>
                    <tbody>
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="ui info message transition visible">
                Life events can only be modified once the animal has been created.
            </div>
        }
    </section>
</section>

@section Scripts {
    <!--GraphQL related code. Covers the entire 'Information' section, as well as populating the Life Event section.-->
    <script type="module">
        import { GraphQL, FarmAjax, FarmAjaxMessageType, Modal } from "/js/index.js";

        function onError(errors) {
            alert(JSON.stringify(errors));
        }

        function addItemToDropdown(dropdown, name, value = null, isActive = false, isMultipleSelectItem = false) {
            const menu = dropdown.querySelector(".menu");
            const div = menu.appendChild(document.createElement("div"));
            div.classList.add("item");
            div.dataset.value = (value === null) ? name : value;
            div.innerHTML = name;

            if (isActive)
                $(dropdown).dropdown("set selected", value);
        }

        function populateFromIdName(dropdown, idNameList, isMultipleSelect = false, ignoreIfAnimalId = false) {
            const menu = dropdown.querySelector(".menu");
            const currentValue = dropdown.querySelector("input[type=hidden]").value;
            const multipleValues = currentValue.split(',');

            for (const div of menu.querySelectorAll("div"))
                menu.removeChild(div);

            if (dropdown.classList.contains("disabled"))
                dropdown.classList.remove("disabled");
            for (const idName of idNameList) {
                if (idName.id == @Model.AnimalId && ignoreIfAnimalId)
                    continue;

                addItemToDropdown(
                    dropdown,
                    idName.name,
                    idName.id,
                    (isMultipleSelect)
                        ? multipleValues.indexOf(idName.id) > -1
                        : idName.id === currentValue,
                    isMultipleSelect);
            }

            $(dropdown).dropdown();
        }

        // These are seperate functions to make it easier to add additional logic in the future.
        // I'm fully aware these could be condensed further.
        function handleContacts(contacts) {
            const dropdown = document.getElementById("selectOwner").parentElement;
            populateFromIdName(dropdown, contacts);
        }

        function handleSpecies(species) {
            const dropdown = document.getElementById("selectSpecies").parentElement;
            populateFromIdName(dropdown, species);
        }

        function handleMums(mums) {
            const dropdown = document.getElementById("selectMum").parentElement;
            populateFromIdName(dropdown, mums, false, true);

            addItemToDropdown(dropdown, "Unknown", "", document.getElementById("selectMum").value === "");
            $(dropdown).dropdown();
        }

        function handleDads(dads) {
            const dropdown = document.getElementById("selectDad").parentElement;
            populateFromIdName(dropdown, dads, false, true);

            addItemToDropdown(dropdown, "Unknown", "", document.getElementById("selectDad").value === "");
            $(dropdown).dropdown();
        }

        function handleHoldings(holdings) {
            const dropdown = document.getElementById("selectHolding").parentElement;
            populateFromIdName(dropdown, holdings);

            addItemToDropdown(dropdown, "Unknown/Other", "", document.getElementById("selectHolding").value === "");
            $(dropdown).dropdown();
    }

        function handleBreeds(breeds) {
            const dropdown = document.getElementById("selectBreeds").parentElement;
            populateFromIdName(dropdown, breeds, true);
        }

        function handleLifeEventTypes(lifeEvent) {
            @if(Model.IsCreate)
            {
                @:return;
            }

            const dropdown = document.getElementById("selectLifeEvent").parentElement;
            populateFromIdName(dropdown, lifeEvent);
        }

        function handleLifeEventEntries(entries) {
            @if(Model.IsCreate)
            {
                @:return;
            }

            const table = document.getElementById("tableLifeEvents");
            const tbody = table.querySelector("tbody");

            for (const entry of entries) {
                const tr = tbody.appendChild(document.createElement("tr"));
                {
                    let td = tr.appendChild(document.createElement("td"));
                    {
                        const button = td.appendChild(document.createElement("button"));
                        button.classList.add("ui", "red", "icon", "button");
                        {
                            const i = button.appendChild(document.createElement("i"));
                            i.classList.add("close", "icon");
                        }
                        button.addEventListener("click", () => {
                            Modal.askAreYouSure()
                                .then(() => {
                                    FarmAjax.postWithMessageResponse(
                                        "/Ajax/Animal_ById_LifeEventEntry_Delete_ById",
                                        {
                                            byId: @Model.AnimalId,
                                            forId: entry.id
                                        },
                                        r => {
                                            if (r.messageType !== FarmAjaxMessageType.Information) {
                                                r.populateMessageBox(document.getElementById("errorLifeEvents"));
                                                return;
                                            }

                                            tr.parentNode.removeChild(tr);
                                        }
                                    );
                                });
                        });
                    }

                    td = tr.appendChild(document.createElement("td"));
                    {
                        td.innerText = entry.lifeEvent.name;
                    }

                    td = tr.appendChild(document.createElement("td"));
                    {
                        td.innerText = new Date(entry.dateTimeUtc).toUTCString();
                    }

                    td = tr.appendChild(document.createElement("td"));
                    {
                        const button = td.appendChild(document.createElement("button"));
                        {
                            button.classList.add("ui", "fluid", "button");
                            button.innerText = "Edit";
                            button.addEventListener("click", () => {
                                @{ 
                                    var lifeEventEditBreadcrumb = lifeEventBreadcrumb + ">Edit Entry:#";
                                }
                                const url = "/LifeEvent/EditEntry"
                                    + "?lifeEventId=" + entry.lifeEvent.id
                                    + "&lifeEventEntryId=" + entry.id
                                    + "&breadcrumb=@Html.Raw(lifeEventEditBreadcrumb)"
                                    + "&redirectEntityId=@Model.AnimalId";
                                window.open(url, "_blank");
                            });
                        }
                    }
                }
            }
        }

        GraphQL
            .query(`query InitialLoad($animalId: ID){
                contacts {
                    id
                    name
                }
                species {   
                    id
                    name
                }
                lifeEvents(target:ANIMAL) {
                    id
                    name
                }
                animals(id:$animalId) {
                    lifeEventEntries {
                        id
                        dateTimeUtc
                        lifeEvent {
                            id
                            name
                        }
                    }
                }
                holdings {
                    id
                    name
                }
            }`, { animalId: @Model.AnimalId })
            .then(data => {
                handleContacts(data.contacts);
                handleSpecies(data.species);
                handleLifeEventTypes(data.lifeEvents);
                handleLifeEventEntries(data.animals[0].lifeEventEntries);
                handleHoldings(data.holdings);
            })
            .catch(errors => onError(errors));

        document.getElementById("selectSpecies").addEventListener("change", () => {
            const speciesId = document.getElementById("selectSpecies").value;
            GraphQL
                .query(`query GetSpeciesData($id:ID) {
                  mums: animals(gender:FEMALE, speciesId:$id){
                    id
                    name
                  }
                  dads: animals(gender:MALE, speciesId:$id){
                    id
                    name
                  }
                  breeds(speciesId:$id){
                    id
                    name
                  }
                }`, { id: speciesId })
                .then(data => {
                    handleMums(data.mums);
                    handleDads(data.dads);
                    handleBreeds(data.breeds);
                })
                .catch(errors => onError(errors));
        });
        @if(!Model.IsCreate)
        {
            @:document.getElementById("selectSpecies").dispatchEvent(new Event("change"));
        }

        $(".ui.dropdown").dropdown();
        $(".accordion").accordion();
    </script>

    <!--Code for the life event section. Does not cover populating the Life Event stuff, as that's done during the
        "InitialLoad" query in the script tag above.
    -->
    <script type="module">
        @if(Model.IsCreate)
        {
            @:return;
        }

        document.getElementById("buttonCreateEvent").addEventListener("click", () => {
            @{
                var lifeEventCreateBreadcrumb = lifeEventBreadcrumb + ">Create Entry:#";
            }
            const lifeEventId = document.getElementById("selectLifeEvent").value;
            const url =
                "/LifeEvent/CreateEntry"
                + "?lifeEventId=" + lifeEventId
                + "&redirectController=Animal"
                + "&redirectAction=OnCreateLifeEvent"
                + "&redirectEntityId=" + @Model.AnimalId
                + "&breadcrumb=@Html.Raw(lifeEventCreateBreadcrumb)";
            window.open(url, "_self");
        });
    </script>

    <!--Update image when user changes the selected image-->
    <script type="module">
        const input = document.getElementById("inputImage");
        const image = document.getElementById("image");

        input.addEventListener("change", function () {
            image.src = URL.createObjectURL(input.files[0]);
        });
    </script>
}