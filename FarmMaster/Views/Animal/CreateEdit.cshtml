@model AnimalCreateEditViewModel
@{ 
    Layout = "_GenericEditorLayout";
    ViewData["Title"] = "Create an Animal";
    ViewData["Breadcrumb"] = new Dictionary<string, string>()
    {
        { "Home", "/" },
        { "Animals", "/Animals/Index/" },
        { 
            (Model.IsCreate) ? "Create" : "Edit", 
            (Model.IsCreate) ? "/Animals/Create/" : $"/Animals/Edit/{Model.AnimalId}" 
        }
    };
}

<partial name="_ViewModelWithMessagePartial" model="@Model" />

<section class="editor section">
    <section>
        <h4>Information</h4>
        <div class="content">
            <form class="ui form" method="post" enctype="multipart/form-data" asp-action="CreateEdit">
                <input type="hidden" asp-for="IsCreate" />
                <input type="hidden" asp-for="AnimalId" />
                <input type="hidden" asp-for="ImageId" />

                <div class="field">
                    @{
                        var imageLink = (Model.ImageId == null) 
                                        ? "/images/icons/default.png" 
                                        : $"/Image/Get?imageId={Model.ImageId}&width=760&height=800";   
                    }
                    <label>Image</label>
                    <a href="@imageLink" target="_blank">
                        <img id="image"
                             class="ui centered image"
                             src="@imageLink"
                             style="max-width: 100%; max-height: 400px; width: 380px; height: auto;"
                             />
                    </a>
                    <input id="inputImage" asp-for="Image" />
                </div>

                <div class="field">
                    <label>Name</label>
                    <input asp-for="Name" autocomplete="off" />
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="Name"></span>
                </div>
                <div class="field">
                    <label>Tag</label>
                    <input asp-for="Tag" autocomplete="off" />
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="Tag"></span>
                </div>
                <div class="field">
                    <label>Gender</label>
                    <div class="ui search selection dropdown">
                        <input type="hidden" asp-for="Sex" value="@($"{Model.Sex}".ToLower())" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                            <div class="item">@Animal.Gender.Male</div>
                            <div class="item">@Animal.Gender.Female</div>
                            <div class="item">@Animal.Gender.Other</div>
                        </div>
                    </div>
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="Sex"></span>
                </div>
                <div class="field">
                    <label>Owner</label>
                    <div class="ui search selection dropdown">
                        <input id="selectOwner" type="hidden" asp-for="OwnerId" value="@Model.OwnerId" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="OwnerId"></span>
                </div>
                <div class="field">
                    <label>Species</label>
                    <div class="ui search selection dropdown">
                        <input id="selectSpecies" type="hidden" asp-for="SpeciesId" value="@(Model.SpeciesId ?? null)" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="SpeciesId"></span>
                </div>
                <div class="field">
                    <label>Dad</label>
                    <div class="ui disabled search selection dropdown">
                        <input id="selectDad" type="hidden" asp-for="DadId" value="@(Model.DadId ?? null)" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="DadId"></span>
                </div>
                <div class="field">
                    <label>Mum</label>
                    <div class="ui disabled search selection dropdown">
                        <input id="selectMum" type="hidden" asp-for="MumId" value="@(Model.MumId ?? null)" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="MumId"></span>
                </div>
                <div class="field">
                    <label>Breeds</label>
                    @{ 
                        var breedValueString = Model.BreedIds.Any()
                                               ? Model.BreedIds.Select(id => $"{id}").Aggregate((s1, s2) => s1 + "," + s2)
                                               : null;
                    }
                    <div class="ui disabled multiple search selection dropdown">
                        <input id="selectBreeds" type="hidden" asp-for="BreedIds" value="@breedValueString" />
                        <i class="dropdown icon"></i>
                        <div class="text"></div>
                        <div class="menu">
                        </div>
                    </div>
                    <span class="@GlobalConstants.FormErrorClasses" asp-validation-for="BreedIds"></span>
                </div>

                <button class="ui primary fluid button" type="submit">
                    @(Model.IsCreate ? "Create New Animal" : "Edit Animal")
                </button>
                <div class="@GlobalConstants.FormErrorClasses" asp-validation-summary="All"></div>
            </form>
        </div>
    </section>
</section>

@section Scripts {
    <!--GraphQL related code-->
    <script type="module">
        import { GraphQL } from "/js/index.js";

        function onError(errors) {
            alert(JSON.stringify(errors));
        }

        function addItemToDropdown(dropdown, name, value = null, isActive = false, isMultipleSelectItem = false) {
            const menu = dropdown.querySelector(".menu");
            const div = menu.appendChild(document.createElement("div"));
            div.classList.add("item");
            div.dataset.value = (value === null) ? name : value;
            div.innerHTML = name;

            if (isActive)
                $(dropdown).dropdown("set selected", value);
        }

        function populateFromIdName(dropdown, idNameList, isMultipleSelect = false) {
            const menu = dropdown.querySelector(".menu");
            const currentValue = dropdown.querySelector("input[type=hidden]").value;
            const multipleValues = currentValue.split(',');

            for (const div of menu.querySelectorAll("div"))
                menu.removeChild(div);

            if (dropdown.classList.contains("disabled"))
                dropdown.classList.remove("disabled");
            for (const idName of idNameList) {
                addItemToDropdown(
                    dropdown,
                    idName.name,
                    idName.id,
                    (isMultipleSelect)
                        ? multipleValues.indexOf(idName.id) > -1
                        : idName.id === currentValue,
                    isMultipleSelect);
            }

            $(dropdown).dropdown();
        }

        // These are seperate functions to make it easier to add additional logic in the future.
        // I'm fully aware these could be condensed further.
        function handleContacts(contacts) {
            const dropdown = document.getElementById("selectOwner").parentElement;
            populateFromIdName(dropdown, contacts);
        }

        function handleSpecies(species) {
            const dropdown = document.getElementById("selectSpecies").parentElement;
            populateFromIdName(dropdown, species);
        }

        function handleMums(mums) {
            const dropdown = document.getElementById("selectMum").parentElement;
            populateFromIdName(dropdown, mums);

            addItemToDropdown(dropdown, "Unknown", "", document.getElementById("selectMum").value === "");
            $(dropdown).dropdown();
        }

        function handleDads(dads) {
            const dropdown = document.getElementById("selectDad").parentElement;
            populateFromIdName(dropdown, dads);

            addItemToDropdown(dropdown, "Unknown", "", document.getElementById("selectDad").value === "");
            $(dropdown).dropdown();
        }

        function handleBreeds(breeds) {
            const dropdown = document.getElementById("selectBreeds").parentElement;
            populateFromIdName(dropdown, breeds, true);
        }

        GraphQL
            .query(`query InitialLoad{
                contacts {
                    id
                    name
                }
                species {
                    id
                    name
                }
            }`)
            .then(data => {
                handleContacts(data.contacts);
                handleSpecies(data.species);
            })
            .catch(errors => onError(errors));

        document.getElementById("selectSpecies").addEventListener("change", () => {
            const speciesId = document.getElementById("selectSpecies").value;
            GraphQL
                .query(`query GetSpeciesData($id:ID) {
                  mums: animals(gender:FEMALE, speciesId:$id){
                    id
                    name
                  }
                  dads: animals(gender:MALE, speciesId:$id){
                    id
                    name
                  }
                  breeds(speciesId:$id){
                    id
                    name
                  }
                }`, { id: speciesId })
                .then(data => {
                    handleMums(data.mums);
                    handleDads(data.dads);
                    handleBreeds(data.breeds);
                })
                .catch(errors => onError(errors));
        });
        @if(!Model.IsCreate)
        {
            @:document.getElementById("selectSpecies").dispatchEvent(new Event("change"));
        }

        $(".ui.dropdown").dropdown();
    </script>

    <!--Update image when user changes the selected image-->
    <script type="module">
        const input = document.getElementById("inputImage");
        const image = document.getElementById("image");

        input.addEventListener("change", function () {
            image.src = URL.createObjectURL(input.files[0]);
        });
    </script>
}