@model RoleCreateViewModel
@{
    Layout = "_GenericEditorLayout";
    ViewData["Title"] = "Create a Role";
    ViewData["Breadcrumb"] = new Dictionary<string, string>
    {
        { "Home", "/Home/Index" },
        { "Roles", "/Role/Index" },
        { (Model.IsCreate) ? "Create"       : "Edit", 
          (Model.IsCreate) ? "/Role/Create" : "/Role/Edit" 
        }
    };
}

<section class="editor section">
    <form class="ui form" asp-action="@(Model.IsCreate ? "Create" : "Edit")" method="post">
        @if(!Model.IsCreate)
        {
            <input type="hidden" asp-for="Id" />
        }
        <input type="hidden" asp-for="IsCreate" />

        <section>
            <h4>
                Information
            </h4>

            <div class="content">
                <div class="field">
                    <label>Name</label>
                    <input asp-for="Name" placeholder="Name" />
                </div>

                <div class="field">
                    <label>Description</label>
                    <input asp-for="Description" placeholder="Description" />
                </div>

                <div class="field">
                    <label>Hierarchy Order</label>
                    <input asp-for="HierarchyOrder" placeholder="Hierarchy Order" />
                </div>

                <partial name="_ViewModelWithMessagePartial" model="Model" />
                <div asp-validation-summary="All"></div>
            </div>
        </section>
        <section>
            <h4>
                Permissions
            </h4>
            <div class="content">
                @{ 
                    var categories = Model.AllKnownPermissions
                                          .Select(p => p.Description.Split(' ').First())
                                          .Distinct()
                                          .OrderBy(c => c);

                    foreach(var category in categories)
                    {
                        var perms = Model.AllKnownPermissions
                                         .Where(p => p.Description.StartsWith(category))
                                         .OrderBy(p => p.Description);

                        var permsToSkip = 0;
                        <div class="sub content">
                            <h5>@category</h5>
                            @while(permsToSkip < perms.Count())
                            {
                                <div class="five inline fields">
                                    @foreach(var perm in perms.Skip(permsToSkip).Take(5)) // 5 per row
                                    {
                                        var permDesc = perm.Description.Substring(category.Length + 1); // + 1 to skip the space.
                                        <div class="field">
                                            <div class="ui toggle checkbox">
                                                <input type="checkbox" asp-for="Permissions[perm.InternalName]" />
                                                <label>@permDesc</label>
                                            </div>
                                        </div>
                                        permsToSkip += 1;
                                    }
                                </div>
                            }
                        </div>
                    }
                }

                <button class="ui primary fluid button" type="submit">
                    @(Model.IsCreate ? "Create Role" : "Edit Role")
                </button>
            </div>
        </section>
    </form>
</section>

@section Scripts {
    <script type="module">
        import { Validation } from "/js/index.js";

        $(".ui.checkbox").checkbox();

        Validation.hookupForm(document.querySelector(".ui.form"));
    </script>
}