@{
    ViewData["Title"] = "[Dev] Control Test";
    ViewData["NavName"] = "Controls";
    ViewData["Breadcrumb"] = new Breadcrumb().Add("Admin", "#").Add("Controls", "/Admin/ControlTest");
}

<div id="app">
    <window title="input-wrapper test">
        <div class="input-wrapper">
            <label>This is inline</label>
            <textbox placeholder="Enter text..." />
        </div>
        <div class="input-wrapper">
            <label>This is inline</label>
            <textbox placeholder="Enter text..." />
        </div>
    </window>

    <window title="Not-input-wrapper test">
        <div class="input-wrapper">
            <label>This is not inline</label>
            <textbox placeholder="Enter text..." />
        </div>
        <div class="input-wrapper">
            <label>This is not inline</label>
            <textbox placeholder="Enter text..." />
        </div>
    </window>

    <window title="Textbox 'view' mode test">
        <div class="input-wrapper">
            <label>This is inline</label>
            <textbox mode="view" value="This is a value" />
        </div>
        <div class="input-wrapper">
            <label>This is not inline</label>
            <textbox mode="view" value="Super value 9000" />
        </div>
    </window>

    <div style="display: flex; width: 100%;">
        <div style="display:flex; flex-direction:column; width:50%; padding-right:5em;">
            <window title="1st column">
                <div class="input-wrapper">
                    <label>This is not inline</label>
                    <textbox placeholder="Enter text..." />
                </div>
            </window>
        </div>
        <div style="display:flex; flex-direction:column; width:50%;">
            <window title="2nd column">
                <div class="input-wrapper">
                    <label>This is inline</label>
                    <textbox placeholder="Enter text..." />
                </div>
            </window>
        </div>
    </div>

    <window title="Alert boxes">
        <alert type="error" ref="alert1" show>
            <header>Invalid password</header>
            <p>
                Your password is incorrect, it must contain a number.
            </p>
        </alert>
        <alert type="info" ref="alert2" show>
            <header>Did you know?</header>
            <p>
                90% of headaches are caused by Andy.
            </p>
        </alert>
        <button class="top margined"
                @@click="showAlerts">
            Toggle alerts
        </button>
    </window>

    <window title="Multiselect">
        <a href="https://vue-multiselect.js.org/">Documentation</a>
        <div class="input-wrapper">
            <label>Single select</label>
            <vue-multiselect v-model="singleselectData" :options="['a', 'b']"></vue-multiselect>
        </div>
        <div class="input-wrapper">
            <label>Multi select</label>
            <vue-multiselect multiple hide-selected v-model="multiselectData" :options="['Andy', 'smells']"></vue-multiselect>
        </div>
    </window>

    <window title="Table">
        <fm-value-table selection="multiple"
                        :rows="[{name: 'Username', bind: 'username', sort: true}, {name: 'Age', bind: 'age', sort:true}]"
                        :values="[{ username: { href: '#', value: 'Bradley' }, age: 20 }, { username: 'Andy', age: 200 }, { username: 'Debby', age: 120 }]"
                        ref="table"
                        @@selected="onTableSelectionChange"
                        @@sort="onTableSort">
            <template v-slot:tfoot>
                <button class="icon blue" :disabled="tableButtonDisabled" @@click="freeGoat">
                    <i class="las la-horse"></i>
                    <span>Click me for a free goat</span>
                </button>
            </template>
        </fm-value-table>
    </window>

    <window title="Calendar">
        <a href="https://vcalendar.io/">Documentation</a>
        <div class="input-wrapper">
            <label>Inline Calendar</label>
            <vue-calendar locale="en-GB" :attributes="[{key:'today', highlight: true, dates: date, popover:{ label:eventName }}]"></vue-calendar>
        </div>
        <div class="input-wrapper">
            <label>Calendar</label>
            <vue-calendar locale="en-GB" :attributes="[{key:'today', dot: true, dates: date, popover:{ label:eventName }}]"></vue-calendar>
        </div>
    </window>

    <window title="Date picker">
        <a href="https://vcalendar.io/datepicker.html">Documentation</a>
        <div class="input-wrapper">
            <label>Inline picker</label>
            <vue-date-picker locale="en-GB" v-model="date"></vue-date-picker>
        </div>
        <div class="input-wrapper">
            <label>Picker</label>
            <vue-date-picker locale="en-GB" v-model="date"></vue-date-picker>
        </div>
        <div class="input-wrapper">
            <label>Event name</label>
            <textbox v-model="eventName" placeholder="What should the calendar show?"></textbox>
        </div>
        <alert type="info" show>
            <header>Hey, listen!</header>
            <p>
                After picking a date, and creating an event name, hover over the date in the calendars above!
            </p>
        </alert>
    </window>

    <window title="Confirm button">
        <confirm-button class="red"
                        prompt="Delete"
                        confirm="Are you sure?"
                        @@click="onConfirmDelete">
        </confirm-button>
    </window>
    
    <window title="Toggle button">
        <toggle-button v-model="toggle"
                       untoggled-text="Untoggled"
                       toggled-text="Toggled">
        </toggle-button>
        <div class="flex-wrapper new-row">
            {{ toggle }}
        </div>
    </window>

    <window title="Modal">
        <modal ref="modal">
            <template v-slot:header>
                <h2>Are you sure?</h2>
            </template>
            <template v-slot:body>
                Are you sure you want to commit yourself to our lord and saviour, Black Sheep?
            </template>
            <template v-slot:footer>
                <div class="button-group">
                    <button @@click="$refs.modal.hide()">
                        Cancel
                    </button>
                    <button onclick="document.location = 'https://www.youtube.com/watch?v=Hhck0SLcA6I'">
                        Confirm
                    </button>
                </div>
            </template>
        </modal>
        <delete-modal ref="deleteModal" @@click="onConfirmDelete"></delete-modal>

        <div class="flex-wrapper new-row bottom margined">
            <button @@click="showModal">Show Modal</button>
        </div>

        <div class="flex-wrapper new-row">
            <button class="red" @@click="showDeleteModal">Show Delete Modal</button>
        </div>
    </window>

    <window title="GraphQL Multiselect">
        <!--Supports v-model-->
        <vue-multiselect-graphql :value="{ id: 1, name: 'Cow' }"
                                 placeholder="Cows"
                                 entity-type="species">
        </vue-multiselect-graphql>
    </window>

    <window title="GraphQL Table">
        <fm-graphql-table selection="none"
                          :rows="[{name: 'Username', bind: 'username', sort: true}]"
                          query-root="users"
                          items-query="username">
        </fm-graphql-table>
    </window>
</div>

@section Scripts {
    <script>
        new Vue({
            el: "#app",
            data: {
                singleselectData: "",
                multiselectData: null,
                tableButtonDisabled: true,
                date: null,
                eventName: "",
                rowBeingSorted: null,
                toggle: true
            },
            methods: {
                showAlerts() {
                    this.$refs.alert1.toggle();
                    this.$refs.alert2.toggle();
                },

                freeGoat() {
                    alert("Row being sorted " + JSON.stringify(this.rowBeingSorted));
                },

                onTableSelectionChange(event) {
                    this.tableButtonDisabled = event.selectedValues.length === 0;
                },

                onTableSort(event) {
                    this.rowBeingSorted = event.row;
                },

                onConfirmDelete() {
                    alert("You chose to delete the universe. Congratulations!");
                },

                showModal() {
                    this.$refs.modal.show();
                },

                showDeleteModal() {
                    this.$refs.deleteModal.show();
                }
            }
        });
    </script>
}