@model LifeEventEntryEditorViewModel
@{
    ViewData["Title"] = "EntryEditor";
    ViewData["Breadcrumb"] = Model.Breadcrumb;

    var formAction = (Model.Type != LifeEventEntryEditorType.Test)
                     ? (Model.Type == LifeEventEntryEditorType.Create)
                       ? "CreateEntry"
                       : "EditEntry"
                     : "";
}

<h1>Life Event Entry Editor</h1>
<partial name="_ViewModelWithMessagePartial" model="@Model" />

<form id="formEntry" class="ui form" method="post" asp-action="@formAction">
    <input type="hidden" asp-for="LifeEventId" />
    <input type="hidden" asp-for="LifeEventEntryId" />
    <input type="hidden" asp-for="RedirectController" />
    <input type="hidden" asp-for="RedirectAction" />
    <input type="hidden" asp-for="Breadcrumb" />
    <input type="hidden" asp-for="Type"/>

    @foreach (var field in Model.GET_FieldInfo)
    {
        <partial name="_EntryInputPartial" model="new LifeEventEntryInputPartialViewModel{ Info = field, Values = Model.Values }" />
    }

    <button class="ui primary button" type="submit">YES</button>
</form>

@section Scripts {
    <script type="module">
        window.onSubmitHooks = []; // So _EntryInputPartial can hook into the onsubmit event easily.

        document.getElementById("formEntry").onsubmit = function () {
            for (const func of window.onSubmitHooks)
                func();
        };
    </script>
}