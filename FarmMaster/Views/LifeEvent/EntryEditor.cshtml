@model LifeEventEntryEditorViewModel
@{
    var aOrAn = (new[]{ 'a', 'e', 'i', 'o', 'u' }.Any(c => c == Model.LifeEventName.ToLower().First()))
                ? "an"
                : "a";

    Layout = "_GenericEditorLayout";
    ViewData["Title"] = $"{Model.Type} {aOrAn} {Model.LifeEventName} Entry";
    ViewData["Breadcrumb"] = Model.Breadcrumb;

    var formAction = (Model.Type != LifeEventEntryEditorType.Test)
                     ? (Model.Type == LifeEventEntryEditorType.Create)
                       ? "CreateEntry"
                       : "EditEntry"
                     : "";
}

<partial name="_ViewModelWithMessagePartial" model="@Model" />

<section class="editor section">
    <section>
        <h4>Fields</h4>
        <div class="content">
            <form id="formEntry" class="ui form" method="post" asp-action="@formAction">
                <input type="hidden" asp-for="LifeEventId" />
                <input type="hidden" asp-for="LifeEventEntryId" />
                <input type="hidden" asp-for="RedirectController" />
                <input type="hidden" asp-for="RedirectAction" />
                <input type="hidden" asp-for="Breadcrumb" />
                <input type="hidden" asp-for="Type" />
                <input type="hidden" asp-for="LifeEventName"/>

                @foreach (var field in Model.GET_FieldInfo)
                {
                    <partial name="_EntryInputPartial" model="new LifeEventEntryInputPartialViewModel{ Info = field, Values = Model.Values }" />
                }

                <button class="ui primary fluid button" type="submit">YES</button>
            </form>
        </div>
    </section>
</section>

@section Scripts {
    <script type="module">
        window.onSubmitHooks = []; // So _EntryInputPartial can hook into the onsubmit event easily.

        document.getElementById("formEntry").onsubmit = function () {
            for (const func of window.onSubmitHooks)
                func();
        };
    </script>
}