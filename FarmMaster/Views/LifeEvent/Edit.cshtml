@model LifeEventEditViewModel
@{
    Layout = "_GenericEditorLayout";
    ViewData["Title"] = "Edit Life Event";
    ViewData["Breadcrumb"] = new Dictionary<string, string>
    {
        { "Home", "/Home/Index" },
        { "Life Events", "/LifeEvent/Index" },
        { "Edit", "/LifeEvent/Edit" }
    };
}

<partial name="_ModalAreYouSure_NoUndo" />

<section class="editor section">
    <partial name="_ViewModelWithMessagePartial" model="@Model" />
    <section>
        <h4>Information</h4>
        <div class="content">
            <form class="ui form" method="post" asp-action="Edit">
                <input id="inputEventId" type="hidden" asp-for="Id" />
                <div class="field">
                    <label>Name</label>
                    <input asp-for="Name" autocomplete="off" />
                </div>
                <div class="field">
                    <label>Description</label>
                    <input asp-for="Description" autocomplete="off" />
                </div>

                <button class="ui primary fluid button" type="submit">
                    Edit Life Event
                </button>

                <button class="ui secondary inverted button" onclick="document.location = '/LifeEvent/TestEntryEditor?lifeEventId=@Model.Id'">
                    Test Editor
                </button>

                <div asp-validation-summary="All"></div>
            </form>
        </div>
    </section>

    <section>
        <h4>Fields</h4>
        <div class="content">
            <section class="ui form">
                <table class="ui striped table">
                    <thead>
                        <tr class="three columns">
                            <th class="editor action"></th>
                            <th>Name</th>
                            <th>Type</th>
                            <th>Description</th>
                        </tr>
                    </thead>
                    <tbody id="tableFieldBody">
                        @foreach (var field in Model.GET_Fields)
                        {
                            <tr>
                                
                                <td class="ui compact">
                                    <button class="ui red icon button @(Model.GET_IsInUse ? "disabled" : "")"
                                            onclick="onDeleteField('@field.Name')">
                                        <i class="ui close icon"></i>
                                    </button>
                                </td>
                                <td>@field.Name</td>
                                <td>@field.Type</td>
                                <td>@field.Description</td>
                            </tr>
                        }
                    </tbody>
                </table>
                @if (Model.GET_IsInUse)
                {
                    <div class="ui warning message transition visible">
                        <p>This Life Event is being used somewhere, so its fields can no longer be modified.</p>
                        <p>Please remove all uses of this Life Event if you wish to modify its fields again.</p>
                    </div>
                }
                else
                {
                    <div class="life event field create">
                        <div class="field">
                            <label>Name:</label>
                            <input id="inputName" type="text" />
                        </div>
                        <div class="field">
                            <label>Type:</label>
                            <div class="ui fluid search selection dropdown">
                                <input id="inputType" type="hidden" name="gender">
                                <i class="dropdown icon"></i>
                                <div class="default text">Type</div>
                                <div class="menu">
                                    <div class="item">DateTime</div>
                                    <div class="item">Text</div>
                                    <div class="item">TimeSpan</div>
                                </div>
                            </div>
                        </div>
                        <div class="field">
                            <label>Description:</label>
                            <input id="inputDescription" type="text" />
                        </div>
                        <div class="field">
                            <button class="ui fluid primary button" onclick="onAddField()">
                                Add
                            </button>
                        </div>
                    </div>
                }
                <div id="boxFieldError" class="ui message transition hidden"></div>
            </section>
        </div>
    </section>
</section>

@section Scripts {
    <script type="module">
        import { FarmAjax, FarmAjaxMessageType, drange, Modal, Validation } from "/js/index.js"

        $(".ui.dropdown").dropdown();

        Validation.hookupForm(document.querySelector(".ui.form"));

        function onAddField() {
            const name = document.getElementById("inputName").value;
            const type = document.getElementById("inputType").value;
            const desc = document.getElementById("inputDescription").value;

            FarmAjax.postWithMessageResponse(
                "/Ajax/LifeEvent_ById_Field_Add",
                {
                    name: name,
                    type: type,
                    value: desc,
                    id: document.getElementById("inputEventId").value
                },
                response => {
                    if (response.messageType !== FarmAjaxMessageType.Information) {
                        response.populateMessageBox(document.getElementById("boxFieldError"));
                        return;
                    }

                    const tbody = document.getElementById("tableFieldBody");
                    const tr = tbody.appendChild(document.createElement("tr"));

                    // Delete button
                    let td = tr.appendChild(document.createElement("td"));
                    const button = td.appendChild(document.createElement("button"));
                    button.classList.add("ui", "red", "icon", "button");
                    button.onclick = () => onDeleteField(name);
                    const i = button.appendChild(document.createElement("i"));
                    i.classList.add("ui", "close", "icon");

                    td = tr.appendChild(document.createElement("td"));
                    td.innerText = name;

                    td = tr.appendChild(document.createElement("td"));
                    td.innerText = type;

                    td = tr.appendChild(document.createElement("td"));
                    td.innerText = desc;

                    document.getElementById("inputName").value = "";
                    document.getElementById("inputDescription").value = "";
                }
            );
        }
        window.onAddField = onAddField;

        function onDeleteField(name) {
            Modal
                .askAreYouSure()
                .then(() => {
                    FarmAjax.postWithMessageResponse(
                        "/Ajax/LifeEvent_ById_Field_Delete_ByName",
                        {
                            id: document.getElementById("inputEventId").value,
                            name: name
                        },
                        r => {
                            if (r.messageType !== FarmAjaxMessageType.Information) {
                                r.populateMessageBox(document.getElementById("boxFieldError"));
                                return;
                            }

                            const tbody = document.getElementById("tableFieldBody");
                            for (const tr of tbody.querySelectorAll("tr")) {
                                const tdName = tr.querySelectorAll("td")[1];
                                if (tdName.innerText === name) {
                                    tbody.removeChild(tr);
                                    return;
                                }
                            }
                        }
                    );
                });
        }
        window.onDeleteField = onDeleteField;
    </script>
}