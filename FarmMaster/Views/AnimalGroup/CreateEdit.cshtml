@model AnimalGroupCreateEditViewModel
@{
    var pageBreadcrumb = new Dictionary<string, string>()
    {
        { "Home", "/" },
        { "Animal Groups", "/AnimalGroup/" },
        {
            (Model.IsCreate) ? "Create" : "Edit",
            "#"
        }
    }; // Stored in a variable so we can reuse it for some JS code.
    var lifeEventBreadcrumb = pageBreadcrumb.Select(kvp => $"{kvp.Key}:{kvp.Value}")
                                            .Aggregate((s1, s2) => $"{s1}>{s2}");
    lifeEventBreadcrumb += $">{Model.Name}:/AnimalGroup/Edit/{Model.GroupId}";

    Layout                 = "_GenericEditorLayout";
    ViewData["Title"]      = $"{(Model.IsCreate ? "Create" : "Edit")} an animal group";
    ViewData["Breadcrumb"] = pageBreadcrumb;
}

<partial name="_ViewModelWithMessagePartial" model="@Model" />
<partial name="_ModalAreYouSure_NoUndo" />

<section class="editor section">
    <section>
        <h4>Information</h4>
        <div class="content">
            <form class="ui form" method="post" asp-action="@(Model.IsCreate ? "Create" : "Edit")">
                <input type="hidden" asp-for="IsCreate" />
                <input type="hidden" asp-for="GroupId" />

                <div class="field">
                    <label>Name</label>
                    <input asp-for="Name" autocomplete="off" />
                </div>
                <div class="field">
                    <label>Description</label>
                    <input asp-for="Description" autocomplete="off" />
                </div>

                <button class="ui primary fluid button" type="submit">
                    @(Model.IsCreate ? "Create new Animal Group" : "Edit Animal Group")
                </button>
            </form>
        </div>
    </section>
    @if(Model.IsCreate)
    {
        <section>
            <div class="ui visible info message">
                Further configuration can only be performed once the group has been created.
            </div>
        </section>
    }
    else
    {
        <section>
            <h4>Life Events</h4>
            <div class="content">
                <div class="ui info message">
                    <p>
                        From here you can create a new life event and apply it to every animal of this group.
                        There are a few caveats with life events created like this though:
                    </p>
                    <ul>
                        <li>Modifying the life event's data will apply the changes to every animal.</li>
                        <li>Deleting the life event from one animal does not delete it from every animal.</li>
                    </ul>
                </div>

                <div class="ui form">
                    <vc:dropdown label="Life Event"
                                 default-value="-1"
                                 is-multiple-select="false"
                                 dropdown-id="selectLifeEvent"
                                 goto-controller="LifeEvent"
                                 goto-action="Index"
                                 asp-for="DUMMY_VALUE"/>
                    <button id="buttonCreateLifeEvent" class="ui primary button">Create a new life event entry</button>
                </div>
            </div>
        </section>
        <section>
            <h4>Animals in this group</h4>
            <div class="content">
                <div class="ui visible info message">
                    Animals can be assigned to a group by going to their individual pages.
                </div>
                <div id="gridAnimals" class="three animal card average scrollable grid">
                    @foreach (var animal in Model.Animals)
                    {
                        <div class="animal card">
                            <a href="/Animal/Edit/@animal.Id" target="_blank">
                                <div class="ui card">
                                    <div class="image">
                                        <img src="/Image/Get?imageId=@(animal.ImageId ?? -1)&width=664&height=700" />
                                    </div>
                                    <div class="content">
                                        <div class="header">
                                            @animal.Name
                                        </div>
                                    </div>
                                </div>
                            </a>
                        </div>
                    }
                </div>
            </div>
        </section>
        <section>
            <h4>Assignment script</h4>
            <div class="content">
                <partial name="_AnimalGroupScriptEditor" model="@(new AnimalGroupScriptEditorSingleUseViewModel
                {
                    AnimalGridId = "gridAnimals",
                    GroupId      = Model.GroupId
                })"/>
            </div>
        </section>
    }
</section>

@section Scripts {
    <script type="module">
        import { Dropdown } from "/js/index.js";

        const selectLifeEvent = new Dropdown("selectLifeEvent");
        selectLifeEvent.fromLifeEventGraphQL();

        document.getElementById("buttonCreateLifeEvent").addEventListener("click", () => {
            @{
                var lifeEventCreateBreadcrumb = lifeEventBreadcrumb + ">Create Entry:#";
            }
            const lifeEventId = selectLifeEvent.inputNode.value;
            const url =
                "/LifeEvent/CreateEntry"
                + "?lifeEventId=" + lifeEventId
                + "&redirectController=AnimalGroup"
                + "&redirectAction=OnCreateLifeEvent"
                + "&redirectEntityId=" + @Model.GroupId
                + "&breadcrumb=@Html.Raw(lifeEventCreateBreadcrumb)";
            window.open(url, "_self");
        });
    </script>
}