@*
A Generic layout used for the CreateEdit page for basic CRUD.
    
Sections:
    [Required] MainWindowForm - Insert any additional fields, as well as the submit button here. This is for the main form (see Features).
    PostMainWindow - Use this to add in any additional windows your CRUD might need.
    VueScript - Use this to provide any additional data into the main Vue instance for this page.

Features:
    The toggle and delete buttons are automatically handled.

    The Vue instance is automatically created.

        - There is a 'mode' variable which you can reference in your vue markup to control whether we're in 'edit' or 'view' mode.

    The main form will automatically point to the controller's 'Edit' POST.

    The delete button will automatically point to the controller's 'Delete' POST.

Requirements:
    Provide a filled out `CrudLayoutViewModel` as `ViewData["LayoutModel"]`
*@
@{
    Layout = "_Layout";

    var model = (CrudLayoutViewModel)ViewData["LayoutModel"];

    var entityName         = model.EntityName;
    var entityId           = model.EntityId ?? -1;
    var entityIdExpression = model.EntityIdExpression;

    ViewData["Title"] = $"Create a new {entityName}";
    ViewData["NavName"] = entityName;

    ViewData["Breadcrumb"] = new Breadcrumb()
                             .Add(entityName, $"/{entityName}")
                             .For("Create")
                                .Add("Create", $"/{entityName}/Create")
                             .For("Edit")
                                .Add("Edit", "#")
                                .Add(Model.Entity?.Name ?? "N/A", "#")
                             .Use("Create", Model.IsCreate)
                             .Use("Edit", !Model.IsCreate);

    var action = (Model.IsCreate) ? "Create" : "Edit";
}

<div id="app">
    <window title="Create a new @entityName">
        @if (!Model.IsCreate)
        {
            <form id="deleteForm" method="post" asp-action="Delete" asp-route-id="@entityId">
            </form>

            <toggle-button class="bottom margined blue"
                           v-model="isEdit"
                           untoggled-text="Edit"
                           toggled-text="View">
            </toggle-button>
            <button class="left margined red"
                    @@click="showDeleteModal">
                Delete
            </button>

            <delete-modal ref="modal" @@click="onDelete">
            </delete-modal>
        }
        <form method="post" asp-action="@action">
            <input type="hidden" name="IsCreate" value="@(Model.IsCreate ? "true" : "false")" />
            <input type="hidden" name="@entityIdExpression" value="@entityId" />

            @RenderSection("MainWindowForm", true)
        </form>
    </window>

    @RenderSection("PostMainWindow", false)
</div>

@section Scripts {
    <script>
        const userVue = {
            @RenderSection("VueScript", false)
        };

        let baseVue = {
            el: "#app",
            data: {
                isEdit: @(Model.IsCreate ? "true" : "false") // Default to Edit mode when creating. Default to view mode when view/edit
            },
            computed: {
                mode() {
                    return this.isEdit ? "edit" : "view";
                }
            },
            methods: {
                showDeleteModal() {
                    this.$refs.modal.show();
                },

                onDelete() {
                    document.getElementById("deleteForm").submit();
                }
            }
        };

        function mergeToBase(key) {
            if (userVue[key])
                baseVue[key] = { ...baseVue[key], ...userVue[key] };

            delete userVue[key];
        }
        
        mergeToBase("data");
        mergeToBase("methods");
        mergeToBase("computed");

        baseVue = { ...baseVue, ...userVue };

        new Vue(baseVue);
    </script>
}