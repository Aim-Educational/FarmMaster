@inject SignInManager<ApplicationUser> signIn
@inject UserManager<ApplicationUser> users
@inject IAuthorizationService auth

@using Microsoft.AspNetCore.Authorization
@using FarmMaster.Constants
@using DataAccess.Constants

@{ 
    Func<string, string> checkPolicy = policy => 
    {
        return (auth.AuthorizeAsync(User, policy).Result.Succeeded) ? "true" : "false"; // Result is to be mixed into JS
    };
}

<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>@ViewData["Title"] - FarmMaster</title>
    <link rel="stylesheet" href="~/css/bundle.min.css" />
    <link href="https://fonts.googleapis.com/css2?family=Lato&display=swap" rel="stylesheet">
    <link href="https://fonts.googleapis.com/css2?family=Roboto&display=swap" rel="stylesheet">
    <link href="https://maxst.icons8.com/vue-static/landings/line-awesome/line-awesome/1.3.0/css/line-awesome.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://unpkg.com/vue-multiselect@2.1.0/dist/vue-multiselect.min.css">

    <environment include="Development">
        <script src="https://cdn.jsdelivr.net/npm/vue/dist/vue.js"></script>
    </environment>
    <environment exclude="Development">
        <script src="https://cdn.jsdelivr.net/npm/vue"></script>
    </environment>
</head>
<body>
    <aside id="leftMenu">
        <h1>
            FarmMaster
        </h1>
        <section v-for="(section, name) in sections"
                 v-if="section.shown"
                 :key="name">
            <header>{{ name }}</header>
            <a v-for="(item, itemName) in section.items"
               v-if="item.shown"
               :class="{'active': item.active}"
               :key="itemName"
               :href="item.href">
                <div class="indicator"></div>
                <span>{{ itemName }}</span>
                <img width="25" height="25" :src="item.icon" />
            </a>
        </section>
    </aside>
    
    <div class="wrapper">
        <header>
            <div id="leftMenuToggle" class="aside toggle">
                <i class="la la-bars"></i>
                <script>
                    document.getElementById("leftMenuToggle").onclick = () => document.getElementById("leftMenu").classList.toggle("collapsed");
                </script>
            </div>
            <div class="breadcrumb">
                @if(ViewData.ContainsKey("Breadcrumb"))
                {
                    // Key is crumb name. Value is href.
                    foreach(var kvp in (Breadcrumb)ViewData["Breadcrumb"])
                    {
                        <a class="crumb" href="@kvp.Value">
                            @kvp.Key
                        </a>
                    }
                }
            </div>
            <div class="profile">
                @if (signIn.IsSignedIn(User))
                {
                    <div class="name">
                        Logged in as
                        <a href="/Admin/ManageUser?userId=@users.GetUserId(User)">
                            <strong>@users.GetUserName(User)</strong>
                        </a>
                    </div>
                    <a asp-action="Logout" asp-controller="Account" class="la la-sign-out-alt"></a>
                }
            </div>
        </header>

        <main role="main">
            <div class="wrapper">
                @RenderBody()
            </div>
        </main>
    </div>

    <footer>
    </footer>

    <!--Libraries-->
    <script src="~/js/libs.js" asp-append-version="true"></script>
    <script src="~/js/controls.js" asp-append-version="true"></script>
    <script src="~/js/external_controls.js" asp-append-version="true"></script>

    <!--Navbar JS-->
    <script>
        new Vue({
            el: "#leftMenu",
            data: {
                sections: {
                    manage: {
                        shown: true,
                        items: {
                            contacts: { shown: @checkPolicy(Permissions.Contact.ManageUI), icon: null, href: "/Contact" },
                            species:  { shown: @checkPolicy(Permissions.Species.ManageUI), icon: null, href: "/Species" },
                            breeds:   { shown: @checkPolicy(Permissions.Breed.ManageUI),   icon: null, href: "/Breed"   }
                        }
                    },
                    admin: {
                        shown: @checkPolicy(Policies.SeeAdminPanel),
                        items: {
                            controls: { shown: @checkPolicy(Permissions.Other.DebugUI),   icon: null, href: "/Admin/ControlTest" },
                            graphql:  { shown: @checkPolicy(Permissions.Other.GraphQLUI), icon: null, href: "/ui/playground" },
                            settings: { shown: @checkPolicy(Permissions.Other.Settings),  icon: null, href: "/Admin/Settings" },
                            users:    { shown: @checkPolicy(Permissions.User.ManageUI),   icon: null, href: "/Admin/Users" }
                        }
                    }
                }
            },
            beforeMount() {
                @if(ViewData.ContainsKey("NavName"))
                {
                    @:for (const sectionName of Object.keys(this.sections)) {
                        @:const section = this.sections[sectionName];
                        @:for(const navName of Object.keys(section.items)) {
                            @:if (navName.toUpperCase() === "@ViewData["NavName"].ToString().ToUpper()") {
                                @:section.items[navName].active = true;
                                @:break;
                            @:}
                        @:}
                    @:}
                }
            }
        });
    </script>

    <!--User JS-->
    @RenderSection("Scripts", required: false)
</body>
</html>
