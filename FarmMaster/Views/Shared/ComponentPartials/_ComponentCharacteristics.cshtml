<!--
    REQUIRES "_ModalAreYouSure_NoUndo" PARTIAL TO BE INCLUDED AS WELL.    
-->

@model ComponentCharacteristicsViewModel
@{
    // NOTE: This was mostly so our custom ids don't clash with any user made ones, while stil making it a bit easier to read.
    //       If I went back in time I'd stop myself from creating such horror.
    // __cc__ = __ComponentCharacteristics__
    var idInputName             = "__cc__inputName";
    var idInputType             = "__cc__inputType";
    var idTable                 = "__cc__table";
    var idCharacteristicError   = "__cc__boxCharaError";
    var idInputTimeSpanDays     = "__cc__inputTimeSpanDays";
    var idInputTimeSpanMinutes  = "__cc__inputTimeSpanMins";
    var idInputTimeSpanSeconds  = "__cc__inputTimeSpanSecs";
    var idInputTextText         = "__cc__inputTextText";
    var funcAddTimeSpan         = "__cc__addTimeSpan";
    var funcAddText             = "__cc__addText";
    var classDivCreate          = "ui transition hidden";
}

<section class="ui styled fluid accordion">
    <div class="title">
        <i class="dropdown icon"></i>
        Add a characteristic
    </div>
    <div class="content">
        <section class="ui form">
            <div class="field">
                <label>Name</label>
                <input id="@idInputName" placeholder="Name" />
            </div>
            <div class="field">
                <label>Type</label>
                <div class="ui fluid search selection dropdown">
                    <input id="@idInputType" type="hidden" />
                    <i class="dropdown icon"></i>
                    <div class="default text">Type</div>
                    <div class="menu">
                        <div class="item" data-content-id="divCreateText">Text</div>
                        <div class="item" data-content-id="divCreateTimespan">TimeSpan</div>
                    </div>
                </div>
            </div>
            <div class="ui divider"></div>
            <div class="field">
                <div id="divCreateTimespan" class="@classDivCreate">
                    <div class="three inline fields">
                        <div class="field">
                            <label>Days</label>
                            <input id="@idInputTimeSpanDays" type="number" value="0" />
                        </div>                        
                        <div class="field">
                            <label>Minutes</label>
                            <input id="@idInputTimeSpanMinutes" type="number" value="0" />
                        </div>                        
                        <div class="field">
                            <label>Seconds</label>
                            <input id="@idInputTimeSpanSeconds" type="number" value="0" />
                        </div>
                    </div>
                    <div class="field">
                        <button class="ui fluid button" onclick="@funcAddTimeSpan ();">Add TimeSpan Characteristic</button>
                    </div>
                </div>
                <div id="divCreateText" class="@classDivCreate">
                    <div class="field">
                        <label>Text</label>
                        <input id="@idInputTextText" type="text" />
                    </div>
                    <div class="field">
                        <button class="ui fluid button" onclick="@funcAddText ();">Add Text Characteristic</button>
                    </div>
                </div>
            </div>
            <div id="@idCharacteristicError" class="ui error message transition hidden"></div>
        </section>
    </div>
</section>

<table id="@idTable" class="ui striped table">
    <thead>
        <tr class="three columns">
            <th class="editor action"></th>
            <th>Name</th>
            <th>Type</th>
            <th>Value</th>
        </tr>
    </thead>
    <tbody>

    </tbody>
</table>
<div id="idTableErrorBox" class="ui error message transition hidden"></div>

<script type="module">
    import { FarmAjax, FarmAjaxMessageType, Modal, CharacteristicHelper } from "/js/index.js";

    const menuTypeSelect = document.getElementById("@idInputType");
    const allItems = menuTypeSelect.parentElement.querySelectorAll("div.item");

    menuTypeSelect.addEventListener("change", () => {
        for (const item of allItems) {
            const elem = document.getElementById(item.dataset.contentId);
            if (item.innerText.toLowerCase() === menuTypeSelect.value.toLowerCase())
                elem.classList.remove("hidden");
            else
                elem.classList.add("transition", "hidden");
        }
    });

    function addCharacteristic(ajaxValue) {
        const inputName = document.getElementById("@idInputName");
        const errorBox = document.getElementById("@idCharacteristicError");

        errorBox.classList.add("hidden");

        FarmAjax.postWithMessageResponse(
            "@Model.AjaxAddUrl",
            {
                id: @Model.EntityId,
                name: inputName.value,
                type: document.getElementById("@idInputType").value,
                value: ajaxValue
            },
            r => {
                if (r.messageType !== FarmAjaxMessageType.Information) {
                    r.populateMessageBox(errorBox);
                    return;
                }
                refresh();
            }
        );

        inputName.value = "";
    }

    function addText() {
        const input = document.getElementById("@idInputTextText");
        const value = input.value;
        const ajaxValue = CharacteristicHelper.createTextForAjax(value);

        input.value = "";
        addCharacteristic(ajaxValue);
    }
    window.@(funcAddText) = addText;

    function addTimeSpan() {
        const inputs = [
            document.getElementById("@idInputTimeSpanDays"),
            document.getElementById("@idInputTimeSpanMinutes"),
            document.getElementById("@idInputTimeSpanSeconds")
        ];
        const ajaxValue = CharacteristicHelper.createTimeSpanForAjax(
            inputs[0].value,
            inputs[1].value,
            inputs[2].value
        );

        for (const input of inputs)
            input.value = 0;

        addCharacteristic(ajaxValue);
    }
    window.@(funcAddTimeSpan) = addTimeSpan;

    function deleteById(id) {
        Modal
            .askAreYouSure()
            .then(() => {
                FarmAjax.postWithMessageResponse(
                    "@Model.AjaxDeleteUrl",
                    {
                        byId: @Model.EntityId,
                        forId: id
                    },
                    r => {
                        if (r.messageType !== FarmAjaxMessageType.Information) {
                            r.populateMessageBox(document.getElementById("idTableErrorBox"));
                            return;
                        }

                        refresh();
                    }
                );
            });
    }

    function refresh() {
        const table = document.getElementById("@idTable");
        const tbody = table.querySelector("tbody");
        tbody.innerHTML = "";
        tbody.innerText = "";

        FarmAjax.postWithMessageAndValueResponse(
            "@Model.AjaxListUrl",
            {
                id: @Model.EntityId
            },
            rv => {
                if (rv.messageType !== FarmAjaxMessageType.Information) {
                    rv.populateMessageBox(document.getElementById("idTableErrorBox"));
                    return;
                }

                for (const value of rv.value) {
                    const tr = tbody.appendChild(document.createElement("tr"));
                    {
                        let td = tr.appendChild(document.createElement("td"));
                        {
                            const button = td.appendChild(document.createElement("button"));
                            button.classList.add("ui", "red", "icon", "button");
                            {
                                const i = button.appendChild(document.createElement("i"));
                                i.classList.add("close", "icon");
                            }

                            if (value.isInherited) {
                                button.classList.add("disabled");
                                button.onclick = () => alert("This value has been inherited, so cannot be modified here.");
                            }
                            else
                                button.onclick = () => deleteById(value.id);
                        }

                        td = tr.appendChild(document.createElement("td"));
                        td.innerText = (value.isInherited) ? "[Inherited] " + value.name : value.name;

                        td = tr.appendChild(document.createElement("td"));
                        td.innerText = value.type;

                        td = tr.appendChild(document.createElement("td"));
                        td.innerText = value.value;
                    }
                }
            }
        );
    }
    refresh();
</script>