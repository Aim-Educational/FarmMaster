@model ComponentTableViewModel

@{
    var idSegmentTable = $"segment{Model.Name}Table";
    var idErrorTable   = $"error{Model.Name}Table";
    var idSegmentInput = $"segment{Model.Name}Input";
    var idTxtName      = $"txt{Model.Name}Name";
    var idTxtValue     = $"txt{Model.Name}Value";
    var idError        = $"error{Model.Name}";
    var funcOnAdd      = $"on{Model.Name}Add";
    var funcOnRemove   = $"on{Model.Name}Remove";
    var onClickAdd     = $"{funcOnAdd}()";

    Func<string, string> onClickRemove  = (string key) => $"{funcOnRemove}('{key}')";
}

<section class="ui form">
    <section class="field">
        <h4 class="ui top attached header">
            @Model.Header
        </h4>

        <section id="@idSegmentTable" class="ui attached segment">
            <table class="ui striped celled table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Value</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var nameValue in Model.NameValues)
                    {
                        <tr>
                            <td data-name="@(nameValue.AjaxName?.ToString() ?? nameValue.Name)">@nameValue.Name</td>
                            <td>@nameValue.Value</td>
                            <td class="collapsing">
                                <a class="ui red inverted button" onclick="@onClickRemove(nameValue.AjaxName?.ToString() ?? nameValue.Name)">
                                    Remove
                                </a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div id="@idErrorTable" class="ui error message"></div>
        </section>

        <section id="@idSegmentInput" class="ui bottom attached segment">
            <section class="three inline fields">
                @*Create the Name field.*@
                <partial name="_ComponentTable_InputPartial" model="@{
                    new ComponentTableInputPartialViewModel
                    {
                        IdInput = idTxtName,
                        Input = Model.NameInput,
                        InputHeader = "Name"
                    }
                }" />

                @*Create the value field.*@
                <partial name="_ComponentTable_InputPartial" model="@{
                    new ComponentTableInputPartialViewModel
                    {
                        IdInput = idTxtValue,
                        Input = Model.ValueInput,
                        InputHeader = "Value"
                    }
                }" />

                <div class="compact field">
                    <button class="ui primary fluid button" type="button" onclick="@onClickAdd">
                        Add
                    </button>
                </div>
            </section>
            <div id="@idError" class="ui error message"></div>
        </section>
    </section>
</section>

<script type="module">
    import { ComponentModal, ComponentTable } from "/js/index.js";

    function @funcOnAdd () {
        ComponentModal.showContactActionReasonModal(function (reason)
        {
            ComponentTable.onAddAjax(
                document.getElementById("@idTxtName"),
                document.getElementById("@idTxtValue"),
                document.getElementById("@idError"),
                document.getElementById("@idSegmentTable"),
                document.getElementById("@idSegmentInput"),
                '@Model.AjaxAdd',
                reason,
                @Model.DataId,
                (name) => window.@funcOnRemove (name)
            );
        });
    }
    window.@funcOnAdd = @funcOnAdd;

    function @funcOnRemove (name) {
        ComponentModal.showContactActionReasonModal(function (reason)
        {
            ComponentTable.onDeleteAjax(
                document.getElementById("@idErrorTable"),
                document.getElementById("@idSegmentTable"),
                '@Model.AjaxRemove',
                reason,
                name,
                @Model.DataId
            );
        });
    }
    window.@funcOnRemove = @funcOnRemove;
</script>