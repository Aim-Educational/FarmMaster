@model SpeciesBreedIndexViewModel
@{
    Layout = "_GenericEditorLayout";
    ViewData["Title"] = "Species & Breeds";
    ViewData["Breadcrumb"] = new Dictionary<string, string>
    {
        { "Home", "/Home/Index" },
        { "Species & Breeds", "/SpeciesBreed/Index" }
    };
}

<partial name="_ViewModelWithMessagePartial" model="Model" />

<section class="ui centered stackable grid">
    <div class="two column row">
        <div class="column">
            <div class="ui center aligned attached header">
                <h2>Species</h2>
                <a class="ui fluid primary button" asp-action="CreateSpecies">Create</a>
                <br />
                <vc:paged-table table-id="tableSpecies"
                                headers="Name"
                                page-name="species"
                                controller="SpeciesBreed"
                                action-delete="DeleteSpecies"
                                action-edit="EditSpecies" />
            </div>
        </div>
        <div class="column">
            <div class="ui center aligned attached header">
                <h2>Breeds</h2>
                <a class="ui fluid primary button" asp-action="CreateBreed">Create</a>
                <br />
                <vc:paged-table table-id="tableBreed"
                                headers="Name"
                                page-name="breeds"
                                controller="SpeciesBreed"
                                action-delete="DeleteBreed"
                                action-edit="EditBreed"/>
            </div>
        </div>
    </div>
</section>

@section Scripts {
    <script type="module">
        import { ComponentTable, PagedTable } from "/js/index.js"

        new PagedTable(
            "tableSpecies",
            `query GetSpecies($skip: Int, $take: Int) {
                species(skip: $skip, take: $take) {
                    id
                    name
                }
            }`,
            data => data.species.map(s => { return { id: s.id, items: [s.name] }; })
        );

        new PagedTable(
            "tableBreed",
            `query GetBreeds($skip: Int, $take: Int) {
                breeds(skip: $skip, take: $take) {
                    id
                    name
                }
            }`,
            data => data.breeds.map(b => { return { id: b.id, items: [b.name] }; })
        );
    </script>
}