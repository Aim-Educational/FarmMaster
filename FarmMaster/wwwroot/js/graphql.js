const GRAPHQL_ENDPOINT = "/graphql";
export class GraphQL {
    static query(query, variables) {
        return fetch(GRAPHQL_ENDPOINT, {
            headers: {
                "Accept": "application/json",
                "Content-Type": "application/json",
                "RequestVerificationToken": window.RequestVerificationToken
            },
            method: "POST",
            body: JSON.stringify({
                query,
                variables
            })
        })
            .then(r => r.json())
            .then(json => {
            if (json.errors && json.errors.length > 0)
                throw json.errors;
            return json.data;
        })
            .then(json => {
            console.log(json);
            return json;
        });
    }
}
export default GraphQL;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ3JhcGhxbC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL1NjcmlwdHMvZ3JhcGhxbC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLGdCQUFnQixHQUFXLFVBQVUsQ0FBQztBQU01QyxNQUFNLE9BQU8sT0FBTztJQUNULE1BQU0sQ0FBQyxLQUFLLENBQUMsS0FBYSxFQUFFLFNBQXdCO1FBQ3ZELE9BQU8sS0FBSyxDQUNSLGdCQUFnQixFQUNoQjtZQUNJLE9BQU8sRUFBRTtnQkFDTCxRQUFRLEVBQW9CLGtCQUFrQjtnQkFDOUMsY0FBYyxFQUFjLGtCQUFrQjtnQkFDOUMsMEJBQTBCLEVBQUUsTUFBTSxDQUFDLHdCQUF3QjthQUM5RDtZQUNELE1BQU0sRUFBRSxNQUFNO1lBQ2QsSUFBSSxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUM7Z0JBQ2pCLEtBQUs7Z0JBQ0wsU0FBUzthQUNaLENBQUM7U0FDTCxDQUNKO2FBQ0EsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDO2FBQ25CLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNULElBQUksSUFBSSxDQUFDLE1BQU0sSUFBSSxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDO2dCQUNyQyxNQUFNLElBQUksQ0FBQyxNQUFNLENBQUM7WUFDdEIsT0FBTyxJQUFJLENBQUMsSUFBSSxDQUFDO1FBQ3JCLENBQUMsQ0FBQzthQUNELElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtZQUNULE9BQU8sQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUE7WUFDakIsT0FBTyxJQUFJLENBQUM7UUFDaEIsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0NBQ0o7QUFFRCxlQUFlLE9BQU8sQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImNvbnN0IEdSQVBIUUxfRU5EUE9JTlQ6IHN0cmluZyA9IFwiL2dyYXBocWxcIjtcclxuXHJcbmRlY2xhcmUgZ2xvYmFsIHtcclxuICAgIGludGVyZmFjZSBXaW5kb3cgeyBSZXF1ZXN0VmVyaWZpY2F0aW9uVG9rZW46IHN0cmluZyB9XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBHcmFwaFFMIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgcXVlcnkocXVlcnk6IHN0cmluZywgdmFyaWFibGVzOiBvYmplY3QgfCBudWxsKTogUHJvbWlzZTxhbnk+IHtcclxuICAgICAgICByZXR1cm4gZmV0Y2goXHJcbiAgICAgICAgICAgIEdSQVBIUUxfRU5EUE9JTlQsXHJcbiAgICAgICAgICAgIHtcclxuICAgICAgICAgICAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAgICAgICAgICAgICBcIkFjY2VwdFwiOiAgICAgICAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcIkNvbnRlbnQtVHlwZVwiOiAgICAgICAgICAgICBcImFwcGxpY2F0aW9uL2pzb25cIixcclxuICAgICAgICAgICAgICAgICAgICBcIlJlcXVlc3RWZXJpZmljYXRpb25Ub2tlblwiOiB3aW5kb3cuUmVxdWVzdFZlcmlmaWNhdGlvblRva2VuXHJcbiAgICAgICAgICAgICAgICB9LFxyXG4gICAgICAgICAgICAgICAgbWV0aG9kOiBcIlBPU1RcIixcclxuICAgICAgICAgICAgICAgIGJvZHk6IEpTT04uc3RyaW5naWZ5KHtcclxuICAgICAgICAgICAgICAgICAgICBxdWVyeSxcclxuICAgICAgICAgICAgICAgICAgICB2YXJpYWJsZXNcclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICApXHJcbiAgICAgICAgLnRoZW4ociA9PiByLmpzb24oKSlcclxuICAgICAgICAudGhlbihqc29uID0+IHtcclxuICAgICAgICAgICAgaWYgKGpzb24uZXJyb3JzICYmIGpzb24uZXJyb3JzLmxlbmd0aCA+IDApXHJcbiAgICAgICAgICAgICAgICB0aHJvdyBqc29uLmVycm9ycztcclxuICAgICAgICAgICAgcmV0dXJuIGpzb24uZGF0YTtcclxuICAgICAgICB9KVxyXG4gICAgICAgIC50aGVuKGpzb24gPT4ge1xyXG4gICAgICAgICAgICBjb25zb2xlLmxvZyhqc29uKVxyXG4gICAgICAgICAgICByZXR1cm4ganNvbjtcclxuICAgICAgICB9KTtcclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGRlZmF1bHQgR3JhcGhRTDsiXX0=