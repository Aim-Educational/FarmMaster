import { GraphQL } from "./graphql.js";
export class Dropdown {
    constructor(dropdownNodeOrId) {
        if (dropdownNodeOrId instanceof HTMLDivElement)
            this.dropdownNode = dropdownNodeOrId;
        else
            this.dropdownNode = document.getElementById(dropdownNodeOrId);
        if (!this.dropdownNode)
            throw "The dropdown node is null. Parameter given was: " + dropdownNodeOrId;
        // For now, we only support Fomantic UI style, since I doubt it'll be replaced anytime soon.
        this.inputNode = this.dropdownNode.querySelector("div.dropdown input[type=hidden]");
        if (!this.inputNode)
            throw "Could not find the input element. Is your markup in Fomantic UI style?";
        this.menuNode = this.dropdownNode.querySelector("div.dropdown div.menu");
        if (!this.menuNode)
            throw "Could not find the menu element. Is your markup in Fomantic UI style?";
        this.defaultValue = this.inputNode.dataset.defaultValue;
        const refreshButton = this.dropdownNode.querySelector("label .button[data-type=refresh]");
        refreshButton.addEventListener("click", () => this.refresh());
        // Just to make sure Fomantic UI knows about it, saving the user the hassle.
        $(this.menuNode.parentNode).dropdown();
        this._refreshFunc = function () { alert("No refresh function has been assigned."); };
    }
    addItem(
    // Gotta love TS' syntax.
    { name, value = null, isSelected = false }) {
        const item = this.menuNode.appendChild(document.createElement("div"));
        item.classList.add("item");
        item.innerText = name;
        if (value)
            item.dataset.value = value;
        if (isSelected)
            $(this.menuNode.parentNode).dropdown("set selected", value || name);
        return item;
    }
    clear() {
        while (this.menuNode.firstChild)
            this.menuNode.removeChild(this.menuNode.firstChild);
    }
    refresh() {
        this._refreshFunc();
    }
    fromRefreshFunc(func) {
        this._refreshFunc = func;
    }
    fromGraphQL({ query, parameters = null, dataGetter }) {
        this.fromRefreshFunc(() => {
            GraphQL
                .query(query, parameters)
                .then((data) => {
                this.clear();
                const nameValuePairs = dataGetter(data);
                for (const pair of nameValuePairs)
                    this.addItem({ name: pair.name, value: pair.value, isSelected: pair.value == this.defaultValue });
            })
                .catch((reason) => {
                alert("TEMP error handling: " + JSON.stringify(reason));
            });
        });
        this.refresh();
        this.refresh(); // Very weird bug where, during the first refresh, Fomantic UI won't perform "set selected" correctly.
    }
}
export default Dropdown;
//# sourceMappingURL=data:application/json;base64,