import { GraphQL } from "./graphql.js";
export class Dropdown {
    constructor(dropdownNodeOrId) {
        if (dropdownNodeOrId instanceof HTMLDivElement)
            this.dropdownNode = dropdownNodeOrId;
        else
            this.dropdownNode = document.getElementById(dropdownNodeOrId);
        if (!this.dropdownNode)
            throw "The dropdown node is null. Parameter given was: " + dropdownNodeOrId;
        // For now, we only support Fomantic UI style, since I doubt it'll be replaced anytime soon.
        this.inputNode = this.dropdownNode.querySelector("div.dropdown input[type=hidden]");
        if (!this.inputNode)
            throw "Could not find the input element. Is your markup in Fomantic UI style?";
        this.menuNode = this.dropdownNode.querySelector("div.dropdown div.menu");
        if (!this.menuNode)
            throw "Could not find the menu element. Is your markup in Fomantic UI style?";
        this.defaultValue = this.inputNode.dataset.defaultValue;
        const refreshButton = this.dropdownNode.querySelector("label .button[data-type=refresh]");
        refreshButton.addEventListener("click", () => this.refresh());
        // Just to make sure Fomantic UI knows about it, saving the user the hassle.
        $(this.menuNode.parentNode).dropdown({ forceSelection: false });
        this._refreshFunc = function () { alert("No refresh function has been assigned."); };
    }
    // FUNCTIONS TO MANIPULATE ITEMS
    addItem(
    // Gotta love TS' syntax.
    { name, value = null, isSelected = false }) {
        const item = this.menuNode.appendChild(document.createElement("div"));
        item.classList.add("item");
        item.innerText = name;
        if (value)
            item.dataset.value = value;
        if (isSelected) {
            // Fomantic UI's own functions are too buggy to use, so we do things ourselves
            item.classList.add("active", "selected");
            this.inputNode.value = (!value) ? name : value;
            const textbox = this.dropdownNode.querySelector("div.dropdown div.text");
            textbox.innerText = name;
            this.inputNode.dispatchEvent(new Event("change"));
        }
        return item;
    }
    clear() {
        while (this.menuNode.firstChild)
            this.menuNode.removeChild(this.menuNode.firstChild);
        const textbox = this.dropdownNode.querySelector("div.dropdown div.text");
        textbox.innerText = "";
    }
    refresh() {
        this._refreshFunc();
    }
    // GENERIC DATA SOURCES
    fromRefreshFunc(func) {
        this._refreshFunc = func;
    }
    fromGraphQL({ query, parameters = null, dataGetter }) {
        this.fromRefreshFunc(() => {
            GraphQL
                .query(query, parameters)
                .then((data) => {
                this.clear();
                const nameValuePairs = dataGetter(data);
                for (const pair of nameValuePairs)
                    this.addItem({ name: pair.name, value: pair.value, isSelected: pair.value == this.defaultValue });
            })
                .catch((reason) => {
                alert("TEMP error handling: " + JSON.stringify(reason));
            });
        });
        this.refresh();
    }
    // COMMON DROPDOWN DATA SOURCES
    //
    // If the data source is used in more than one page, its probably best to put it here.
    fromNameIdGraphQL(entityName) {
        this.fromGraphQL({
            query: `query GetOwners {
                ${entityName} {
                    id
                    name
                }
            }`,
            dataGetter: (json) => json[entityName].map(function (v) {
                return { name: v.name, value: String(v.id) };
            })
        });
    }
    fromContactGraphQL() {
        this.fromNameIdGraphQL("contacts");
    }
    fromSpeciesGraphQL() {
        this.fromNameIdGraphQL("species");
    }
    fromHoldingGraphQL() {
        this.fromNameIdGraphQL("holdings");
    }
    fromAnimalGroupGraphQL() {
        this.fromNameIdGraphQL("animalGroups");
    }
    fromBreedGraphQL() {
        this.fromNameIdGraphQL("breeds");
    }
    fromLifeEventGraphQL() {
        this.fromNameIdGraphQL("lifeEvents");
    }
}
export default Dropdown;
//# sourceMappingURL=data:application/json;base64,