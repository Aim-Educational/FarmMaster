export class Modal {
    static askForReason() {
        const modal = document.getElementById("modalReason");
        if (modal === null) {
            alert("Dev error: No element with ID of 'modalReason'");
            return null;
        }
        const inputReason = modal.querySelector("input.reason");
        if (inputReason === null) {
            alert("Dev error: Modal does not contain an <input> with class of 'reason'");
            return null;
        }
        return new Promise((resolve, reject) => {
            $(modal)
                .modal({
                onApprove: function () {
                    resolve(inputReason.value);
                    inputReason.value = "";
                },
                onDeny: function () {
                    reject("User canceled action.");
                    inputReason.value = "";
                }
            })
                .modal("show");
        });
    }
    static askAreYouSure(modalId = "modalAreYouSure") {
        const modal = document.getElementById(modalId);
        if (modal === null) {
            alert("Dev error: No element with ID of '" + modalId + "'");
            return null;
        }
        return new Promise((resolve, reject) => {
            $(modal)
                .modal({
                onApprove: function () {
                    resolve();
                },
                onDeny: function () {
                    reject();
                }
            })
                .modal("show");
        });
    }
}
export default Modal;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibW9kYWwuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi9TY3JpcHRzL21vZGFsLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE1BQU0sT0FBTyxLQUFLO0lBQ1AsTUFBTSxDQUFDLFlBQVk7UUFDdEIsTUFBTSxLQUFLLEdBQUcsUUFBUSxDQUFDLGNBQWMsQ0FBQyxhQUFhLENBQUMsQ0FBQztRQUNyRCxJQUFJLEtBQUssS0FBSyxJQUFJLEVBQUU7WUFDaEIsS0FBSyxDQUFDLGdEQUFnRCxDQUFDLENBQUM7WUFDeEQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE1BQU0sV0FBVyxHQUFHLEtBQUssQ0FBQyxhQUFhLENBQUMsY0FBYyxDQUFxQixDQUFDO1FBQzVFLElBQUksV0FBVyxLQUFLLElBQUksRUFBRTtZQUN0QixLQUFLLENBQUMscUVBQXFFLENBQUMsQ0FBQztZQUM3RSxPQUFPLElBQUksQ0FBQztTQUNmO1FBRUQsT0FBTyxJQUFJLE9BQU8sQ0FBQyxDQUFDLE9BQU8sRUFBRSxNQUFNLEVBQUUsRUFBRTtZQUNuQyxDQUFDLENBQUMsS0FBSyxDQUFDO2lCQUNILEtBQUssQ0FBQztnQkFDSCxTQUFTLEVBQUU7b0JBQ1AsT0FBTyxDQUFDLFdBQVcsQ0FBQyxLQUFLLENBQUMsQ0FBQztvQkFDM0IsV0FBVyxDQUFDLEtBQUssR0FBRyxFQUFFLENBQUM7Z0JBQzNCLENBQUM7Z0JBRUQsTUFBTSxFQUFFO29CQUNKLE1BQU0sQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO29CQUNoQyxXQUFXLENBQUMsS0FBSyxHQUFHLEVBQUUsQ0FBQztnQkFDM0IsQ0FBQzthQUNKLENBQUM7aUJBQ0QsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3ZCLENBQUMsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztJQUVNLE1BQU0sQ0FBQyxhQUFhLENBQUMsVUFBa0IsaUJBQWlCO1FBQzNELE1BQU0sS0FBSyxHQUFHLFFBQVEsQ0FBQyxjQUFjLENBQUMsT0FBTyxDQUFDLENBQUM7UUFDL0MsSUFBSSxLQUFLLEtBQUssSUFBSSxFQUFFO1lBQ2hCLEtBQUssQ0FBQyxvQ0FBb0MsR0FBRyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7WUFDNUQsT0FBTyxJQUFJLENBQUM7U0FDZjtRQUVELE9BQU8sSUFBSSxPQUFPLENBQUMsQ0FBQyxPQUFPLEVBQUUsTUFBTSxFQUFFLEVBQUU7WUFDbkMsQ0FBQyxDQUFDLEtBQUssQ0FBQztpQkFDSCxLQUFLLENBQUM7Z0JBQ0gsU0FBUyxFQUFFO29CQUNQLE9BQU8sRUFBRSxDQUFDO2dCQUNkLENBQUM7Z0JBQ0QsTUFBTSxFQUFFO29CQUNKLE1BQU0sRUFBRSxDQUFDO2dCQUNiLENBQUM7YUFDSixDQUFDO2lCQUNELEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQztRQUN2QixDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7Q0FDSjtBQUVELGVBQWUsS0FBSyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIE1vZGFsIHtcclxuICAgIHB1YmxpYyBzdGF0aWMgYXNrRm9yUmVhc29uKCk6IFByb21pc2U8c3RyaW5nPiB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoXCJtb2RhbFJlYXNvblwiKTtcclxuICAgICAgICBpZiAobW9kYWwgPT09IG51bGwpIHtcclxuICAgICAgICAgICAgYWxlcnQoXCJEZXYgZXJyb3I6IE5vIGVsZW1lbnQgd2l0aCBJRCBvZiAnbW9kYWxSZWFzb24nXCIpO1xyXG4gICAgICAgICAgICByZXR1cm4gbnVsbDtcclxuICAgICAgICB9XHJcblxyXG4gICAgICAgIGNvbnN0IGlucHV0UmVhc29uID0gbW9kYWwucXVlcnlTZWxlY3RvcihcImlucHV0LnJlYXNvblwiKSBhcyBIVE1MSW5wdXRFbGVtZW50O1xyXG4gICAgICAgIGlmIChpbnB1dFJlYXNvbiA9PT0gbnVsbCkge1xyXG4gICAgICAgICAgICBhbGVydChcIkRldiBlcnJvcjogTW9kYWwgZG9lcyBub3QgY29udGFpbiBhbiA8aW5wdXQ+IHdpdGggY2xhc3Mgb2YgJ3JlYXNvbidcIik7XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH1cclxuXHJcbiAgICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKChyZXNvbHZlLCByZWplY3QpID0+IHtcclxuICAgICAgICAgICAgJChtb2RhbClcclxuICAgICAgICAgICAgICAgIC5tb2RhbCh7XHJcbiAgICAgICAgICAgICAgICAgICAgb25BcHByb3ZlOiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlc29sdmUoaW5wdXRSZWFzb24udmFsdWUpO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpbnB1dFJlYXNvbi52YWx1ZSA9IFwiXCI7XHJcbiAgICAgICAgICAgICAgICAgICAgfSxcclxuXHJcbiAgICAgICAgICAgICAgICAgICAgb25EZW55OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdChcIlVzZXIgY2FuY2VsZWQgYWN0aW9uLlwiKTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgaW5wdXRSZWFzb24udmFsdWUgPSBcIlwiO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgYXNrQXJlWW91U3VyZShtb2RhbElkOiBzdHJpbmcgPSBcIm1vZGFsQXJlWW91U3VyZVwiKTogUHJvbWlzZTx2b2lkPiB8IG51bGwge1xyXG4gICAgICAgIGNvbnN0IG1vZGFsID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQobW9kYWxJZCk7XHJcbiAgICAgICAgaWYgKG1vZGFsID09PSBudWxsKSB7XHJcbiAgICAgICAgICAgIGFsZXJ0KFwiRGV2IGVycm9yOiBObyBlbGVtZW50IHdpdGggSUQgb2YgJ1wiICsgbW9kYWxJZCArIFwiJ1wiKTtcclxuICAgICAgICAgICAgcmV0dXJuIG51bGw7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUsIHJlamVjdCkgPT4ge1xyXG4gICAgICAgICAgICAkKG1vZGFsKVxyXG4gICAgICAgICAgICAgICAgLm1vZGFsKHtcclxuICAgICAgICAgICAgICAgICAgICBvbkFwcHJvdmU6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZSgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH0sXHJcbiAgICAgICAgICAgICAgICAgICAgb25EZW55OiBmdW5jdGlvbiAoKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHJlamVjdCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgIH0pXHJcbiAgICAgICAgICAgICAgICAubW9kYWwoXCJzaG93XCIpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgZGVmYXVsdCBNb2RhbDsiXX0=