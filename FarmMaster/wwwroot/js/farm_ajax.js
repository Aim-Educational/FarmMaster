import { getCookie } from "./cookies.js";
export var FarmAjaxMessageType;
(function (FarmAjaxMessageType) {
    FarmAjaxMessageType[FarmAjaxMessageType["None"] = 0] = "None";
    FarmAjaxMessageType[FarmAjaxMessageType["Information"] = 1] = "Information";
    FarmAjaxMessageType[FarmAjaxMessageType["Warning"] = 2] = "Warning";
    FarmAjaxMessageType[FarmAjaxMessageType["Error"] = 3] = "Error";
})(FarmAjaxMessageType || (FarmAjaxMessageType = {}));
export var FarmAjaxMessageFormat;
(function (FarmAjaxMessageFormat) {
    FarmAjaxMessageFormat[FarmAjaxMessageFormat["Default"] = 0] = "Default";
    FarmAjaxMessageFormat[FarmAjaxMessageFormat["UnorderedList"] = 1] = "UnorderedList";
})(FarmAjaxMessageFormat || (FarmAjaxMessageFormat = {}));
export class FarmAjaxMessageResponse {
    constructor(type, message, format) {
        this.messageType = type;
        this.message = message;
        this.messageFormat = format;
    }
    populateMessageBox(box) {
        box.classList.remove("info", "error", "warning");
        switch (this.messageType) {
            case FarmAjaxMessageType.Error:
                box.classList.add("error");
                break;
            case FarmAjaxMessageType.Information:
                box.classList.add("info");
                break;
            case FarmAjaxMessageType.Warning:
                box.classList.add("warning");
                break;
            default: break;
        }
        box.classList.add("visible");
        switch (this.messageFormat) {
            case FarmAjaxMessageFormat.Default:
                box.innerHTML = this.message;
                break;
            case FarmAjaxMessageFormat.UnorderedList:
                box.innerHTML = "";
                let ul = document.createElement("ul");
                box.appendChild(ul);
                for (let item of this.message.split("\n")) {
                    let li = document.createElement("li");
                    li.innerText = item;
                    ul.appendChild(li);
                }
                break;
            default: break;
        }
    }
}
export class FarmAjaxMessageAndValueResponse extends FarmAjaxMessageResponse {
    constructor(message, value) {
        super(message.messageType, message.message, message.messageFormat);
        this.value = value;
    }
}
export class FarmAjaxGenericValue {
    constructor(value) {
        this.value = value;
    }
}
export class FarmAjax {
    static postWithMessageResponse(url, data, onDone) {
        FarmAjax
            .doAjax(url, data)
            .done(function (response) {
            onDone(new FarmAjaxMessageResponse(response.messageType, response.message, response.messageFormat));
        })
            .fail((error) => onDone(new FarmAjaxMessageResponse(FarmAjaxMessageType.Error, JSON.stringify(error), FarmAjaxMessageFormat.UnorderedList)));
    }
    static postWithMessageAndValueResponse(url, data, onDone) {
        FarmAjax
            .doAjax(url, data)
            .done(function (response) {
            let message = new FarmAjaxMessageResponse(response.messageType, response.message, response.messageFormat);
            onDone(new FarmAjaxMessageAndValueResponse(message, response.value));
        })
            .fail((error) => {
            let message = new FarmAjaxMessageResponse(FarmAjaxMessageType.Error, JSON.stringify(error), FarmAjaxMessageFormat.UnorderedList);
            onDone(new FarmAjaxMessageAndValueResponse(message, null));
        });
    }
    static doAjax(url, data) {
        if (data === null)
            data = {};
        if (data.SessionToken !== undefined)
            throw "Please don't define your own 'SessionToken' field, FarmAjax will handle that for you.";
        data.SessionToken = getCookie("FarmMasterAuth");
        return $.ajax({
            type: "POST",
            url: url,
            contentType: "application/json",
            dataType: "json",
            data: JSON.stringify(data)
        });
    }
}
//# sourceMappingURL=data:application/json;base64,