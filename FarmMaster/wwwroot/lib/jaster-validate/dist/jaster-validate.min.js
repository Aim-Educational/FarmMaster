export class IValidationHandlerCommon{}export class IValidationUIHandler extends IValidationHandlerCommon{}export class IValidationLogicHandler extends IValidationHandlerCommon{}export class ValidationLogicHandlerNoSubmit extends IValidationHandlerCommon{onElementFailedValidation(e,t){}onElementPassedValidation(e){}onFormPassedValidation(e){}onFormFailedValidation(e,t,a){a&&a.preventDefault()}}export class IValidationFormElementSelector{}export class ValidationFormElementSelectorDefault extends IValidationFormElementSelector{onFindElementsToValidate(e){const t=[];return e.querySelectorAll("input").forEach(e=>t.push(e)),e.querySelectorAll("select").forEach(e=>t.push(e)),e.querySelectorAll("textarea").forEach(e=>t.push(e)),t}}export class ValidationRule{throwParamCountMismatch(e,t){throw new Error("Param count mistmatch. Expected "+e+" parameters, but got "+t+" instead.")}getValueFromElement(e){const t=e;if(void 0===t.value)throw new Error("Element doesn't contain a '.value' field. This rule cannot be used.");let a=t.value;if(e instanceof HTMLInputElement&&"number"===e.type&&NaN===(a=Number(a)))throw new Error("Element is an <input> of type 'number', yet it's value cannot be converted to a number. Element: "+e);return a}}export class ValidationRuleIsNotEmpty extends ValidationRule{onValidateElement(e,t){t.length>0&&super.throwParamCountMismatch(0,t.length);const a=e;if(void 0===a.value)return new ValidationResult(!1,["Element doesn't contain a '.value' field. This rule cannot be used."]);const l=a.value;return null===l?new ValidationResult(!1,["Value cannot be null."]):"string"==typeof l?new ValidationResult(l.trim().length>0,["Value cannot be empty or full of whitespace."]):new ValidationResult(!1,["Value type '"+typeof l+"' is not supported by this rule."])}}export class ValidationRuleRegex extends ValidationRule{onValidateElement(e,t){1!==t.length&&super.throwParamCountMismatch(1,t.length);const a=super.getValueFromElement(e);if("string"==typeof a){const e=new RegExp(t[0]).test(a);return new ValidationResult(e,["Value does not match pattern: "+t[0]])}return new ValidationResult(!1,["Value type '"+typeof a+"' is not supported by this rule."])}}export class ValidationRuleMinMax extends ValidationRule{constructor(e){super(),this._isMin=e}onValidateElement(e,t){1!==t.length&&super.throwParamCountMismatch(1,t.length);const a=Number(t[0]);if(NaN===a)throw new Error("Parameter '"+t[0]+"' is not a valid number.");const l=super.getValueFromElement(e);return"string"==typeof l?this._isMin?new ValidationResult(l.length>=a,["Value must be at least "+a+" characters wide."]):new ValidationResult(l.length<=a,["Value cannot be more than "+a+" characters wide."]):"number"==typeof l?this._isMin?new ValidationResult(l>=a,["Value must be greater than or equal to "+a]):new ValidationResult(l<=a,["Value must be less than or equal to "+a]):new ValidationResult(!1,["Value type '"+typeof l+"' is not supported by this rule."])}}export class ValidationResult{constructor(e,t){this.passed=e,this.reasons=t}}export class ValidationPolicy{constructor(e,t,a){this.uiHandler=e,this.logicHandler=t,this.selector=a}}export class Validation{static addHandlerImpl(e,t,a){if(a.has(e))throw new Error("There is already a handler called '"+e+"'");if(null==t)throw new Error("Parameter 'handler' is either null or undefined.");a.set(e,t)}static validateElementImpl(e,t,a){const l=[],n=parseRuleset(t);for(let a of n){if(!this._rules.has(a.ruleName))throw new Error("There is no rule named '"+a.ruleName+"' when parsing ruleset: "+t+"\nFor element: "+e);const n=this._rules.get(a.ruleName).onValidateElement(e,a.params);if(!n.passed)for(let e of n.reasons)l.push(e)}return l}static getPolicyByName(e){if(0===this._policies.size)throw new Error("No policies have been created.");let t=null;if(null!==e){if(!this._policies.has(e))throw new Error("There is no policy named '"+e+"'");t=this._policies.get(e)}else t=this._policies.get(this._defaultPolicy);if(null===t)throw new Error("Internal error - policyToUse should not be null in this situation.");return t}static addUIHandler(e,t){this.addHandlerImpl(e,t,this._uiHandlers)}static addLogicHandler(e,t){this.addHandlerImpl(e,t,this._logicHandlers)}static addSelector(e,t){this.addHandlerImpl(e,t,this._selectors)}static addRule(e,t){if(this._rules.has(e))throw new Error("There is already a rule called '"+e+"'");if(null==t)throw new Error("Parameter 'rule' is either null or undefined.");this._rules.set(e,t)}static definePolicy(e,t,a,l="default"){if(this._policies.has(e))throw new Error("There is already a policy called '"+e+"'");if(!this._uiHandlers.has(t))throw new Error("There is no UI handler called '"+t+"'");if(!this._logicHandlers.has(a))throw new Error("There is no Logic handler called '"+a+"'");if(!this._selectors.has(l))throw new Error("There is no Selector called '"+l+"'");null===this._defaultPolicy&&(this._defaultPolicy=e);const n=this._uiHandlers.get(t),i=this._logicHandlers.get(a),o=this._selectors.get(l);this._policies.set(e,new ValidationPolicy(n,i,o))}static validateElement(e,t,a=null){const l=this.getPolicyByName(a),n=this.validateElementImpl(e,t,l);return 0==n.length?(l.uiHandler.onElementPassedValidation(e),l.logicHandler.onElementPassedValidation(e)):(l.uiHandler.onElementFailedValidation(e,n),l.logicHandler.onElementFailedValidation(e,n)),n}static validateForm(e,t=null,a=null){const l=this.getPolicyByName(a),n=l.selector.onFindElementsToValidate(e),i=new Map;for(let e of n){const t=e.dataset.ruleset;if(!t)continue;const l=this.validateElement(e,t,a);l.length>0&&i.set(e,l)}return 0===i.size?(l.logicHandler.onFormPassedValidation(e),l.uiHandler.onFormPassedValidation(e)):(l.logicHandler.onFormFailedValidation(e,i,t),l.uiHandler.onFormFailedValidation(e,i,t)),i}static hookupForm(e,t=null){e.addEventListener("submit",a=>Validation.validateForm(e,a,t));for(let a of this.getPolicyByName(t).selector.onFindElementsToValidate(e))this.hookupElement(a,t)}static hookupElement(e,t=null){const a=this.getPolicyByName(t);e.addEventListener("change",t=>a.uiHandler.onElementValueChange(e))}}Validation._policies=new Map,Validation._uiHandlers=new Map,Validation._logicHandlers=new Map,Validation._rules=new Map,Validation._selectors=new Map,Validation._defaultPolicy=null,Validation.addRule("not-empty",new ValidationRuleIsNotEmpty),Validation.addRule("regex",new ValidationRuleRegex),Validation.addRule("min",new ValidationRuleMinMax(!0)),Validation.addRule("max",new ValidationRuleMinMax(!1)),Validation.addLogicHandler("no-submit-form",new ValidationLogicHandlerNoSubmit),Validation.addSelector("default",new ValidationFormElementSelectorDefault);class RuleParserResult{constructor(e,t){this.ruleName=e,this.params=t}}export function parseRuleset(e){const t=[];let a;!function(e){e[e.NAME=0]="NAME",e[e.VALUE=1]="VALUE"}(a||(a={}));let l=a.NAME,n=0;for(;;){for(;n<e.length&&/\s/.test(e[n]);)n++;if(n>=e.length)break;let i=n;switch(l){case a.NAME:for(;!(n>=e.length||":"==e[n]||";"==e[n]);){if(/\s/.test(e[n]))throw new Error("Unexpected whitespace at index "+n+" while reading rule name. Ruleset = "+e);n++}t.push(new RuleParserResult(e.substring(i,n),[])),l=":"==e[n++]?a.VALUE:a.NAME;break;case a.VALUE:let o="";for(;!(n>=e.length);)if(n>0&&"\\"==e[n-1]&&("&"==e[n]||";"==e[n]))o+=e.substring(i,n-1),i=n++;else{if("&"==e[n]||";"==e[n])break;n++}n-i>0&&(o+=e.substring(i,n)),t[t.length-1].params.push(o.trim()),l="&"==e[n++]?a.VALUE:a.NAME;break;default:throw"internal error"}}return t}