### YamlMime:ManagedReference
items:
- uid: Business.Model.DynamicFieldFactory
  commentId: T:Business.Model.DynamicFieldFactory
  id: DynamicFieldFactory
  parent: Business.Model
  children:
  - Business.Model.DynamicFieldFactory.FromJson(Newtonsoft.Json.Linq.JObject)
  - Business.Model.DynamicFieldFactory.FromTypeAndHtmlString(Business.Model.DynamicField.Type,System.String)
  langs:
  - csharp
  - vb
  name: DynamicFieldFactory
  nameWithType: DynamicFieldFactory
  fullName: Business.Model.DynamicFieldFactory
  type: Class
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: DynamicFieldFactory
    path: ../Business/Model/DynamicField.cs
    startLine: 64
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public class DynamicFieldFactory
    content.vb: Public Class DynamicFieldFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Business.Model.DynamicFieldFactory.FromJson(Newtonsoft.Json.Linq.JObject)
  commentId: M:Business.Model.DynamicFieldFactory.FromJson(Newtonsoft.Json.Linq.JObject)
  id: FromJson(Newtonsoft.Json.Linq.JObject)
  parent: Business.Model.DynamicFieldFactory
  langs:
  - csharp
  - vb
  name: FromJson(JObject)
  nameWithType: DynamicFieldFactory.FromJson(JObject)
  fullName: Business.Model.DynamicFieldFactory.FromJson(Newtonsoft.Json.Linq.JObject)
  type: Method
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FromJson
    path: ../Business/Model/DynamicField.cs
    startLine: 66
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public DynamicField FromJson(JObject json)
    parameters:
    - id: json
      type: Newtonsoft.Json.Linq.JObject
    return:
      type: Business.Model.DynamicField
    content.vb: Public Function FromJson(json As JObject) As DynamicField
  overload: Business.Model.DynamicFieldFactory.FromJson*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Business.Model.DynamicFieldFactory.FromTypeAndHtmlString(Business.Model.DynamicField.Type,System.String)
  commentId: M:Business.Model.DynamicFieldFactory.FromTypeAndHtmlString(Business.Model.DynamicField.Type,System.String)
  id: FromTypeAndHtmlString(Business.Model.DynamicField.Type,System.String)
  parent: Business.Model.DynamicFieldFactory
  langs:
  - csharp
  - vb
  name: FromTypeAndHtmlString(DynamicField.Type, String)
  nameWithType: DynamicFieldFactory.FromTypeAndHtmlString(DynamicField.Type, String)
  fullName: Business.Model.DynamicFieldFactory.FromTypeAndHtmlString(Business.Model.DynamicField.Type, System.String)
  type: Method
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FromTypeAndHtmlString
    path: ../Business/Model/DynamicField.cs
    startLine: 76
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public DynamicField FromTypeAndHtmlString(DynamicField.Type type, string htmlString)
    parameters:
    - id: type
      type: Business.Model.DynamicField.Type
    - id: htmlString
      type: System.String
    return:
      type: Business.Model.DynamicField
    content.vb: Public Function FromTypeAndHtmlString(type As DynamicField.Type, htmlString As String) As DynamicField
  overload: Business.Model.DynamicFieldFactory.FromTypeAndHtmlString*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model.DynamicFieldFactory.FromJson*
  commentId: Overload:Business.Model.DynamicFieldFactory.FromJson
  name: FromJson
  nameWithType: DynamicFieldFactory.FromJson
  fullName: Business.Model.DynamicFieldFactory.FromJson
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Business.Model.DynamicField
  commentId: T:Business.Model.DynamicField
  parent: Business.Model
  name: DynamicField
  nameWithType: DynamicField
  fullName: Business.Model.DynamicField
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Business.Model.DynamicFieldFactory.FromTypeAndHtmlString*
  commentId: Overload:Business.Model.DynamicFieldFactory.FromTypeAndHtmlString
  name: FromTypeAndHtmlString
  nameWithType: DynamicFieldFactory.FromTypeAndHtmlString
  fullName: Business.Model.DynamicFieldFactory.FromTypeAndHtmlString
- uid: Business.Model.DynamicField.Type
  commentId: T:Business.Model.DynamicField.Type
  parent: Business.Model
  name: DynamicField.Type
  nameWithType: DynamicField.Type
  fullName: Business.Model.DynamicField.Type
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
