### YamlMime:ManagedReference
items:
- uid: Business.Model.Role
  commentId: T:Business.Model.Role
  id: Role
  parent: Business.Model
  children:
  - Business.Model.Role.Description
  - Business.Model.Role.HierarchyOrder
  - Business.Model.Role.IsGodRole
  - Business.Model.Role.Name
  - Business.Model.Role.ParentRole
  - Business.Model.Role.ParentRoleId
  - Business.Model.Role.Permissions
  - Business.Model.Role.RoleId
  - Business.Model.Role.Timestamp
  - Business.Model.Role.Users
  langs:
  - csharp
  - vb
  name: Role
  nameWithType: Role
  fullName: Business.Model.Role
  type: Class
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Role
    path: ../Business/Model/Role.cs
    startLine: 9
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public class Role
    content.vb: Public Class Role
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  extensionMethods:
  - Business.Model.Role.Business.Model.RoleExtentions.CanModify(Business.Model.Role)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Business.Model.Role.RoleId
  commentId: P:Business.Model.Role.RoleId
  id: RoleId
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: RoleId
  nameWithType: Role.RoleId
  fullName: Business.Model.Role.RoleId
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: RoleId
    path: ../Business/Model/Role.cs
    startLine: 11
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Key]

      public int RoleId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Key>

      Public Property RoleId As Integer
  overload: Business.Model.Role.RoleId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.KeyAttribute
    ctor: System.ComponentModel.DataAnnotations.KeyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.HierarchyOrder
  commentId: P:Business.Model.Role.HierarchyOrder
  id: HierarchyOrder
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: HierarchyOrder
  nameWithType: Role.HierarchyOrder
  fullName: Business.Model.Role.HierarchyOrder
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: HierarchyOrder
    path: ../Business/Model/Role.cs
    startLine: 14
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [Range(0, 2147483647)]

      public int HierarchyOrder { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      <Range(0, 2147483647)>

      Public Property HierarchyOrder As Integer
  overload: Business.Model.Role.HierarchyOrder*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.RangeAttribute
    ctor: System.ComponentModel.DataAnnotations.RangeAttribute.#ctor(System.Int32,System.Int32)
    arguments:
    - type: System.Int32
      value: 0
    - type: System.Int32
      value: 2147483647
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.Name
  commentId: P:Business.Model.Role.Name
  id: Name
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Role.Name
  fullName: Business.Model.Role.Name
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Name
    path: ../Business/Model/Role.cs
    startLine: 18
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [StringLength(50)]

      public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <StringLength(50)>

      Public Property Name As String
  overload: Business.Model.Role.Name*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 50
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.Description
  commentId: P:Business.Model.Role.Description
  id: Description
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: Role.Description
  fullName: Business.Model.Role.Description
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Description
    path: ../Business/Model/Role.cs
    startLine: 22
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [StringLength(150)]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <StringLength(150)>

      Public Property Description As String
  overload: Business.Model.Role.Description*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 150
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.ParentRoleId
  commentId: P:Business.Model.Role.ParentRoleId
  id: ParentRoleId
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: ParentRoleId
  nameWithType: Role.ParentRoleId
  fullName: Business.Model.Role.ParentRoleId
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ParentRoleId
    path: ../Business/Model/Role.cs
    startLine: 26
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public int? ParentRoleId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property ParentRoleId As Integer?
  overload: Business.Model.Role.ParentRoleId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.ParentRole
  commentId: P:Business.Model.Role.ParentRole
  id: ParentRole
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: ParentRole
  nameWithType: Role.ParentRole
  fullName: Business.Model.Role.ParentRole
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ParentRole
    path: ../Business/Model/Role.cs
    startLine: 27
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Role ParentRole { get; set; }
    parameters: []
    return:
      type: Business.Model.Role
    content.vb: Public Property ParentRole As Role
  overload: Business.Model.Role.ParentRole*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.Permissions
  commentId: P:Business.Model.Role.Permissions
  id: Permissions
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: Permissions
  nameWithType: Role.Permissions
  fullName: Business.Model.Role.Permissions
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Permissions
    path: ../Business/Model/Role.cs
    startLine: 29
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<MapRolePermissionToRole> Permissions { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.MapRolePermissionToRole}
    content.vb: Public Property Permissions As IEnumerable(Of MapRolePermissionToRole)
  overload: Business.Model.Role.Permissions*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.Users
  commentId: P:Business.Model.Role.Users
  id: Users
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: Users
  nameWithType: Role.Users
  fullName: Business.Model.Role.Users
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Users
    path: ../Business/Model/Role.cs
    startLine: 30
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<User> Users { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.User}
    content.vb: Public Property Users As IEnumerable(Of User)
  overload: Business.Model.Role.Users*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.Timestamp
  commentId: P:Business.Model.Role.Timestamp
  id: Timestamp
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: Role.Timestamp
  fullName: Business.Model.Role.Timestamp
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Timestamp
    path: ../Business/Model/Role.cs
    startLine: 32
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Timestamp]

      public byte[] Timestamp { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: >-
      <Timestamp>

      Public Property Timestamp As Byte()
  overload: Business.Model.Role.Timestamp*
  attributes:
  - type: System.ComponentModel.DataAnnotations.TimestampAttribute
    ctor: System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Role.IsGodRole
  commentId: P:Business.Model.Role.IsGodRole
  id: IsGodRole
  parent: Business.Model.Role
  langs:
  - csharp
  - vb
  name: IsGodRole
  nameWithType: Role.IsGodRole
  fullName: Business.Model.Role.IsGodRole
  type: Property
  source:
    remote:
      path: Business/Model/Role.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsGodRole
    path: ../Business/Model/Role.cs
    startLine: 35
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public bool IsGodRole { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property IsGodRole As Boolean
  overload: Business.Model.Role.IsGodRole*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Role.Business.Model.RoleExtentions.CanModify(Business.Model.Role)
  commentId: M:Business.Model.RoleExtentions.CanModify(Business.Model.Role,Business.Model.Role)
  parent: Business.Model.RoleExtentions
  definition: Business.Model.RoleExtentions.CanModify(Business.Model.Role,Business.Model.Role)
  name: CanModify(Role)
  nameWithType: RoleExtentions.CanModify(Role)
  fullName: Business.Model.RoleExtentions.CanModify(Business.Model.Role)
  spec.csharp:
  - uid: Business.Model.RoleExtentions.CanModify(Business.Model.Role)
    name: CanModify
    nameWithType: RoleExtentions.CanModify
    fullName: Business.Model.RoleExtentions.CanModify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Business.Model.RoleExtentions.CanModify(Business.Model.Role)
    name: CanModify
    nameWithType: RoleExtentions.CanModify
    fullName: Business.Model.RoleExtentions.CanModify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model.RoleExtentions.CanModify(Business.Model.Role,Business.Model.Role)
  commentId: M:Business.Model.RoleExtentions.CanModify(Business.Model.Role,Business.Model.Role)
  name: CanModify(Role, Role)
  nameWithType: RoleExtentions.CanModify(Role, Role)
  fullName: Business.Model.RoleExtentions.CanModify(Business.Model.Role, Business.Model.Role)
  spec.csharp:
  - uid: Business.Model.RoleExtentions.CanModify(Business.Model.Role,Business.Model.Role)
    name: CanModify
    nameWithType: RoleExtentions.CanModify
    fullName: Business.Model.RoleExtentions.CanModify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Business.Model.RoleExtentions.CanModify(Business.Model.Role,Business.Model.Role)
    name: CanModify
    nameWithType: RoleExtentions.CanModify
    fullName: Business.Model.RoleExtentions.CanModify
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.RoleExtentions
  commentId: T:Business.Model.RoleExtentions
  parent: Business.Model
  name: RoleExtentions
  nameWithType: RoleExtentions
  fullName: Business.Model.RoleExtentions
- uid: Business.Model.Role.RoleId*
  commentId: Overload:Business.Model.Role.RoleId
  name: RoleId
  nameWithType: Role.RoleId
  fullName: Business.Model.Role.RoleId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Business.Model.Role.HierarchyOrder*
  commentId: Overload:Business.Model.Role.HierarchyOrder
  name: HierarchyOrder
  nameWithType: Role.HierarchyOrder
  fullName: Business.Model.Role.HierarchyOrder
- uid: Business.Model.Role.Name*
  commentId: Overload:Business.Model.Role.Name
  name: Name
  nameWithType: Role.Name
  fullName: Business.Model.Role.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Business.Model.Role.Description*
  commentId: Overload:Business.Model.Role.Description
  name: Description
  nameWithType: Role.Description
  fullName: Business.Model.Role.Description
- uid: Business.Model.Role.ParentRoleId*
  commentId: Overload:Business.Model.Role.ParentRoleId
  name: ParentRoleId
  nameWithType: Role.ParentRoleId
  fullName: Business.Model.Role.ParentRoleId
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Role.ParentRole*
  commentId: Overload:Business.Model.Role.ParentRole
  name: ParentRole
  nameWithType: Role.ParentRole
  fullName: Business.Model.Role.ParentRole
- uid: Business.Model.Role
  commentId: T:Business.Model.Role
  parent: Business.Model
  name: Role
  nameWithType: Role
  fullName: Business.Model.Role
- uid: Business.Model.Role.Permissions*
  commentId: Overload:Business.Model.Role.Permissions
  name: Permissions
  nameWithType: Role.Permissions
  fullName: Business.Model.Role.Permissions
- uid: System.Collections.Generic.IEnumerable{Business.Model.MapRolePermissionToRole}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.MapRolePermissionToRole}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MapRolePermissionToRole>
  nameWithType: IEnumerable<MapRolePermissionToRole>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.MapRolePermissionToRole>
  nameWithType.vb: IEnumerable(Of MapRolePermissionToRole)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.MapRolePermissionToRole)
  name.vb: IEnumerable(Of MapRolePermissionToRole)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.MapRolePermissionToRole
    name: MapRolePermissionToRole
    nameWithType: MapRolePermissionToRole
    fullName: Business.Model.MapRolePermissionToRole
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.MapRolePermissionToRole
    name: MapRolePermissionToRole
    nameWithType: MapRolePermissionToRole
    fullName: Business.Model.MapRolePermissionToRole
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Business.Model.Role.Users*
  commentId: Overload:Business.Model.Role.Users
  name: Users
  nameWithType: Role.Users
  fullName: Business.Model.Role.Users
- uid: System.Collections.Generic.IEnumerable{Business.Model.User}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.User}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<User>
  nameWithType: IEnumerable<User>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.User>
  nameWithType.vb: IEnumerable(Of User)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.User)
  name.vb: IEnumerable(Of User)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.User
    name: User
    nameWithType: User
    fullName: Business.Model.User
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.User
    name: User
    nameWithType: User
    fullName: Business.Model.User
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Role.Timestamp*
  commentId: Overload:Business.Model.Role.Timestamp
  name: Timestamp
  nameWithType: Role.Timestamp
  fullName: Business.Model.Role.Timestamp
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Business.Model.Role.IsGodRole*
  commentId: Overload:Business.Model.Role.IsGodRole
  name: IsGodRole
  nameWithType: Role.IsGodRole
  fullName: Business.Model.Role.IsGodRole
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
