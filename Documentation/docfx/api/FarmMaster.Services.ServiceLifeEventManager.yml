### YamlMime:ManagedReference
items:
- uid: FarmMaster.Services.ServiceLifeEventManager
  commentId: T:FarmMaster.Services.ServiceLifeEventManager
  id: ServiceLifeEventManager
  parent: FarmMaster.Services
  children:
  - FarmMaster.Services.ServiceLifeEventManager.#ctor(Business.Model.FarmMasterContext)
  - FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  - FarmMaster.Services.ServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
  - FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
  - FarmMaster.Services.ServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
  - FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#Query
  - FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#QueryAllIncluded
  - FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#Query
  - FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#QueryAllIncluded
  - FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#Query
  - FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#QueryAllIncluded
  - FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
  - FarmMaster.Services.ServiceLifeEventManager.FullDelete(Business.Model.LifeEvent)
  - FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  - FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEvent)
  - FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  - FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  - FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventEntry)
  - FarmMaster.Services.ServiceLifeEventManager.Query
  - FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded
  - FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
  - FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEvent)
  - FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldInfo)
  - FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldValue)
  - FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventEntry)
  - FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
  langs:
  - csharp
  - vb
  name: ServiceLifeEventManager
  nameWithType: ServiceLifeEventManager
  fullName: FarmMaster.Services.ServiceLifeEventManager
  type: Class
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ServiceLifeEventManager
    path: Services/IServiceLifeEventManager.cs
    startLine: 32
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: 'public class ServiceLifeEventManager : IServiceLifeEventManager, IServiceEntityManager<LifeEvent>, IServiceEntityManager<LifeEventDynamicFieldInfo>, IServiceEntityManager<LifeEventDynamicFieldValue>, IServiceEntityManager<LifeEventEntry>, IServiceEntityManagerFullDeletion<LifeEvent>'
    content.vb: >-
      Public Class ServiceLifeEventManager

          Implements IServiceLifeEventManager, IServiceEntityManager(Of LifeEvent), IServiceEntityManager(Of LifeEventDynamicFieldInfo), IServiceEntityManager(Of LifeEventDynamicFieldValue), IServiceEntityManager(Of LifeEventEntry), IServiceEntityManagerFullDeletion(Of LifeEvent)
  inheritance:
  - System.Object
  implements:
  - FarmMaster.Services.IServiceLifeEventManager
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}
  - FarmMaster.Services.IServiceEntityManagerFullDeletion{Business.Model.LifeEvent}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: FarmMaster.Services.ServiceLifeEventManager.#ctor(Business.Model.FarmMasterContext)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.#ctor(Business.Model.FarmMasterContext)
  id: '#ctor(Business.Model.FarmMasterContext)'
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: ServiceLifeEventManager(FarmMasterContext)
  nameWithType: ServiceLifeEventManager.ServiceLifeEventManager(FarmMasterContext)
  fullName: FarmMaster.Services.ServiceLifeEventManager.ServiceLifeEventManager(Business.Model.FarmMasterContext)
  type: Constructor
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: .ctor
    path: Services/IServiceLifeEventManager.cs
    startLine: 36
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public ServiceLifeEventManager(FarmMasterContext context)
    parameters:
    - id: context
      type: Business.Model.FarmMasterContext
    content.vb: Public Sub New(context As FarmMasterContext)
  overload: FarmMaster.Services.ServiceLifeEventManager.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
  id: CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: CreateEvent(String, String, LifeEvent.TargetType)
  nameWithType: ServiceLifeEventManager.CreateEvent(String, String, LifeEvent.TargetType)
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateEvent(System.String, System.String, Business.Model.LifeEvent.TargetType)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: CreateEvent
    path: Services/IServiceLifeEventManager.cs
    startLine: 41
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public LifeEvent CreateEvent(string name, string description, LifeEvent.TargetType target)
    parameters:
    - id: name
      type: System.String
    - id: description
      type: System.String
    - id: target
      type: Business.Model.LifeEvent.TargetType
    return:
      type: Business.Model.LifeEvent
    content.vb: Public Function CreateEvent(name As String, description As String, target As LifeEvent.TargetType) As LifeEvent
  overload: FarmMaster.Services.ServiceLifeEventManager.CreateEvent*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
  id: CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: CreateEventField(LifeEvent, String, String, DynamicField.Type)
  nameWithType: ServiceLifeEventManager.CreateEventField(LifeEvent, String, String, DynamicField.Type)
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent, System.String, System.String, Business.Model.DynamicField.Type)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: CreateEventField
    path: Services/IServiceLifeEventManager.cs
    startLine: 58
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public LifeEventDynamicFieldInfo CreateEventField(LifeEvent event, string name, string description, DynamicField.Type type)
    parameters:
    - id: event
      type: Business.Model.LifeEvent
    - id: name
      type: System.String
    - id: description
      type: System.String
    - id: type
      type: Business.Model.DynamicField.Type
    return:
      type: Business.Model.LifeEventDynamicFieldInfo
    content.vb: Public Function CreateEventField(event As LifeEvent, name As String, description As String, type As DynamicField.Type) As LifeEventDynamicFieldInfo
  overload: FarmMaster.Services.ServiceLifeEventManager.CreateEventField*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
  id: CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: CreateEventEntry(LifeEvent, IDictionary<String, DynamicField>)
  nameWithType: ServiceLifeEventManager.CreateEventEntry(LifeEvent, IDictionary<String, DynamicField>)
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent, System.Collections.Generic.IDictionary<System.String, Business.Model.DynamicField>)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: CreateEventEntry
    path: Services/IServiceLifeEventManager.cs
    startLine: 73
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public LifeEventEntry CreateEventEntry(LifeEvent event, IDictionary<string, DynamicField> values)
    parameters:
    - id: event
      type: Business.Model.LifeEvent
    - id: values
      type: System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField}
    return:
      type: Business.Model.LifeEventEntry
    content.vb: Public Function CreateEventEntry(event As LifeEvent, values As IDictionary(Of String, DynamicField)) As LifeEventEntry
  overload: FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
  nameWithType.vb: ServiceLifeEventManager.CreateEventEntry(LifeEvent, IDictionary(Of String, DynamicField))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent, System.Collections.Generic.IDictionary(Of System.String, Business.Model.DynamicField))
  name.vb: CreateEventEntry(LifeEvent, IDictionary(Of String, DynamicField))
- uid: FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
  id: RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: RemoveEventFieldByName(LifeEvent, String)
  nameWithType: ServiceLifeEventManager.RemoveEventFieldByName(LifeEvent, String)
  fullName: FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent, System.String)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: RemoveEventFieldByName
    path: Services/IServiceLifeEventManager.cs
    startLine: 134
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public CouldDelete RemoveEventFieldByName(LifeEvent event, string fieldName)
    parameters:
    - id: event
      type: Business.Model.LifeEvent
    - id: fieldName
      type: System.String
    return:
      type: FarmMaster.Misc.CouldDelete
    content.vb: Public Function RemoveEventFieldByName(event As LifeEvent, fieldName As String) As CouldDelete
  overload: FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
  id: UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: UpdateEventEntryFieldValueByName(LifeEventEntry, String, DynamicField)
  nameWithType: ServiceLifeEventManager.UpdateEventEntryFieldValueByName(LifeEventEntry, String, DynamicField)
  fullName: FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry, System.String, Business.Model.DynamicField)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: UpdateEventEntryFieldValueByName
    path: Services/IServiceLifeEventManager.cs
    startLine: 152
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public void UpdateEventEntryFieldValueByName(LifeEventEntry entry, string fieldName, DynamicField value)
    parameters:
    - id: entry
      type: Business.Model.LifeEventEntry
    - id: fieldName
      type: System.String
    - id: value
      type: Business.Model.DynamicField
    content.vb: Public Sub UpdateEventEntryFieldValueByName(entry As LifeEventEntry, fieldName As String, value As DynamicField)
  overload: FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  id: CreateBornEventEntry(System.DateTimeOffset)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: CreateBornEventEntry(DateTimeOffset)
  nameWithType: ServiceLifeEventManager.CreateBornEventEntry(DateTimeOffset)
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: CreateBornEventEntry
    path: Services/IServiceLifeEventManager.cs
    startLine: 174
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public LifeEventEntry CreateBornEventEntry(DateTimeOffset dateTimeBorn)
    parameters:
    - id: dateTimeBorn
      type: System.DateTimeOffset
    return:
      type: Business.Model.LifeEventEntry
    content.vb: Public Function CreateBornEventEntry(dateTimeBorn As DateTimeOffset) As LifeEventEntry
  overload: FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  id: GetDateTimeBorn(Business.Model.LifeEventEntry)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: GetDateTimeBorn(LifeEventEntry)
  nameWithType: ServiceLifeEventManager.GetDateTimeBorn(LifeEventEntry)
  fullName: FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: GetDateTimeBorn
    path: Services/IServiceLifeEventManager.cs
    startLine: 191
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public DateTimeOffset GetDateTimeBorn(LifeEventEntry bornEntry)
    parameters:
    - id: bornEntry
      type: Business.Model.LifeEventEntry
    return:
      type: System.DateTimeOffset
    content.vb: Public Function GetDateTimeBorn(bornEntry As LifeEventEntry) As DateTimeOffset
  overload: FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
  id: FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: FindBornEventEntryOrNull(IEnumerable<LifeEventEntry>)
  nameWithType: ServiceLifeEventManager.FindBornEventEntryOrNull(IEnumerable<LifeEventEntry>)
  fullName: FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable<Business.Model.LifeEventEntry>)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FindBornEventEntryOrNull
    path: Services/IServiceLifeEventManager.cs
    startLine: 214
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public LifeEventEntry FindBornEventEntryOrNull(IEnumerable<LifeEventEntry> entries)
    parameters:
    - id: entries
      type: System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry}
    return:
      type: Business.Model.LifeEventEntry
    content.vb: Public Function FindBornEventEntryOrNull(entries As IEnumerable(Of LifeEventEntry)) As LifeEventEntry
  overload: FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull*
  implements:
  - FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
  nameWithType.vb: ServiceLifeEventManager.FindBornEventEntryOrNull(IEnumerable(Of LifeEventEntry))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable(Of Business.Model.LifeEventEntry))
  name.vb: FindBornEventEntryOrNull(IEnumerable(Of LifeEventEntry))
- uid: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEvent)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEvent)
  id: GetIdFor(Business.Model.LifeEvent)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: GetIdFor(LifeEvent)
  nameWithType: ServiceLifeEventManager.GetIdFor(LifeEvent)
  fullName: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEvent)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: GetIdFor
    path: Services/IServiceLifeEventManager.cs
    startLine: 221
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public int GetIdFor(LifeEvent entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEvent
    return:
      type: System.Int32
    content.vb: Public Function GetIdFor(entity As LifeEvent) As Integer
  overload: FarmMaster.Services.ServiceLifeEventManager.GetIdFor*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.GetIdFor(Business.Model.LifeEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  id: GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: GetIdFor(LifeEventDynamicFieldInfo)
  nameWithType: ServiceLifeEventManager.GetIdFor(LifeEventDynamicFieldInfo)
  fullName: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: GetIdFor
    path: Services/IServiceLifeEventManager.cs
    startLine: 226
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public int GetIdFor(LifeEventDynamicFieldInfo entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEventDynamicFieldInfo
    return:
      type: System.Int32
    content.vb: Public Function GetIdFor(entity As LifeEventDynamicFieldInfo) As Integer
  overload: FarmMaster.Services.ServiceLifeEventManager.GetIdFor*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  id: GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: GetIdFor(LifeEventDynamicFieldValue)
  nameWithType: ServiceLifeEventManager.GetIdFor(LifeEventDynamicFieldValue)
  fullName: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: GetIdFor
    path: Services/IServiceLifeEventManager.cs
    startLine: 231
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public int GetIdFor(LifeEventDynamicFieldValue entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEventDynamicFieldValue
    return:
      type: System.Int32
    content.vb: Public Function GetIdFor(entity As LifeEventDynamicFieldValue) As Integer
  overload: FarmMaster.Services.ServiceLifeEventManager.GetIdFor*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventEntry)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventEntry)
  id: GetIdFor(Business.Model.LifeEventEntry)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: GetIdFor(LifeEventEntry)
  nameWithType: ServiceLifeEventManager.GetIdFor(LifeEventEntry)
  fullName: FarmMaster.Services.ServiceLifeEventManager.GetIdFor(Business.Model.LifeEventEntry)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: GetIdFor
    path: Services/IServiceLifeEventManager.cs
    startLine: 236
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public int GetIdFor(LifeEventEntry entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEventEntry
    return:
      type: System.Int32
    content.vb: Public Function GetIdFor(entity As LifeEventEntry) As Integer
  overload: FarmMaster.Services.ServiceLifeEventManager.GetIdFor*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.GetIdFor(Business.Model.LifeEventEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.Query
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.Query
  id: Query
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: Query()
  nameWithType: ServiceLifeEventManager.Query()
  fullName: FarmMaster.Services.ServiceLifeEventManager.Query()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Query
    path: Services/IServiceLifeEventManager.cs
    startLine: 241
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public IQueryable<LifeEvent> Query()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEvent}
    content.vb: Public Function Query As IQueryable(Of LifeEvent)
  overload: FarmMaster.Services.ServiceLifeEventManager.Query*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.Query
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded
  id: QueryAllIncluded
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: QueryAllIncluded()
  nameWithType: ServiceLifeEventManager.QueryAllIncluded()
  fullName: FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: QueryAllIncluded
    path: Services/IServiceLifeEventManager.cs
    startLine: 246
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public IQueryable<LifeEvent> QueryAllIncluded()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEvent}
    content.vb: Public Function QueryAllIncluded As IQueryable(Of LifeEvent)
  overload: FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.QueryAllIncluded
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEvent)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEvent)
  id: Update(Business.Model.LifeEvent)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: Update(LifeEvent)
  nameWithType: ServiceLifeEventManager.Update(LifeEvent)
  fullName: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEvent)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Update
    path: Services/IServiceLifeEventManager.cs
    startLine: 254
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public void Update(LifeEvent entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEvent
    content.vb: Public Sub Update(entity As LifeEvent)
  overload: FarmMaster.Services.ServiceLifeEventManager.Update*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.Update(Business.Model.LifeEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldInfo)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldInfo)
  id: Update(Business.Model.LifeEventDynamicFieldInfo)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: Update(LifeEventDynamicFieldInfo)
  nameWithType: ServiceLifeEventManager.Update(LifeEventDynamicFieldInfo)
  fullName: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldInfo)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Update
    path: Services/IServiceLifeEventManager.cs
    startLine: 260
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public void Update(LifeEventDynamicFieldInfo entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEventDynamicFieldInfo
    content.vb: Public Sub Update(entity As LifeEventDynamicFieldInfo)
  overload: FarmMaster.Services.ServiceLifeEventManager.Update*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.Update(Business.Model.LifeEventDynamicFieldInfo)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldValue)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldValue)
  id: Update(Business.Model.LifeEventDynamicFieldValue)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: Update(LifeEventDynamicFieldValue)
  nameWithType: ServiceLifeEventManager.Update(LifeEventDynamicFieldValue)
  fullName: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventDynamicFieldValue)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Update
    path: Services/IServiceLifeEventManager.cs
    startLine: 266
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public void Update(LifeEventDynamicFieldValue entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEventDynamicFieldValue
    content.vb: Public Sub Update(entity As LifeEventDynamicFieldValue)
  overload: FarmMaster.Services.ServiceLifeEventManager.Update*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.Update(Business.Model.LifeEventDynamicFieldValue)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventEntry)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventEntry)
  id: Update(Business.Model.LifeEventEntry)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: Update(LifeEventEntry)
  nameWithType: ServiceLifeEventManager.Update(LifeEventEntry)
  fullName: FarmMaster.Services.ServiceLifeEventManager.Update(Business.Model.LifeEventEntry)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Update
    path: Services/IServiceLifeEventManager.cs
    startLine: 272
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public void Update(LifeEventEntry entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEventEntry
    content.vb: Public Sub Update(entity As LifeEventEntry)
  overload: FarmMaster.Services.ServiceLifeEventManager.Update*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.Update(Business.Model.LifeEventEntry)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#Query
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#Query
  id: FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#Query
  isEii: true
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: IServiceEntityManager<LifeEventDynamicFieldInfo>.Query()
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldInfo>.Query()
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query
    path: Services/IServiceLifeEventManager.cs
    startLine: 278
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: IQueryable<LifeEventDynamicFieldInfo> IServiceEntityManager<LifeEventDynamicFieldInfo>.Query()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldInfo}
    content.vb: Function FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query As IQueryable(Of LifeEventDynamicFieldInfo) Implements IServiceEntityManager(Of LifeEventDynamicFieldInfo).Query
  overload: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#Query*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.Query
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query()
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query()
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#Query
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#Query
  id: FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#Query
  isEii: true
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: IServiceEntityManager<LifeEventDynamicFieldValue>.Query()
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldValue>.Query()
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query
    path: Services/IServiceLifeEventManager.cs
    startLine: 283
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: IQueryable<LifeEventDynamicFieldValue> IServiceEntityManager<LifeEventDynamicFieldValue>.Query()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldValue}
    content.vb: Function FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query As IQueryable(Of LifeEventDynamicFieldValue) Implements IServiceEntityManager(Of LifeEventDynamicFieldValue).Query
  overload: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#Query*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.Query
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query()
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query()
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#Query
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#Query
  id: FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#Query
  isEii: true
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: IServiceEntityManager<LifeEventEntry>.Query()
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventEntry>.Query()
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query
    path: Services/IServiceLifeEventManager.cs
    startLine: 288
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: IQueryable<LifeEventEntry> IServiceEntityManager<LifeEventEntry>.Query()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEventEntry}
    content.vb: Function FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query As IQueryable(Of LifeEventEntry) Implements IServiceEntityManager(Of LifeEventEntry).Query
  overload: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#Query*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.Query
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query()
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query()
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#QueryAllIncluded
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#QueryAllIncluded
  id: FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#QueryAllIncluded
  isEii: true
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: IServiceEntityManager<LifeEventDynamicFieldInfo>.QueryAllIncluded()
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldInfo>.QueryAllIncluded()
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded
    path: Services/IServiceLifeEventManager.cs
    startLine: 293
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: IQueryable<LifeEventDynamicFieldInfo> IServiceEntityManager<LifeEventDynamicFieldInfo>.QueryAllIncluded()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldInfo}
    content.vb: Function FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded As IQueryable(Of LifeEventDynamicFieldInfo) Implements IServiceEntityManager(Of LifeEventDynamicFieldInfo).QueryAllIncluded
  overload: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#QueryAllIncluded*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.QueryAllIncluded
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded()
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded()
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#QueryAllIncluded
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#QueryAllIncluded
  id: FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#QueryAllIncluded
  isEii: true
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: IServiceEntityManager<LifeEventDynamicFieldValue>.QueryAllIncluded()
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldValue>.QueryAllIncluded()
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded
    path: Services/IServiceLifeEventManager.cs
    startLine: 304
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: IQueryable<LifeEventDynamicFieldValue> IServiceEntityManager<LifeEventDynamicFieldValue>.QueryAllIncluded()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldValue}
    content.vb: Function FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded As IQueryable(Of LifeEventDynamicFieldValue) Implements IServiceEntityManager(Of LifeEventDynamicFieldValue).QueryAllIncluded
  overload: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#QueryAllIncluded*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.QueryAllIncluded
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded()
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded()
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#QueryAllIncluded
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#QueryAllIncluded
  id: FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#QueryAllIncluded
  isEii: true
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: IServiceEntityManager<LifeEventEntry>.QueryAllIncluded()
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventEntry>.QueryAllIncluded()
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded()
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded
    path: Services/IServiceLifeEventManager.cs
    startLine: 313
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: IQueryable<LifeEventEntry> IServiceEntityManager<LifeEventEntry>.QueryAllIncluded()
    return:
      type: System.Linq.IQueryable{Business.Model.LifeEventEntry}
    content.vb: Function FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded As IQueryable(Of LifeEventEntry) Implements IServiceEntityManager(Of LifeEventEntry).QueryAllIncluded
  overload: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#QueryAllIncluded*
  implements:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.QueryAllIncluded
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded()
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded()
- uid: FarmMaster.Services.ServiceLifeEventManager.FullDelete(Business.Model.LifeEvent)
  commentId: M:FarmMaster.Services.ServiceLifeEventManager.FullDelete(Business.Model.LifeEvent)
  id: FullDelete(Business.Model.LifeEvent)
  parent: FarmMaster.Services.ServiceLifeEventManager
  langs:
  - csharp
  - vb
  name: FullDelete(LifeEvent)
  nameWithType: ServiceLifeEventManager.FullDelete(LifeEvent)
  fullName: FarmMaster.Services.ServiceLifeEventManager.FullDelete(Business.Model.LifeEvent)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceLifeEventManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FullDelete
    path: Services/IServiceLifeEventManager.cs
    startLine: 320
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: public void FullDelete(LifeEvent entity)
    parameters:
    - id: entity
      type: Business.Model.LifeEvent
    content.vb: Public Sub FullDelete(entity As LifeEvent)
  overload: FarmMaster.Services.ServiceLifeEventManager.FullDelete*
  implements:
  - FarmMaster.Services.IServiceEntityManagerFullDeletion{Business.Model.LifeEvent}.FullDelete(Business.Model.LifeEvent)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: FarmMaster.Services
  commentId: N:FarmMaster.Services
  name: FarmMaster.Services
  nameWithType: FarmMaster.Services
  fullName: FarmMaster.Services
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: FarmMaster.Services.IServiceLifeEventManager
  commentId: T:FarmMaster.Services.IServiceLifeEventManager
  parent: FarmMaster.Services
  name: IServiceLifeEventManager
  nameWithType: IServiceLifeEventManager
  fullName: FarmMaster.Services.IServiceLifeEventManager
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}
  commentId: T:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}
  parent: FarmMaster.Services
  definition: FarmMaster.Services.IServiceEntityManager`1
  name: IServiceEntityManager<LifeEvent>
  nameWithType: IServiceEntityManager<LifeEvent>
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>
  nameWithType.vb: IServiceEntityManager(Of LifeEvent)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent)
  name.vb: IServiceEntityManager(Of LifeEvent)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}
  commentId: T:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}
  parent: FarmMaster.Services
  definition: FarmMaster.Services.IServiceEntityManager`1
  name: IServiceEntityManager<LifeEventDynamicFieldInfo>
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldInfo)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo)
  name.vb: IServiceEntityManager(Of LifeEventDynamicFieldInfo)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}
  commentId: T:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}
  parent: FarmMaster.Services
  definition: FarmMaster.Services.IServiceEntityManager`1
  name: IServiceEntityManager<LifeEventDynamicFieldValue>
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldValue)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue)
  name.vb: IServiceEntityManager(Of LifeEventDynamicFieldValue)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}
  commentId: T:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}
  parent: FarmMaster.Services
  definition: FarmMaster.Services.IServiceEntityManager`1
  name: IServiceEntityManager<LifeEventEntry>
  nameWithType: IServiceEntityManager<LifeEventEntry>
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>
  nameWithType.vb: IServiceEntityManager(Of LifeEventEntry)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry)
  name.vb: IServiceEntityManager(Of LifeEventEntry)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManagerFullDeletion{Business.Model.LifeEvent}
  commentId: T:FarmMaster.Services.IServiceEntityManagerFullDeletion{Business.Model.LifeEvent}
  parent: FarmMaster.Services
  definition: FarmMaster.Services.IServiceEntityManagerFullDeletion`1
  name: IServiceEntityManagerFullDeletion<LifeEvent>
  nameWithType: IServiceEntityManagerFullDeletion<LifeEvent>
  fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion<Business.Model.LifeEvent>
  nameWithType.vb: IServiceEntityManagerFullDeletion(Of LifeEvent)
  fullName.vb: FarmMaster.Services.IServiceEntityManagerFullDeletion(Of Business.Model.LifeEvent)
  name.vb: IServiceEntityManagerFullDeletion(Of LifeEvent)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1
    name: IServiceEntityManagerFullDeletion
    nameWithType: IServiceEntityManagerFullDeletion
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1
    name: IServiceEntityManagerFullDeletion
    nameWithType: IServiceEntityManagerFullDeletion
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: FarmMaster.Services.IServiceEntityManager`1
  commentId: T:FarmMaster.Services.IServiceEntityManager`1
  name: IServiceEntityManager<T>
  nameWithType: IServiceEntityManager<T>
  fullName: FarmMaster.Services.IServiceEntityManager<T>
  nameWithType.vb: IServiceEntityManager(Of T)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T)
  name.vb: IServiceEntityManager(Of T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1
  commentId: T:FarmMaster.Services.IServiceEntityManagerFullDeletion`1
  name: IServiceEntityManagerFullDeletion<T>
  nameWithType: IServiceEntityManagerFullDeletion<T>
  fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion<T>
  nameWithType.vb: IServiceEntityManagerFullDeletion(Of T)
  fullName.vb: FarmMaster.Services.IServiceEntityManagerFullDeletion(Of T)
  name.vb: IServiceEntityManagerFullDeletion(Of T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1
    name: IServiceEntityManagerFullDeletion
    nameWithType: IServiceEntityManagerFullDeletion
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1
    name: IServiceEntityManagerFullDeletion
    nameWithType: IServiceEntityManagerFullDeletion
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.#ctor*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.#ctor
  name: ServiceLifeEventManager
  nameWithType: ServiceLifeEventManager.ServiceLifeEventManager
  fullName: FarmMaster.Services.ServiceLifeEventManager.ServiceLifeEventManager
- uid: Business.Model.FarmMasterContext
  commentId: T:Business.Model.FarmMasterContext
  parent: Business.Model
  name: FarmMasterContext
  nameWithType: FarmMasterContext
  fullName: Business.Model.FarmMasterContext
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateEvent*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.CreateEvent
  name: CreateEvent
  nameWithType: ServiceLifeEventManager.CreateEvent
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateEvent
- uid: FarmMaster.Services.IServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
  parent: FarmMaster.Services.IServiceLifeEventManager
  isExternal: true
  name: CreateEvent(String, String, LifeEvent.TargetType)
  nameWithType: IServiceLifeEventManager.CreateEvent(String, String, LifeEvent.TargetType)
  fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEvent(System.String, System.String, Business.Model.LifeEvent.TargetType)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
    name: CreateEvent
    nameWithType: IServiceLifeEventManager.CreateEvent
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.LifeEvent.TargetType
    name: LifeEvent.TargetType
    nameWithType: LifeEvent.TargetType
    fullName: Business.Model.LifeEvent.TargetType
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateEvent(System.String,System.String,Business.Model.LifeEvent.TargetType)
    name: CreateEvent
    nameWithType: IServiceLifeEventManager.CreateEvent
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEvent
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.LifeEvent.TargetType
    name: LifeEvent.TargetType
    nameWithType: LifeEvent.TargetType
    fullName: Business.Model.LifeEvent.TargetType
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Business.Model.LifeEvent.TargetType
  commentId: T:Business.Model.LifeEvent.TargetType
  parent: Business.Model
  name: LifeEvent.TargetType
  nameWithType: LifeEvent.TargetType
  fullName: Business.Model.LifeEvent.TargetType
- uid: Business.Model.LifeEvent
  commentId: T:Business.Model.LifeEvent
  parent: Business.Model
  name: LifeEvent
  nameWithType: LifeEvent
  fullName: Business.Model.LifeEvent
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateEventField*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.CreateEventField
  name: CreateEventField
  nameWithType: ServiceLifeEventManager.CreateEventField
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateEventField
- uid: FarmMaster.Services.IServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
  parent: FarmMaster.Services.IServiceLifeEventManager
  isExternal: true
  name: CreateEventField(LifeEvent, String, String, DynamicField.Type)
  nameWithType: IServiceLifeEventManager.CreateEventField(LifeEvent, String, String, DynamicField.Type)
  fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent, System.String, System.String, Business.Model.DynamicField.Type)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
    name: CreateEventField
    nameWithType: IServiceLifeEventManager.CreateEventField
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEventField
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField.Type
    name: DynamicField.Type
    nameWithType: DynamicField.Type
    fullName: Business.Model.DynamicField.Type
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateEventField(Business.Model.LifeEvent,System.String,System.String,Business.Model.DynamicField.Type)
    name: CreateEventField
    nameWithType: IServiceLifeEventManager.CreateEventField
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEventField
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField.Type
    name: DynamicField.Type
    nameWithType: DynamicField.Type
    fullName: Business.Model.DynamicField.Type
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.DynamicField.Type
  commentId: T:Business.Model.DynamicField.Type
  parent: Business.Model
  name: DynamicField.Type
  nameWithType: DynamicField.Type
  fullName: Business.Model.DynamicField.Type
- uid: Business.Model.LifeEventDynamicFieldInfo
  commentId: T:Business.Model.LifeEventDynamicFieldInfo
  parent: Business.Model
  name: LifeEventDynamicFieldInfo
  nameWithType: LifeEventDynamicFieldInfo
  fullName: Business.Model.LifeEventDynamicFieldInfo
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry
  name: CreateEventEntry
  nameWithType: ServiceLifeEventManager.CreateEventEntry
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateEventEntry
- uid: FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
  parent: FarmMaster.Services.IServiceLifeEventManager
  isExternal: true
  name: CreateEventEntry(LifeEvent, IDictionary<String, DynamicField>)
  nameWithType: IServiceLifeEventManager.CreateEventEntry(LifeEvent, IDictionary<String, DynamicField>)
  fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent, System.Collections.Generic.IDictionary<System.String, Business.Model.DynamicField>)
  nameWithType.vb: IServiceLifeEventManager.CreateEventEntry(LifeEvent, IDictionary(Of String, DynamicField))
  fullName.vb: FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent, System.Collections.Generic.IDictionary(Of System.String, Business.Model.DynamicField))
  name.vb: CreateEventEntry(LifeEvent, IDictionary(Of String, DynamicField))
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
    name: CreateEventEntry
    nameWithType: IServiceLifeEventManager.CreateEventEntry
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField
    name: DynamicField
    nameWithType: DynamicField
    fullName: Business.Model.DynamicField
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry(Business.Model.LifeEvent,System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField})
    name: CreateEventEntry
    nameWithType: IServiceLifeEventManager.CreateEventEntry
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateEventEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField
    name: DynamicField
    nameWithType: DynamicField
    fullName: Business.Model.DynamicField
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField}
  commentId: T:System.Collections.Generic.IDictionary{System.String,Business.Model.DynamicField}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, DynamicField>
  nameWithType: IDictionary<String, DynamicField>
  fullName: System.Collections.Generic.IDictionary<System.String, Business.Model.DynamicField>
  nameWithType.vb: IDictionary(Of String, DynamicField)
  fullName.vb: System.Collections.Generic.IDictionary(Of System.String, Business.Model.DynamicField)
  name.vb: IDictionary(Of String, DynamicField)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField
    name: DynamicField
    nameWithType: DynamicField
    fullName: Business.Model.DynamicField
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField
    name: DynamicField
    nameWithType: DynamicField
    fullName: Business.Model.DynamicField
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.LifeEventEntry
  commentId: T:Business.Model.LifeEventEntry
  parent: Business.Model
  name: LifeEventEntry
  nameWithType: LifeEventEntry
  fullName: Business.Model.LifeEventEntry
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullName.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName
  name: RemoveEventFieldByName
  nameWithType: ServiceLifeEventManager.RemoveEventFieldByName
  fullName: FarmMaster.Services.ServiceLifeEventManager.RemoveEventFieldByName
- uid: FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
  parent: FarmMaster.Services.IServiceLifeEventManager
  isExternal: true
  name: RemoveEventFieldByName(LifeEvent, String)
  nameWithType: IServiceLifeEventManager.RemoveEventFieldByName(LifeEvent, String)
  fullName: FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent, System.String)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
    name: RemoveEventFieldByName
    nameWithType: IServiceLifeEventManager.RemoveEventFieldByName
    fullName: FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName(Business.Model.LifeEvent,System.String)
    name: RemoveEventFieldByName
    nameWithType: IServiceLifeEventManager.RemoveEventFieldByName
    fullName: FarmMaster.Services.IServiceLifeEventManager.RemoveEventFieldByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Misc.CouldDelete
  commentId: T:FarmMaster.Misc.CouldDelete
  parent: FarmMaster.Misc
  name: CouldDelete
  nameWithType: CouldDelete
  fullName: FarmMaster.Misc.CouldDelete
- uid: FarmMaster.Misc
  commentId: N:FarmMaster.Misc
  name: FarmMaster.Misc
  nameWithType: FarmMaster.Misc
  fullName: FarmMaster.Misc
- uid: FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName
  name: UpdateEventEntryFieldValueByName
  nameWithType: ServiceLifeEventManager.UpdateEventEntryFieldValueByName
  fullName: FarmMaster.Services.ServiceLifeEventManager.UpdateEventEntryFieldValueByName
- uid: FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
  parent: FarmMaster.Services.IServiceLifeEventManager
  isExternal: true
  name: UpdateEventEntryFieldValueByName(LifeEventEntry, String, DynamicField)
  nameWithType: IServiceLifeEventManager.UpdateEventEntryFieldValueByName(LifeEventEntry, String, DynamicField)
  fullName: FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry, System.String, Business.Model.DynamicField)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
    name: UpdateEventEntryFieldValueByName
    nameWithType: IServiceLifeEventManager.UpdateEventEntryFieldValueByName
    fullName: FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField
    name: DynamicField
    nameWithType: DynamicField
    fullName: Business.Model.DynamicField
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName(Business.Model.LifeEventEntry,System.String,Business.Model.DynamicField)
    name: UpdateEventEntryFieldValueByName
    nameWithType: IServiceLifeEventManager.UpdateEventEntryFieldValueByName
    fullName: FarmMaster.Services.IServiceLifeEventManager.UpdateEventEntryFieldValueByName
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Business.Model.DynamicField
    name: DynamicField
    nameWithType: DynamicField
    fullName: Business.Model.DynamicField
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.DynamicField
  commentId: T:Business.Model.DynamicField
  parent: Business.Model
  name: DynamicField
  nameWithType: DynamicField
  fullName: Business.Model.DynamicField
- uid: FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry
  name: CreateBornEventEntry
  nameWithType: ServiceLifeEventManager.CreateBornEventEntry
  fullName: FarmMaster.Services.ServiceLifeEventManager.CreateBornEventEntry
- uid: FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  parent: FarmMaster.Services.IServiceLifeEventManager
  isExternal: true
  name: CreateBornEventEntry(DateTimeOffset)
  nameWithType: IServiceLifeEventManager.CreateBornEventEntry(DateTimeOffset)
  fullName: FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
    name: CreateBornEventEntry
    nameWithType: IServiceLifeEventManager.CreateBornEventEntry
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry(System.DateTimeOffset)
    name: CreateBornEventEntry
    nameWithType: IServiceLifeEventManager.CreateBornEventEntry
    fullName: FarmMaster.Services.IServiceLifeEventManager.CreateBornEventEntry
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.DateTimeOffset
    name: DateTimeOffset
    nameWithType: DateTimeOffset
    fullName: System.DateTimeOffset
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.DateTimeOffset
  commentId: T:System.DateTimeOffset
  parent: System
  isExternal: true
  name: DateTimeOffset
  nameWithType: DateTimeOffset
  fullName: System.DateTimeOffset
- uid: FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn
  name: GetDateTimeBorn
  nameWithType: ServiceLifeEventManager.GetDateTimeBorn
  fullName: FarmMaster.Services.ServiceLifeEventManager.GetDateTimeBorn
- uid: FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  parent: FarmMaster.Services.IServiceLifeEventManager
  name: GetDateTimeBorn(LifeEventEntry)
  nameWithType: IServiceLifeEventManager.GetDateTimeBorn(LifeEventEntry)
  fullName: FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
    name: GetDateTimeBorn
    nameWithType: IServiceLifeEventManager.GetDateTimeBorn
    fullName: FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn(Business.Model.LifeEventEntry)
    name: GetDateTimeBorn
    nameWithType: IServiceLifeEventManager.GetDateTimeBorn
    fullName: FarmMaster.Services.IServiceLifeEventManager.GetDateTimeBorn
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull
  name: FindBornEventEntryOrNull
  nameWithType: ServiceLifeEventManager.FindBornEventEntryOrNull
  fullName: FarmMaster.Services.ServiceLifeEventManager.FindBornEventEntryOrNull
- uid: FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
  commentId: M:FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
  parent: FarmMaster.Services.IServiceLifeEventManager
  isExternal: true
  name: FindBornEventEntryOrNull(IEnumerable<LifeEventEntry>)
  nameWithType: IServiceLifeEventManager.FindBornEventEntryOrNull(IEnumerable<LifeEventEntry>)
  fullName: FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable<Business.Model.LifeEventEntry>)
  nameWithType.vb: IServiceLifeEventManager.FindBornEventEntryOrNull(IEnumerable(Of LifeEventEntry))
  fullName.vb: FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable(Of Business.Model.LifeEventEntry))
  name.vb: FindBornEventEntryOrNull(IEnumerable(Of LifeEventEntry))
  spec.csharp:
  - uid: FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
    name: FindBornEventEntryOrNull
    nameWithType: IServiceLifeEventManager.FindBornEventEntryOrNull
    fullName: FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull(System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry})
    name: FindBornEventEntryOrNull
    nameWithType: IServiceLifeEventManager.FindBornEventEntryOrNull
    fullName: FarmMaster.Services.IServiceLifeEventManager.FindBornEventEntryOrNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<LifeEventEntry>
  nameWithType: IEnumerable<LifeEventEntry>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.LifeEventEntry>
  nameWithType.vb: IEnumerable(Of LifeEventEntry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.LifeEventEntry)
  name.vb: IEnumerable(Of LifeEventEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.GetIdFor*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.GetIdFor
  name: GetIdFor
  nameWithType: ServiceLifeEventManager.GetIdFor
  fullName: FarmMaster.Services.ServiceLifeEventManager.GetIdFor
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.GetIdFor(Business.Model.LifeEvent)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.GetIdFor(Business.Model.LifeEvent)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}
  definition: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  name: GetIdFor(LifeEvent)
  nameWithType: IServiceEntityManager<LifeEvent>.GetIdFor(LifeEvent)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.GetIdFor(Business.Model.LifeEvent)
  nameWithType.vb: IServiceEntityManager(Of LifeEvent).GetIdFor(LifeEvent)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).GetIdFor(Business.Model.LifeEvent)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager<LifeEvent>.GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager(Of LifeEvent).GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  name: GetIdFor(T)
  nameWithType: IServiceEntityManager<T>.GetIdFor(T)
  fullName: FarmMaster.Services.IServiceEntityManager<T>.GetIdFor(T)
  nameWithType.vb: IServiceEntityManager(Of T).GetIdFor(T)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).GetIdFor(T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager<T>.GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager<T>.GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager(Of T).GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}
  definition: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  name: GetIdFor(LifeEventDynamicFieldInfo)
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.GetIdFor(LifeEventDynamicFieldInfo)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldInfo).GetIdFor(LifeEventDynamicFieldInfo)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).GetIdFor(Business.Model.LifeEventDynamicFieldInfo)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldInfo).GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}
  definition: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  name: GetIdFor(LifeEventDynamicFieldValue)
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.GetIdFor(LifeEventDynamicFieldValue)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldValue).GetIdFor(LifeEventDynamicFieldValue)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).GetIdFor(Business.Model.LifeEventDynamicFieldValue)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldValue).GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.LifeEventDynamicFieldValue
  commentId: T:Business.Model.LifeEventDynamicFieldValue
  parent: Business.Model
  name: LifeEventDynamicFieldValue
  nameWithType: LifeEventDynamicFieldValue
  fullName: Business.Model.LifeEventDynamicFieldValue
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.GetIdFor(Business.Model.LifeEventEntry)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.GetIdFor(Business.Model.LifeEventEntry)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}
  definition: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  name: GetIdFor(LifeEventEntry)
  nameWithType: IServiceEntityManager<LifeEventEntry>.GetIdFor(LifeEventEntry)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.GetIdFor(Business.Model.LifeEventEntry)
  nameWithType.vb: IServiceEntityManager(Of LifeEventEntry).GetIdFor(LifeEventEntry)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).GetIdFor(Business.Model.LifeEventEntry)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager<LifeEventEntry>.GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager(Of LifeEventEntry).GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.Query*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.Query
  name: Query
  nameWithType: ServiceLifeEventManager.Query
  fullName: FarmMaster.Services.ServiceLifeEventManager.Query
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.Query
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.Query
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}
  definition: FarmMaster.Services.IServiceEntityManager`1.Query
  name: Query()
  nameWithType: IServiceEntityManager<LifeEvent>.Query()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.Query()
  nameWithType.vb: IServiceEntityManager(Of LifeEvent).Query()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).Query()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager<LifeEvent>.Query
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager(Of LifeEvent).Query
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{Business.Model.LifeEvent}
  commentId: T:System.Linq.IQueryable{Business.Model.LifeEvent}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<LifeEvent>
  nameWithType: IQueryable<LifeEvent>
  fullName: System.Linq.IQueryable<Business.Model.LifeEvent>
  nameWithType.vb: IQueryable(Of LifeEvent)
  fullName.vb: System.Linq.IQueryable(Of Business.Model.LifeEvent)
  name.vb: IQueryable(Of LifeEvent)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1.Query
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.Query
  name: Query()
  nameWithType: IServiceEntityManager<T>.Query()
  fullName: FarmMaster.Services.IServiceEntityManager<T>.Query()
  nameWithType.vb: IServiceEntityManager(Of T).Query()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).Query()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager<T>.Query
    fullName: FarmMaster.Services.IServiceEntityManager<T>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager(Of T).Query
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded
  name: QueryAllIncluded
  nameWithType: ServiceLifeEventManager.QueryAllIncluded
  fullName: FarmMaster.Services.ServiceLifeEventManager.QueryAllIncluded
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.QueryAllIncluded
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.QueryAllIncluded
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}
  definition: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  name: QueryAllIncluded()
  nameWithType: IServiceEntityManager<LifeEvent>.QueryAllIncluded()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.QueryAllIncluded()
  nameWithType.vb: IServiceEntityManager(Of LifeEvent).QueryAllIncluded()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).QueryAllIncluded()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager<LifeEvent>.QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager(Of LifeEvent).QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  name: QueryAllIncluded()
  nameWithType: IServiceEntityManager<T>.QueryAllIncluded()
  fullName: FarmMaster.Services.IServiceEntityManager<T>.QueryAllIncluded()
  nameWithType.vb: IServiceEntityManager(Of T).QueryAllIncluded()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).QueryAllIncluded()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager<T>.QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager<T>.QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager(Of T).QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.Update*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.Update
  name: Update
  nameWithType: ServiceLifeEventManager.Update
  fullName: FarmMaster.Services.ServiceLifeEventManager.Update
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.Update(Business.Model.LifeEvent)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}.Update(Business.Model.LifeEvent)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEvent}
  definition: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  name: Update(LifeEvent)
  nameWithType: IServiceEntityManager<LifeEvent>.Update(LifeEvent)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.Update(Business.Model.LifeEvent)
  nameWithType.vb: IServiceEntityManager(Of LifeEvent).Update(LifeEvent)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).Update(Business.Model.LifeEvent)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager<LifeEvent>.Update
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEvent>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager(Of LifeEvent).Update
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEvent).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  name: Update(T)
  nameWithType: IServiceEntityManager<T>.Update(T)
  fullName: FarmMaster.Services.IServiceEntityManager<T>.Update(T)
  nameWithType.vb: IServiceEntityManager(Of T).Update(T)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).Update(T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager<T>.Update
    fullName: FarmMaster.Services.IServiceEntityManager<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager(Of T).Update
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.Update(Business.Model.LifeEventDynamicFieldInfo)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.Update(Business.Model.LifeEventDynamicFieldInfo)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}
  definition: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  name: Update(LifeEventDynamicFieldInfo)
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.Update(LifeEventDynamicFieldInfo)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Update(Business.Model.LifeEventDynamicFieldInfo)
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldInfo).Update(LifeEventDynamicFieldInfo)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).Update(Business.Model.LifeEventDynamicFieldInfo)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.Update
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldInfo).Update
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.Update(Business.Model.LifeEventDynamicFieldValue)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.Update(Business.Model.LifeEventDynamicFieldValue)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}
  definition: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  name: Update(LifeEventDynamicFieldValue)
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.Update(LifeEventDynamicFieldValue)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Update(Business.Model.LifeEventDynamicFieldValue)
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldValue).Update(LifeEventDynamicFieldValue)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).Update(Business.Model.LifeEventDynamicFieldValue)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.Update
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldValue).Update
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.Update(Business.Model.LifeEventEntry)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.Update(Business.Model.LifeEventEntry)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}
  definition: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  name: Update(LifeEventEntry)
  nameWithType: IServiceEntityManager<LifeEventEntry>.Update(LifeEventEntry)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Update(Business.Model.LifeEventEntry)
  nameWithType.vb: IServiceEntityManager(Of LifeEventEntry).Update(LifeEventEntry)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).Update(Business.Model.LifeEventEntry)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager<LifeEventEntry>.Update
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager(Of LifeEventEntry).Update
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#Query*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#Query
  name: IServiceEntityManager<LifeEventDynamicFieldInfo>.Query
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldInfo>.Query
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.Query
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.Query
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}
  definition: FarmMaster.Services.IServiceEntityManager`1.Query
  name: Query()
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.Query()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query()
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldInfo).Query()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).Query()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.Query
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldInfo).Query
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldInfo}
  commentId: T:System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldInfo}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<LifeEventDynamicFieldInfo>
  nameWithType: IQueryable<LifeEventDynamicFieldInfo>
  fullName: System.Linq.IQueryable<Business.Model.LifeEventDynamicFieldInfo>
  nameWithType.vb: IQueryable(Of LifeEventDynamicFieldInfo)
  fullName.vb: System.Linq.IQueryable(Of Business.Model.LifeEventDynamicFieldInfo)
  name.vb: IQueryable(Of LifeEventDynamicFieldInfo)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#Query*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#Query
  name: IServiceEntityManager<LifeEventDynamicFieldValue>.Query
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldValue>.Query
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.Query
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.Query
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}
  definition: FarmMaster.Services.IServiceEntityManager`1.Query
  name: Query()
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.Query()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query()
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldValue).Query()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).Query()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.Query
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldValue).Query
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldValue}
  commentId: T:System.Linq.IQueryable{Business.Model.LifeEventDynamicFieldValue}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<LifeEventDynamicFieldValue>
  nameWithType: IQueryable<LifeEventDynamicFieldValue>
  fullName: System.Linq.IQueryable<Business.Model.LifeEventDynamicFieldValue>
  nameWithType.vb: IQueryable(Of LifeEventDynamicFieldValue)
  fullName.vb: System.Linq.IQueryable(Of Business.Model.LifeEventDynamicFieldValue)
  name.vb: IQueryable(Of LifeEventDynamicFieldValue)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventDynamicFieldValue
    name: LifeEventDynamicFieldValue
    nameWithType: LifeEventDynamicFieldValue
    fullName: Business.Model.LifeEventDynamicFieldValue
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#Query*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#Query
  name: IServiceEntityManager<LifeEventEntry>.Query
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventEntry>.Query
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.Query
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.Query
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}
  definition: FarmMaster.Services.IServiceEntityManager`1.Query
  name: Query()
  nameWithType: IServiceEntityManager<LifeEventEntry>.Query()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query()
  nameWithType.vb: IServiceEntityManager(Of LifeEventEntry).Query()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).Query()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager<LifeEventEntry>.Query
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager(Of LifeEventEntry).Query
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable{Business.Model.LifeEventEntry}
  commentId: T:System.Linq.IQueryable{Business.Model.LifeEventEntry}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<LifeEventEntry>
  nameWithType: IQueryable<LifeEventEntry>
  fullName: System.Linq.IQueryable<Business.Model.LifeEventEntry>
  nameWithType.vb: IQueryable(Of LifeEventEntry)
  fullName.vb: System.Linq.IQueryable(Of Business.Model.LifeEventEntry)
  name.vb: IQueryable(Of LifeEventEntry)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#QueryAllIncluded*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldInfo}#QueryAllIncluded
  name: IServiceEntityManager<LifeEventDynamicFieldInfo>.QueryAllIncluded
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldInfo>.QueryAllIncluded
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.QueryAllIncluded
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}.QueryAllIncluded
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldInfo}
  definition: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  name: QueryAllIncluded()
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.QueryAllIncluded()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded()
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldInfo).QueryAllIncluded()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).QueryAllIncluded()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldInfo>.QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldInfo>.QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldInfo).QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldInfo).QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#QueryAllIncluded*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventDynamicFieldValue}#QueryAllIncluded
  name: IServiceEntityManager<LifeEventDynamicFieldValue>.QueryAllIncluded
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventDynamicFieldValue>.QueryAllIncluded
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.QueryAllIncluded
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}.QueryAllIncluded
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventDynamicFieldValue}
  definition: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  name: QueryAllIncluded()
  nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.QueryAllIncluded()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded()
  nameWithType.vb: IServiceEntityManager(Of LifeEventDynamicFieldValue).QueryAllIncluded()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).QueryAllIncluded()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager<LifeEventDynamicFieldValue>.QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventDynamicFieldValue>.QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager(Of LifeEventDynamicFieldValue).QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventDynamicFieldValue).QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#QueryAllIncluded*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FarmMaster#Services#IServiceEntityManager{Business#Model#LifeEventEntry}#QueryAllIncluded
  name: IServiceEntityManager<LifeEventEntry>.QueryAllIncluded
  nameWithType: ServiceLifeEventManager.IServiceEntityManager<LifeEventEntry>.QueryAllIncluded
  fullName: FarmMaster.Services.ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded
  nameWithType.vb: ServiceLifeEventManager.FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded
  name.vb: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.QueryAllIncluded
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}.QueryAllIncluded
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.LifeEventEntry}
  definition: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  name: QueryAllIncluded()
  nameWithType: IServiceEntityManager<LifeEventEntry>.QueryAllIncluded()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded()
  nameWithType.vb: IServiceEntityManager(Of LifeEventEntry).QueryAllIncluded()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).QueryAllIncluded()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager<LifeEventEntry>.QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.LifeEventEntry>.QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager(Of LifeEventEntry).QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.LifeEventEntry).QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.ServiceLifeEventManager.FullDelete*
  commentId: Overload:FarmMaster.Services.ServiceLifeEventManager.FullDelete
  name: FullDelete
  nameWithType: ServiceLifeEventManager.FullDelete
  fullName: FarmMaster.Services.ServiceLifeEventManager.FullDelete
- uid: FarmMaster.Services.IServiceEntityManagerFullDeletion{Business.Model.LifeEvent}.FullDelete(Business.Model.LifeEvent)
  commentId: M:FarmMaster.Services.IServiceEntityManagerFullDeletion{Business.Model.LifeEvent}.FullDelete(Business.Model.LifeEvent)
  parent: FarmMaster.Services.IServiceEntityManagerFullDeletion{Business.Model.LifeEvent}
  definition: FarmMaster.Services.IServiceEntityManagerFullDeletion`1.FullDelete(`0)
  name: FullDelete(LifeEvent)
  nameWithType: IServiceEntityManagerFullDeletion<LifeEvent>.FullDelete(LifeEvent)
  fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion<Business.Model.LifeEvent>.FullDelete(Business.Model.LifeEvent)
  nameWithType.vb: IServiceEntityManagerFullDeletion(Of LifeEvent).FullDelete(LifeEvent)
  fullName.vb: FarmMaster.Services.IServiceEntityManagerFullDeletion(Of Business.Model.LifeEvent).FullDelete(Business.Model.LifeEvent)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1.FullDelete(`0)
    name: FullDelete
    nameWithType: IServiceEntityManagerFullDeletion<LifeEvent>.FullDelete
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion<Business.Model.LifeEvent>.FullDelete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1.FullDelete(`0)
    name: FullDelete
    nameWithType: IServiceEntityManagerFullDeletion(Of LifeEvent).FullDelete
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion(Of Business.Model.LifeEvent).FullDelete
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.LifeEvent
    name: LifeEvent
    nameWithType: LifeEvent
    fullName: Business.Model.LifeEvent
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1.FullDelete(`0)
  commentId: M:FarmMaster.Services.IServiceEntityManagerFullDeletion`1.FullDelete(`0)
  name: FullDelete(T)
  nameWithType: IServiceEntityManagerFullDeletion<T>.FullDelete(T)
  fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion<T>.FullDelete(T)
  nameWithType.vb: IServiceEntityManagerFullDeletion(Of T).FullDelete(T)
  fullName.vb: FarmMaster.Services.IServiceEntityManagerFullDeletion(Of T).FullDelete(T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1.FullDelete(`0)
    name: FullDelete
    nameWithType: IServiceEntityManagerFullDeletion<T>.FullDelete
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion<T>.FullDelete
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManagerFullDeletion`1.FullDelete(`0)
    name: FullDelete
    nameWithType: IServiceEntityManagerFullDeletion(Of T).FullDelete
    fullName: FarmMaster.Services.IServiceEntityManagerFullDeletion(Of T).FullDelete
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
