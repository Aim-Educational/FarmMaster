### YamlMime:ManagedReference
items:
- uid: Business.Model.DynamicFieldText
  commentId: T:Business.Model.DynamicFieldText
  id: DynamicFieldText
  parent: Business.Model
  children:
  - Business.Model.DynamicFieldText.#ctor
  - Business.Model.DynamicFieldText.FromHtmlString(System.String)
  - Business.Model.DynamicFieldText.FromJson(Newtonsoft.Json.Linq.JObject)
  - Business.Model.DynamicFieldText.Text
  - Business.Model.DynamicFieldText.ToHtmlString
  - Business.Model.DynamicFieldText.ToJsonImpl
  langs:
  - csharp
  - vb
  name: DynamicFieldText
  nameWithType: DynamicFieldText
  fullName: Business.Model.DynamicFieldText
  type: Class
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: DynamicFieldText
    path: ../Business/Model/DynamicField.cs
    startLine: 152
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: 'public class DynamicFieldText : DynamicField'
    content.vb: >-
      Public Class DynamicFieldText

          Inherits DynamicField
  inheritance:
  - System.Object
  - Business.Model.DynamicField
  inheritedMembers:
  - Business.Model.DynamicField.TYPE_KEY
  - Business.Model.DynamicField.FieldType
  - Business.Model.DynamicField.ToJson
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Business.Model.DynamicFieldText.Text
  commentId: P:Business.Model.DynamicFieldText.Text
  id: Text
  parent: Business.Model.DynamicFieldText
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: DynamicFieldText.Text
  fullName: Business.Model.DynamicFieldText.Text
  type: Property
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Text
    path: ../Business/Model/DynamicField.cs
    startLine: 154
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public string Text { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Text As String
  overload: Business.Model.DynamicFieldText.Text*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.DynamicFieldText.#ctor
  commentId: M:Business.Model.DynamicFieldText.#ctor
  id: '#ctor'
  parent: Business.Model.DynamicFieldText
  langs:
  - csharp
  - vb
  name: DynamicFieldText()
  nameWithType: DynamicFieldText.DynamicFieldText()
  fullName: Business.Model.DynamicFieldText.DynamicFieldText()
  type: Constructor
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: .ctor
    path: ../Business/Model/DynamicField.cs
    startLine: 156
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public DynamicFieldText()
    content.vb: Public Sub New
  overload: Business.Model.DynamicFieldText.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Business.Model.DynamicFieldText.FromHtmlString(System.String)
  commentId: M:Business.Model.DynamicFieldText.FromHtmlString(System.String)
  id: FromHtmlString(System.String)
  parent: Business.Model.DynamicFieldText
  langs:
  - csharp
  - vb
  name: FromHtmlString(String)
  nameWithType: DynamicFieldText.FromHtmlString(String)
  fullName: Business.Model.DynamicFieldText.FromHtmlString(System.String)
  type: Method
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FromHtmlString
    path: ../Business/Model/DynamicField.cs
    startLine: 161
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public override void FromHtmlString(string html)
    parameters:
    - id: html
      type: System.String
    content.vb: Public Overrides Sub FromHtmlString(html As String)
  overridden: Business.Model.DynamicField.FromHtmlString(System.String)
  overload: Business.Model.DynamicFieldText.FromHtmlString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Business.Model.DynamicFieldText.ToHtmlString
  commentId: M:Business.Model.DynamicFieldText.ToHtmlString
  id: ToHtmlString
  parent: Business.Model.DynamicFieldText
  langs:
  - csharp
  - vb
  name: ToHtmlString()
  nameWithType: DynamicFieldText.ToHtmlString()
  fullName: Business.Model.DynamicFieldText.ToHtmlString()
  type: Method
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ToHtmlString
    path: ../Business/Model/DynamicField.cs
    startLine: 166
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public override string ToHtmlString()
    return:
      type: System.String
    content.vb: Public Overrides Function ToHtmlString As String
  overridden: Business.Model.DynamicField.ToHtmlString
  overload: Business.Model.DynamicFieldText.ToHtmlString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Business.Model.DynamicFieldText.FromJson(Newtonsoft.Json.Linq.JObject)
  commentId: M:Business.Model.DynamicFieldText.FromJson(Newtonsoft.Json.Linq.JObject)
  id: FromJson(Newtonsoft.Json.Linq.JObject)
  parent: Business.Model.DynamicFieldText
  langs:
  - csharp
  - vb
  name: FromJson(JObject)
  nameWithType: DynamicFieldText.FromJson(JObject)
  fullName: Business.Model.DynamicFieldText.FromJson(Newtonsoft.Json.Linq.JObject)
  type: Method
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FromJson
    path: ../Business/Model/DynamicField.cs
    startLine: 171
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public override void FromJson(JObject json)
    parameters:
    - id: json
      type: Newtonsoft.Json.Linq.JObject
    content.vb: Public Overrides Sub FromJson(json As JObject)
  overridden: Business.Model.DynamicField.FromJson(Newtonsoft.Json.Linq.JObject)
  overload: Business.Model.DynamicFieldText.FromJson*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Business.Model.DynamicFieldText.ToJsonImpl
  commentId: M:Business.Model.DynamicFieldText.ToJsonImpl
  id: ToJsonImpl
  parent: Business.Model.DynamicFieldText
  langs:
  - csharp
  - vb
  name: ToJsonImpl()
  nameWithType: DynamicFieldText.ToJsonImpl()
  fullName: Business.Model.DynamicFieldText.ToJsonImpl()
  type: Method
  source:
    remote:
      path: Business/Model/DynamicField.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ToJsonImpl
    path: ../Business/Model/DynamicField.cs
    startLine: 176
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: protected override JObject ToJsonImpl()
    return:
      type: Newtonsoft.Json.Linq.JObject
    content.vb: Protected Overrides Function ToJsonImpl As JObject
  overridden: Business.Model.DynamicField.ToJsonImpl
  overload: Business.Model.DynamicFieldText.ToJsonImpl*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Business.Model.DynamicField
  commentId: T:Business.Model.DynamicField
  parent: Business.Model
  name: DynamicField
  nameWithType: DynamicField
  fullName: Business.Model.DynamicField
- uid: Business.Model.DynamicField.TYPE_KEY
  commentId: F:Business.Model.DynamicField.TYPE_KEY
  parent: Business.Model.DynamicField
  name: TYPE_KEY
  nameWithType: DynamicField.TYPE_KEY
  fullName: Business.Model.DynamicField.TYPE_KEY
- uid: Business.Model.DynamicField.FieldType
  commentId: P:Business.Model.DynamicField.FieldType
  parent: Business.Model.DynamicField
  name: FieldType
  nameWithType: DynamicField.FieldType
  fullName: Business.Model.DynamicField.FieldType
- uid: Business.Model.DynamicField.ToJson
  commentId: M:Business.Model.DynamicField.ToJson
  parent: Business.Model.DynamicField
  name: ToJson()
  nameWithType: DynamicField.ToJson()
  fullName: Business.Model.DynamicField.ToJson()
  spec.csharp:
  - uid: Business.Model.DynamicField.ToJson
    name: ToJson
    nameWithType: DynamicField.ToJson
    fullName: Business.Model.DynamicField.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Business.Model.DynamicField.ToJson
    name: ToJson
    nameWithType: DynamicField.ToJson
    fullName: Business.Model.DynamicField.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model.DynamicFieldText.Text*
  commentId: Overload:Business.Model.DynamicFieldText.Text
  name: Text
  nameWithType: DynamicFieldText.Text
  fullName: Business.Model.DynamicFieldText.Text
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Business.Model.DynamicFieldText.#ctor*
  commentId: Overload:Business.Model.DynamicFieldText.#ctor
  name: DynamicFieldText
  nameWithType: DynamicFieldText.DynamicFieldText
  fullName: Business.Model.DynamicFieldText.DynamicFieldText
- uid: Business.Model.DynamicField.FromHtmlString(System.String)
  commentId: M:Business.Model.DynamicField.FromHtmlString(System.String)
  parent: Business.Model.DynamicField
  isExternal: true
  name: FromHtmlString(String)
  nameWithType: DynamicField.FromHtmlString(String)
  fullName: Business.Model.DynamicField.FromHtmlString(System.String)
  spec.csharp:
  - uid: Business.Model.DynamicField.FromHtmlString(System.String)
    name: FromHtmlString
    nameWithType: DynamicField.FromHtmlString
    fullName: Business.Model.DynamicField.FromHtmlString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Business.Model.DynamicField.FromHtmlString(System.String)
    name: FromHtmlString
    nameWithType: DynamicField.FromHtmlString
    fullName: Business.Model.DynamicField.FromHtmlString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.DynamicFieldText.FromHtmlString*
  commentId: Overload:Business.Model.DynamicFieldText.FromHtmlString
  name: FromHtmlString
  nameWithType: DynamicFieldText.FromHtmlString
  fullName: Business.Model.DynamicFieldText.FromHtmlString
- uid: Business.Model.DynamicField.ToHtmlString
  commentId: M:Business.Model.DynamicField.ToHtmlString
  parent: Business.Model.DynamicField
  name: ToHtmlString()
  nameWithType: DynamicField.ToHtmlString()
  fullName: Business.Model.DynamicField.ToHtmlString()
  spec.csharp:
  - uid: Business.Model.DynamicField.ToHtmlString
    name: ToHtmlString
    nameWithType: DynamicField.ToHtmlString
    fullName: Business.Model.DynamicField.ToHtmlString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Business.Model.DynamicField.ToHtmlString
    name: ToHtmlString
    nameWithType: DynamicField.ToHtmlString
    fullName: Business.Model.DynamicField.ToHtmlString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.DynamicFieldText.ToHtmlString*
  commentId: Overload:Business.Model.DynamicFieldText.ToHtmlString
  name: ToHtmlString
  nameWithType: DynamicFieldText.ToHtmlString
  fullName: Business.Model.DynamicFieldText.ToHtmlString
- uid: Business.Model.DynamicField.FromJson(Newtonsoft.Json.Linq.JObject)
  commentId: M:Business.Model.DynamicField.FromJson(Newtonsoft.Json.Linq.JObject)
  parent: Business.Model.DynamicField
  isExternal: true
  name: FromJson(JObject)
  nameWithType: DynamicField.FromJson(JObject)
  fullName: Business.Model.DynamicField.FromJson(Newtonsoft.Json.Linq.JObject)
  spec.csharp:
  - uid: Business.Model.DynamicField.FromJson(Newtonsoft.Json.Linq.JObject)
    name: FromJson
    nameWithType: DynamicField.FromJson
    fullName: Business.Model.DynamicField.FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Business.Model.DynamicField.FromJson(Newtonsoft.Json.Linq.JObject)
    name: FromJson
    nameWithType: DynamicField.FromJson
    fullName: Business.Model.DynamicField.FromJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: Newtonsoft.Json.Linq.JObject
    name: JObject
    nameWithType: JObject
    fullName: Newtonsoft.Json.Linq.JObject
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.DynamicFieldText.FromJson*
  commentId: Overload:Business.Model.DynamicFieldText.FromJson
  name: FromJson
  nameWithType: DynamicFieldText.FromJson
  fullName: Business.Model.DynamicFieldText.FromJson
- uid: Newtonsoft.Json.Linq.JObject
  commentId: T:Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  nameWithType: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: Newtonsoft.Json.Linq
  commentId: N:Newtonsoft.Json.Linq
  isExternal: true
  name: Newtonsoft.Json.Linq
  nameWithType: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Business.Model.DynamicField.ToJsonImpl
  commentId: M:Business.Model.DynamicField.ToJsonImpl
  parent: Business.Model.DynamicField
  name: ToJsonImpl()
  nameWithType: DynamicField.ToJsonImpl()
  fullName: Business.Model.DynamicField.ToJsonImpl()
  spec.csharp:
  - uid: Business.Model.DynamicField.ToJsonImpl
    name: ToJsonImpl
    nameWithType: DynamicField.ToJsonImpl
    fullName: Business.Model.DynamicField.ToJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Business.Model.DynamicField.ToJsonImpl
    name: ToJsonImpl
    nameWithType: DynamicField.ToJsonImpl
    fullName: Business.Model.DynamicField.ToJsonImpl
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.DynamicFieldText.ToJsonImpl*
  commentId: Overload:Business.Model.DynamicFieldText.ToJsonImpl
  name: ToJsonImpl
  nameWithType: DynamicFieldText.ToJsonImpl
  fullName: Business.Model.DynamicFieldText.ToJsonImpl
