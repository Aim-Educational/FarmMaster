### YamlMime:ManagedReference
items:
- uid: Business.Model.Contact
  commentId: T:Business.Model.Contact
  id: Contact
  parent: Business.Model
  children:
  - Business.Model.Contact.ContactId
  - Business.Model.Contact.ContactType
  - Business.Model.Contact.EmailAddresses
  - Business.Model.Contact.FirstName
  - Business.Model.Contact.FirstNameWithAbbreviatedLastName
  - Business.Model.Contact.FullName
  - Business.Model.Contact.GetRelationships(Business.Model.FarmMasterContext)
  - Business.Model.Contact.IsAnonymous
  - Business.Model.Contact.LastName
  - Business.Model.Contact.PhoneNumbers
  - Business.Model.Contact.ShortName
  - Business.Model.Contact.Timestamp
  - Business.Model.Contact.Tokens
  langs:
  - csharp
  - vb
  name: Contact
  nameWithType: Contact
  fullName: Business.Model.Contact
  type: Class
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Contact
    path: ../Business/Model/Contact.cs
    startLine: 10
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public class Contact
    content.vb: Public Class Contact
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Business.Model.Contact.ContactId
  commentId: P:Business.Model.Contact.ContactId
  id: ContactId
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: ContactId
  nameWithType: Contact.ContactId
  fullName: Business.Model.Contact.ContactId
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ContactId
    path: ../Business/Model/Contact.cs
    startLine: 20
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Key]

      public int ContactId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Key>

      Public Property ContactId As Integer
  overload: Business.Model.Contact.ContactId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.KeyAttribute
    ctor: System.ComponentModel.DataAnnotations.KeyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.FullName
  commentId: P:Business.Model.Contact.FullName
  id: FullName
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: FullName
  nameWithType: Contact.FullName
  fullName: Business.Model.Contact.FullName
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FullName
    path: ../Business/Model/Contact.cs
    startLine: 23
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [StringLength(150)]

      public string FullName { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <StringLength(150)>

      Public Property FullName As String
  overload: Business.Model.Contact.FullName*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 150
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.ContactType
  commentId: P:Business.Model.Contact.ContactType
  id: ContactType
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: ContactType
  nameWithType: Contact.ContactType
  fullName: Business.Model.Contact.ContactType
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ContactType
    path: ../Business/Model/Contact.cs
    startLine: 27
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public Contact.Type ContactType { get; set; }
    parameters: []
    return:
      type: Business.Model.Contact.Type
    content.vb: >-
      <Required>

      Public Property ContactType As Contact.Type
  overload: Business.Model.Contact.ContactType*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.IsAnonymous
  commentId: P:Business.Model.Contact.IsAnonymous
  id: IsAnonymous
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: IsAnonymous
  nameWithType: Contact.IsAnonymous
  fullName: Business.Model.Contact.IsAnonymous
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsAnonymous
    path: ../Business/Model/Contact.cs
    startLine: 30
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public bool IsAnonymous { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <Required>

      Public Property IsAnonymous As Boolean
  overload: Business.Model.Contact.IsAnonymous*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.Timestamp
  commentId: P:Business.Model.Contact.Timestamp
  id: Timestamp
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: Contact.Timestamp
  fullName: Business.Model.Contact.Timestamp
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Timestamp
    path: ../Business/Model/Contact.cs
    startLine: 33
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Timestamp]

      public byte[] Timestamp { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: >-
      <Timestamp>

      Public Property Timestamp As Byte()
  overload: Business.Model.Contact.Timestamp*
  attributes:
  - type: System.ComponentModel.DataAnnotations.TimestampAttribute
    ctor: System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.PhoneNumbers
  commentId: P:Business.Model.Contact.PhoneNumbers
  id: PhoneNumbers
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: PhoneNumbers
  nameWithType: Contact.PhoneNumbers
  fullName: Business.Model.Contact.PhoneNumbers
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: PhoneNumbers
    path: ../Business/Model/Contact.cs
    startLine: 36
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<Telephone> PhoneNumbers { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.Telephone}
    content.vb: Public Property PhoneNumbers As IEnumerable(Of Telephone)
  overload: Business.Model.Contact.PhoneNumbers*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.EmailAddresses
  commentId: P:Business.Model.Contact.EmailAddresses
  id: EmailAddresses
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: EmailAddresses
  nameWithType: Contact.EmailAddresses
  fullName: Business.Model.Contact.EmailAddresses
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: EmailAddresses
    path: ../Business/Model/Contact.cs
    startLine: 37
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<Email> EmailAddresses { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.Email}
    content.vb: Public Property EmailAddresses As IEnumerable(Of Email)
  overload: Business.Model.Contact.EmailAddresses*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.Tokens
  commentId: P:Business.Model.Contact.Tokens
  id: Tokens
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: Tokens
  nameWithType: Contact.Tokens
  fullName: Business.Model.Contact.Tokens
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Tokens
    path: ../Business/Model/Contact.cs
    startLine: 38
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<ContactToken> Tokens { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.ContactToken}
    content.vb: Public Property Tokens As IEnumerable(Of ContactToken)
  overload: Business.Model.Contact.Tokens*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.GetRelationships(Business.Model.FarmMasterContext)
  commentId: M:Business.Model.Contact.GetRelationships(Business.Model.FarmMasterContext)
  id: GetRelationships(Business.Model.FarmMasterContext)
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: GetRelationships(FarmMasterContext)
  nameWithType: Contact.GetRelationships(FarmMasterContext)
  fullName: Business.Model.Contact.GetRelationships(Business.Model.FarmMasterContext)
  type: Method
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: GetRelationships
    path: ../Business/Model/Contact.cs
    startLine: 41
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IQueryable<MapContactRelationship> GetRelationships(FarmMasterContext context)
    parameters:
    - id: context
      type: Business.Model.FarmMasterContext
    return:
      type: System.Linq.IQueryable{Business.Model.MapContactRelationship}
    content.vb: Public Function GetRelationships(context As FarmMasterContext) As IQueryable(Of MapContactRelationship)
  overload: Business.Model.Contact.GetRelationships*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Business.Model.Contact.FirstName
  commentId: P:Business.Model.Contact.FirstName
  id: FirstName
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: FirstName
  nameWithType: Contact.FirstName
  fullName: Business.Model.Contact.FirstName
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FirstName
    path: ../Business/Model/Contact.cs
    startLine: 50
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public string FirstName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property FirstName As String
  overload: Business.Model.Contact.FirstName*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Business.Model.Contact.LastName
  commentId: P:Business.Model.Contact.LastName
  id: LastName
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: LastName
  nameWithType: Contact.LastName
  fullName: Business.Model.Contact.LastName
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: LastName
    path: ../Business/Model/Contact.cs
    startLine: 54
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public string LastName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property LastName As String
  overload: Business.Model.Contact.LastName*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Business.Model.Contact.ShortName
  commentId: P:Business.Model.Contact.ShortName
  id: ShortName
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: ShortName
  nameWithType: Contact.ShortName
  fullName: Business.Model.Contact.ShortName
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ShortName
    path: ../Business/Model/Contact.cs
    startLine: 57
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public string ShortName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property ShortName As String
  overload: Business.Model.Contact.ShortName*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Business.Model.Contact.FirstNameWithAbbreviatedLastName
  commentId: P:Business.Model.Contact.FirstNameWithAbbreviatedLastName
  id: FirstNameWithAbbreviatedLastName
  parent: Business.Model.Contact
  langs:
  - csharp
  - vb
  name: FirstNameWithAbbreviatedLastName
  nameWithType: Contact.FirstNameWithAbbreviatedLastName
  fullName: Business.Model.Contact.FirstNameWithAbbreviatedLastName
  type: Property
  source:
    remote:
      path: Business/Model/Contact.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FirstNameWithAbbreviatedLastName
    path: ../Business/Model/Contact.cs
    startLine: 62
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public string FirstNameWithAbbreviatedLastName { get; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property FirstNameWithAbbreviatedLastName As String
  overload: Business.Model.Contact.FirstNameWithAbbreviatedLastName*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model.Contact.ContactId*
  commentId: Overload:Business.Model.Contact.ContactId
  name: ContactId
  nameWithType: Contact.ContactId
  fullName: Business.Model.Contact.ContactId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Business.Model.Contact.FullName*
  commentId: Overload:Business.Model.Contact.FullName
  name: FullName
  nameWithType: Contact.FullName
  fullName: Business.Model.Contact.FullName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Business.Model.Contact.ContactType*
  commentId: Overload:Business.Model.Contact.ContactType
  name: ContactType
  nameWithType: Contact.ContactType
  fullName: Business.Model.Contact.ContactType
- uid: Business.Model.Contact.Type
  commentId: T:Business.Model.Contact.Type
  parent: Business.Model
  name: Contact.Type
  nameWithType: Contact.Type
  fullName: Business.Model.Contact.Type
- uid: Business.Model.Contact.IsAnonymous*
  commentId: Overload:Business.Model.Contact.IsAnonymous
  name: IsAnonymous
  nameWithType: Contact.IsAnonymous
  fullName: Business.Model.Contact.IsAnonymous
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Business.Model.Contact.Timestamp*
  commentId: Overload:Business.Model.Contact.Timestamp
  name: Timestamp
  nameWithType: Contact.Timestamp
  fullName: Business.Model.Contact.Timestamp
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Business.Model.Contact.PhoneNumbers*
  commentId: Overload:Business.Model.Contact.PhoneNumbers
  name: PhoneNumbers
  nameWithType: Contact.PhoneNumbers
  fullName: Business.Model.Contact.PhoneNumbers
- uid: System.Collections.Generic.IEnumerable{Business.Model.Telephone}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.Telephone}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Telephone>
  nameWithType: IEnumerable<Telephone>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.Telephone>
  nameWithType.vb: IEnumerable(Of Telephone)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.Telephone)
  name.vb: IEnumerable(Of Telephone)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.Telephone
    name: Telephone
    nameWithType: Telephone
    fullName: Business.Model.Telephone
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.Telephone
    name: Telephone
    nameWithType: Telephone
    fullName: Business.Model.Telephone
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Business.Model.Contact.EmailAddresses*
  commentId: Overload:Business.Model.Contact.EmailAddresses
  name: EmailAddresses
  nameWithType: Contact.EmailAddresses
  fullName: Business.Model.Contact.EmailAddresses
- uid: System.Collections.Generic.IEnumerable{Business.Model.Email}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.Email}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Email>
  nameWithType: IEnumerable<Email>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.Email>
  nameWithType.vb: IEnumerable(Of Email)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.Email)
  name.vb: IEnumerable(Of Email)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.Email
    name: Email
    nameWithType: Email
    fullName: Business.Model.Email
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.Email
    name: Email
    nameWithType: Email
    fullName: Business.Model.Email
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Contact.Tokens*
  commentId: Overload:Business.Model.Contact.Tokens
  name: Tokens
  nameWithType: Contact.Tokens
  fullName: Business.Model.Contact.Tokens
- uid: System.Collections.Generic.IEnumerable{Business.Model.ContactToken}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.ContactToken}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<ContactToken>
  nameWithType: IEnumerable<ContactToken>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.ContactToken>
  nameWithType.vb: IEnumerable(Of ContactToken)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.ContactToken)
  name.vb: IEnumerable(Of ContactToken)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.ContactToken
    name: ContactToken
    nameWithType: ContactToken
    fullName: Business.Model.ContactToken
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.ContactToken
    name: ContactToken
    nameWithType: ContactToken
    fullName: Business.Model.ContactToken
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Contact.GetRelationships*
  commentId: Overload:Business.Model.Contact.GetRelationships
  name: GetRelationships
  nameWithType: Contact.GetRelationships
  fullName: Business.Model.Contact.GetRelationships
- uid: Business.Model.FarmMasterContext
  commentId: T:Business.Model.FarmMasterContext
  parent: Business.Model
  name: FarmMasterContext
  nameWithType: FarmMasterContext
  fullName: Business.Model.FarmMasterContext
- uid: System.Linq.IQueryable{Business.Model.MapContactRelationship}
  commentId: T:System.Linq.IQueryable{Business.Model.MapContactRelationship}
  parent: System.Linq
  definition: System.Linq.IQueryable`1
  name: IQueryable<MapContactRelationship>
  nameWithType: IQueryable<MapContactRelationship>
  fullName: System.Linq.IQueryable<Business.Model.MapContactRelationship>
  nameWithType.vb: IQueryable(Of MapContactRelationship)
  fullName.vb: System.Linq.IQueryable(Of Business.Model.MapContactRelationship)
  name.vb: IQueryable(Of MapContactRelationship)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.MapContactRelationship
    name: MapContactRelationship
    nameWithType: MapContactRelationship
    fullName: Business.Model.MapContactRelationship
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.MapContactRelationship
    name: MapContactRelationship
    nameWithType: MapContactRelationship
    fullName: Business.Model.MapContactRelationship
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq.IQueryable`1
  commentId: T:System.Linq.IQueryable`1
  isExternal: true
  name: IQueryable<T>
  nameWithType: IQueryable<T>
  fullName: System.Linq.IQueryable<T>
  nameWithType.vb: IQueryable(Of T)
  fullName.vb: System.Linq.IQueryable(Of T)
  name.vb: IQueryable(Of T)
  spec.csharp:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Linq.IQueryable`1
    name: IQueryable
    nameWithType: IQueryable
    fullName: System.Linq.IQueryable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Linq
  commentId: N:System.Linq
  isExternal: true
  name: System.Linq
  nameWithType: System.Linq
  fullName: System.Linq
- uid: Business.Model.Contact.FirstName*
  commentId: Overload:Business.Model.Contact.FirstName
  name: FirstName
  nameWithType: Contact.FirstName
  fullName: Business.Model.Contact.FirstName
- uid: Business.Model.Contact.LastName*
  commentId: Overload:Business.Model.Contact.LastName
  name: LastName
  nameWithType: Contact.LastName
  fullName: Business.Model.Contact.LastName
- uid: Business.Model.Contact.ShortName*
  commentId: Overload:Business.Model.Contact.ShortName
  name: ShortName
  nameWithType: Contact.ShortName
  fullName: Business.Model.Contact.ShortName
- uid: Business.Model.Contact.FirstNameWithAbbreviatedLastName*
  commentId: Overload:Business.Model.Contact.FirstNameWithAbbreviatedLastName
  name: FirstNameWithAbbreviatedLastName
  nameWithType: Contact.FirstNameWithAbbreviatedLastName
  fullName: Business.Model.Contact.FirstNameWithAbbreviatedLastName
