### YamlMime:ManagedReference
items:
- uid: Business.Model.User
  commentId: T:Business.Model.User
  id: User
  parent: Business.Model
  children:
  - Business.Model.User.Contact
  - Business.Model.User.ContactId
  - Business.Model.User.Role
  - Business.Model.User.RoleId
  - Business.Model.User.Timestamp
  - Business.Model.User.UserId
  - Business.Model.User.UserLoginInfo
  - Business.Model.User.UserLoginInfoId
  - Business.Model.User.UserPrivacy
  - Business.Model.User.UserPrivacyId
  langs:
  - csharp
  - vb
  name: User
  nameWithType: User
  fullName: Business.Model.User
  type: Class
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: User
    path: ../Business/Model/User.cs
    startLine: 7
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public class User
    content.vb: Public Class User
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Business.Model.User.UserId
  commentId: P:Business.Model.User.UserId
  id: UserId
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: UserId
  nameWithType: User.UserId
  fullName: Business.Model.User.UserId
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: UserId
    path: ../Business/Model/User.cs
    startLine: 9
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Key]

      public int UserId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Key>

      Public Property UserId As Integer
  overload: Business.Model.User.UserId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.KeyAttribute
    ctor: System.ComponentModel.DataAnnotations.KeyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.ContactId
  commentId: P:Business.Model.User.ContactId
  id: ContactId
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: ContactId
  nameWithType: User.ContactId
  fullName: Business.Model.User.ContactId
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ContactId
    path: ../Business/Model/User.cs
    startLine: 12
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public int ContactId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      Public Property ContactId As Integer
  overload: Business.Model.User.ContactId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.Contact
  commentId: P:Business.Model.User.Contact
  id: Contact
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: Contact
  nameWithType: User.Contact
  fullName: Business.Model.User.Contact
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Contact
    path: ../Business/Model/User.cs
    startLine: 14
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Contact Contact { get; set; }
    parameters: []
    return:
      type: Business.Model.Contact
    content.vb: Public Property Contact As Contact
  overload: Business.Model.User.Contact*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.RoleId
  commentId: P:Business.Model.User.RoleId
  id: RoleId
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: RoleId
  nameWithType: User.RoleId
  fullName: Business.Model.User.RoleId
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: RoleId
    path: ../Business/Model/User.cs
    startLine: 16
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public int? RoleId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property RoleId As Integer?
  overload: Business.Model.User.RoleId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.Role
  commentId: P:Business.Model.User.Role
  id: Role
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: Role
  nameWithType: User.Role
  fullName: Business.Model.User.Role
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Role
    path: ../Business/Model/User.cs
    startLine: 17
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Role Role { get; set; }
    parameters: []
    return:
      type: Business.Model.Role
    content.vb: Public Property Role As Role
  overload: Business.Model.User.Role*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.UserLoginInfoId
  commentId: P:Business.Model.User.UserLoginInfoId
  id: UserLoginInfoId
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: UserLoginInfoId
  nameWithType: User.UserLoginInfoId
  fullName: Business.Model.User.UserLoginInfoId
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: UserLoginInfoId
    path: ../Business/Model/User.cs
    startLine: 19
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public int UserLoginInfoId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      Public Property UserLoginInfoId As Integer
  overload: Business.Model.User.UserLoginInfoId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.UserLoginInfo
  commentId: P:Business.Model.User.UserLoginInfo
  id: UserLoginInfo
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: UserLoginInfo
  nameWithType: User.UserLoginInfo
  fullName: Business.Model.User.UserLoginInfo
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: UserLoginInfo
    path: ../Business/Model/User.cs
    startLine: 21
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public UserLoginInfo UserLoginInfo { get; set; }
    parameters: []
    return:
      type: Business.Model.UserLoginInfo
    content.vb: Public Property UserLoginInfo As UserLoginInfo
  overload: Business.Model.User.UserLoginInfo*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.UserPrivacyId
  commentId: P:Business.Model.User.UserPrivacyId
  id: UserPrivacyId
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: UserPrivacyId
  nameWithType: User.UserPrivacyId
  fullName: Business.Model.User.UserPrivacyId
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: UserPrivacyId
    path: ../Business/Model/User.cs
    startLine: 23
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public int UserPrivacyId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      Public Property UserPrivacyId As Integer
  overload: Business.Model.User.UserPrivacyId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.UserPrivacy
  commentId: P:Business.Model.User.UserPrivacy
  id: UserPrivacy
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: UserPrivacy
  nameWithType: User.UserPrivacy
  fullName: Business.Model.User.UserPrivacy
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: UserPrivacy
    path: ../Business/Model/User.cs
    startLine: 25
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public UserPrivacy UserPrivacy { get; set; }
    parameters: []
    return:
      type: Business.Model.UserPrivacy
    content.vb: Public Property UserPrivacy As UserPrivacy
  overload: Business.Model.User.UserPrivacy*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.User.Timestamp
  commentId: P:Business.Model.User.Timestamp
  id: Timestamp
  parent: Business.Model.User
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: User.Timestamp
  fullName: Business.Model.User.Timestamp
  type: Property
  source:
    remote:
      path: Business/Model/User.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Timestamp
    path: ../Business/Model/User.cs
    startLine: 27
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Timestamp]

      public byte[] Timestamp { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: >-
      <Timestamp>

      Public Property Timestamp As Byte()
  overload: Business.Model.User.Timestamp*
  attributes:
  - type: System.ComponentModel.DataAnnotations.TimestampAttribute
    ctor: System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model.User.UserId*
  commentId: Overload:Business.Model.User.UserId
  name: UserId
  nameWithType: User.UserId
  fullName: Business.Model.User.UserId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Business.Model.User.ContactId*
  commentId: Overload:Business.Model.User.ContactId
  name: ContactId
  nameWithType: User.ContactId
  fullName: Business.Model.User.ContactId
- uid: Business.Model.User.Contact*
  commentId: Overload:Business.Model.User.Contact
  name: Contact
  nameWithType: User.Contact
  fullName: Business.Model.User.Contact
- uid: Business.Model.Contact
  commentId: T:Business.Model.Contact
  parent: Business.Model
  name: Contact
  nameWithType: Contact
  fullName: Business.Model.Contact
- uid: Business.Model.User.RoleId*
  commentId: Overload:Business.Model.User.RoleId
  name: RoleId
  nameWithType: User.RoleId
  fullName: Business.Model.User.RoleId
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.User.Role*
  commentId: Overload:Business.Model.User.Role
  name: Role
  nameWithType: User.Role
  fullName: Business.Model.User.Role
- uid: Business.Model.Role
  commentId: T:Business.Model.Role
  parent: Business.Model
  name: Role
  nameWithType: Role
  fullName: Business.Model.Role
- uid: Business.Model.User.UserLoginInfoId*
  commentId: Overload:Business.Model.User.UserLoginInfoId
  name: UserLoginInfoId
  nameWithType: User.UserLoginInfoId
  fullName: Business.Model.User.UserLoginInfoId
- uid: Business.Model.User.UserLoginInfo*
  commentId: Overload:Business.Model.User.UserLoginInfo
  name: UserLoginInfo
  nameWithType: User.UserLoginInfo
  fullName: Business.Model.User.UserLoginInfo
- uid: Business.Model.UserLoginInfo
  commentId: T:Business.Model.UserLoginInfo
  parent: Business.Model
  name: UserLoginInfo
  nameWithType: UserLoginInfo
  fullName: Business.Model.UserLoginInfo
- uid: Business.Model.User.UserPrivacyId*
  commentId: Overload:Business.Model.User.UserPrivacyId
  name: UserPrivacyId
  nameWithType: User.UserPrivacyId
  fullName: Business.Model.User.UserPrivacyId
- uid: Business.Model.User.UserPrivacy*
  commentId: Overload:Business.Model.User.UserPrivacy
  name: UserPrivacy
  nameWithType: User.UserPrivacy
  fullName: Business.Model.User.UserPrivacy
- uid: Business.Model.UserPrivacy
  commentId: T:Business.Model.UserPrivacy
  parent: Business.Model
  name: UserPrivacy
  nameWithType: UserPrivacy
  fullName: Business.Model.UserPrivacy
- uid: Business.Model.User.Timestamp*
  commentId: Overload:Business.Model.User.Timestamp
  name: Timestamp
  nameWithType: User.Timestamp
  fullName: Business.Model.User.Timestamp
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
