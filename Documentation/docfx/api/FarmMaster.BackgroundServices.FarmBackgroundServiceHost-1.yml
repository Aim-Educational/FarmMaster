### YamlMime:ManagedReference
items:
- uid: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1
  commentId: T:FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1
  id: FarmBackgroundServiceHost`1
  parent: FarmMaster.BackgroundServices
  children:
  - FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Logging.ILogger{FarmMaster.BackgroundServices.FarmBackgroundServiceHost{`0}},Microsoft.Extensions.Hosting.IApplicationLifetime)
  - FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.ExecuteAsync(System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: FarmBackgroundServiceHost<T>
  nameWithType: FarmBackgroundServiceHost<T>
  fullName: FarmMaster.BackgroundServices.FarmBackgroundServiceHost<T>
  type: Class
  source:
    remote:
      path: FarmMaster/BackgroundServices/FarmBackgroundServiceHost.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: FarmBackgroundServiceHost
    path: BackgroundServices/FarmBackgroundServiceHost.cs
    startLine: 26
  assemblies:
  - FarmMaster
  namespace: FarmMaster.BackgroundServices
  syntax:
    content: 'public class FarmBackgroundServiceHost<T> : BackgroundService, IHostedService, IDisposable where T : IFarmBackgroundService'
    typeParameters:
    - id: T
    content.vb: >-
      Public Class FarmBackgroundServiceHost(Of T As IFarmBackgroundService)

          Inherits BackgroundService

          Implements IHostedService, IDisposable
  inheritance:
  - System.Object
  - Microsoft.Extensions.Hosting.BackgroundService
  implements:
  - Microsoft.Extensions.Hosting.IHostedService
  - System.IDisposable
  inheritedMembers:
  - Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken)
  - Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken)
  - Microsoft.Extensions.Hosting.BackgroundService.Dispose
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  nameWithType.vb: FarmBackgroundServiceHost(Of T)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: FarmMaster.BackgroundServices.FarmBackgroundServiceHost(Of T)
  name.vb: FarmBackgroundServiceHost(Of T)
- uid: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Logging.ILogger{FarmMaster.BackgroundServices.FarmBackgroundServiceHost{`0}},Microsoft.Extensions.Hosting.IApplicationLifetime)
  commentId: M:FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Logging.ILogger{FarmMaster.BackgroundServices.FarmBackgroundServiceHost{`0}},Microsoft.Extensions.Hosting.IApplicationLifetime)
  id: '#ctor(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory,Microsoft.Extensions.Logging.ILogger{FarmMaster.BackgroundServices.FarmBackgroundServiceHost{`0}},Microsoft.Extensions.Hosting.IApplicationLifetime)'
  parent: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1
  langs:
  - csharp
  - vb
  name: FarmBackgroundServiceHost(IServiceScopeFactory, ILogger<FarmBackgroundServiceHost<T>>, IApplicationLifetime)
  nameWithType: FarmBackgroundServiceHost<T>.FarmBackgroundServiceHost(IServiceScopeFactory, ILogger<FarmBackgroundServiceHost<T>>, IApplicationLifetime)
  fullName: FarmMaster.BackgroundServices.FarmBackgroundServiceHost<T>.FarmBackgroundServiceHost(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory, Microsoft.Extensions.Logging.ILogger<FarmMaster.BackgroundServices.FarmBackgroundServiceHost<T>>, Microsoft.Extensions.Hosting.IApplicationLifetime)
  type: Constructor
  source:
    remote:
      path: FarmMaster/BackgroundServices/FarmBackgroundServiceHost.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: .ctor
    path: BackgroundServices/FarmBackgroundServiceHost.cs
    startLine: 33
  assemblies:
  - FarmMaster
  namespace: FarmMaster.BackgroundServices
  syntax:
    content: public FarmBackgroundServiceHost(IServiceScopeFactory serviceScope, ILogger<FarmBackgroundServiceHost<T>> logger, IApplicationLifetime lifetime)
    parameters:
    - id: serviceScope
      type: Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
    - id: logger
      type: Microsoft.Extensions.Logging.ILogger{FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1}
    - id: lifetime
      type: Microsoft.Extensions.Hosting.IApplicationLifetime
    content.vb: Public Sub New(serviceScope As IServiceScopeFactory, logger As ILogger(Of FarmBackgroundServiceHost(Of T)), lifetime As IApplicationLifetime)
  overload: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.#ctor*
  nameWithType.vb: FarmBackgroundServiceHost(Of T).FarmBackgroundServiceHost(IServiceScopeFactory, ILogger(Of FarmBackgroundServiceHost(Of T)), IApplicationLifetime)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: FarmMaster.BackgroundServices.FarmBackgroundServiceHost(Of T).FarmBackgroundServiceHost(Microsoft.Extensions.DependencyInjection.IServiceScopeFactory, Microsoft.Extensions.Logging.ILogger(Of FarmMaster.BackgroundServices.FarmBackgroundServiceHost(Of T)), Microsoft.Extensions.Hosting.IApplicationLifetime)
  name.vb: FarmBackgroundServiceHost(IServiceScopeFactory, ILogger(Of FarmBackgroundServiceHost(Of T)), IApplicationLifetime)
- uid: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.ExecuteAsync(System.Threading.CancellationToken)
  id: ExecuteAsync(System.Threading.CancellationToken)
  parent: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1
  langs:
  - csharp
  - vb
  name: ExecuteAsync(CancellationToken)
  nameWithType: FarmBackgroundServiceHost<T>.ExecuteAsync(CancellationToken)
  fullName: FarmMaster.BackgroundServices.FarmBackgroundServiceHost<T>.ExecuteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: FarmMaster/BackgroundServices/FarmBackgroundServiceHost.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ExecuteAsync
    path: BackgroundServices/FarmBackgroundServiceHost.cs
    startLine: 55
  assemblies:
  - FarmMaster
  namespace: FarmMaster.BackgroundServices
  syntax:
    content: protected override Task ExecuteAsync(CancellationToken stoppingToken)
    parameters:
    - id: stoppingToken
      type: System.Threading.CancellationToken
    return:
      type: System.Threading.Tasks.Task
    content.vb: Protected Overrides Function ExecuteAsync(stoppingToken As CancellationToken) As Task
  overridden: Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  overload: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.ExecuteAsync*
  nameWithType.vb: FarmBackgroundServiceHost(Of T).ExecuteAsync(CancellationToken)
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
  fullName.vb: FarmMaster.BackgroundServices.FarmBackgroundServiceHost(Of T).ExecuteAsync(System.Threading.CancellationToken)
references:
- uid: FarmMaster.BackgroundServices
  commentId: N:FarmMaster.BackgroundServices
  name: FarmMaster.BackgroundServices
  nameWithType: FarmMaster.BackgroundServices
  fullName: FarmMaster.BackgroundServices
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Extensions.Hosting.BackgroundService
  commentId: T:Microsoft.Extensions.Hosting.BackgroundService
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: BackgroundService
  nameWithType: BackgroundService
  fullName: Microsoft.Extensions.Hosting.BackgroundService
- uid: Microsoft.Extensions.Hosting.IHostedService
  commentId: T:Microsoft.Extensions.Hosting.IHostedService
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IHostedService
  nameWithType: IHostedService
  fullName: Microsoft.Extensions.Hosting.IHostedService
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.BackgroundService
  isExternal: true
  name: StartAsync(CancellationToken)
  nameWithType: BackgroundService.StartAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: BackgroundService.StartAsync
    fullName: Microsoft.Extensions.Hosting.BackgroundService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.StartAsync(System.Threading.CancellationToken)
    name: StartAsync
    nameWithType: BackgroundService.StartAsync
    fullName: Microsoft.Extensions.Hosting.BackgroundService.StartAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.BackgroundService
  isExternal: true
  name: StopAsync(CancellationToken)
  nameWithType: BackgroundService.StopAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: BackgroundService.StopAsync
    fullName: Microsoft.Extensions.Hosting.BackgroundService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.StopAsync(System.Threading.CancellationToken)
    name: StopAsync
    nameWithType: BackgroundService.StopAsync
    fullName: Microsoft.Extensions.Hosting.BackgroundService.StopAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.BackgroundService.Dispose
  commentId: M:Microsoft.Extensions.Hosting.BackgroundService.Dispose
  parent: Microsoft.Extensions.Hosting.BackgroundService
  isExternal: true
  name: Dispose()
  nameWithType: BackgroundService.Dispose()
  fullName: Microsoft.Extensions.Hosting.BackgroundService.Dispose()
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.Dispose
    name: Dispose
    nameWithType: BackgroundService.Dispose
    fullName: Microsoft.Extensions.Hosting.BackgroundService.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.Dispose
    name: Dispose
    nameWithType: BackgroundService.Dispose
    fullName: Microsoft.Extensions.Hosting.BackgroundService.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Extensions.Hosting
  commentId: N:Microsoft.Extensions.Hosting
  isExternal: true
  name: Microsoft.Extensions.Hosting
  nameWithType: Microsoft.Extensions.Hosting
  fullName: Microsoft.Extensions.Hosting
- uid: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.#ctor*
  commentId: Overload:FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.#ctor
  name: FarmBackgroundServiceHost
  nameWithType: FarmBackgroundServiceHost<T>.FarmBackgroundServiceHost
  fullName: FarmMaster.BackgroundServices.FarmBackgroundServiceHost<T>.FarmBackgroundServiceHost
  nameWithType.vb: FarmBackgroundServiceHost(Of T).FarmBackgroundServiceHost
  fullName.vb: FarmMaster.BackgroundServices.FarmBackgroundServiceHost(Of T).FarmBackgroundServiceHost
- uid: Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
  commentId: T:Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
  parent: Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: IServiceScopeFactory
  nameWithType: IServiceScopeFactory
  fullName: Microsoft.Extensions.DependencyInjection.IServiceScopeFactory
- uid: Microsoft.Extensions.Logging.ILogger{FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1}
  commentId: T:Microsoft.Extensions.Logging.ILogger{FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1}
  parent: Microsoft.Extensions.Logging
  definition: Microsoft.Extensions.Logging.ILogger`1
  name: ILogger<FarmBackgroundServiceHost<T>>
  nameWithType: ILogger<FarmBackgroundServiceHost<T>>
  fullName: Microsoft.Extensions.Logging.ILogger<FarmMaster.BackgroundServices.FarmBackgroundServiceHost<T>>
  nameWithType.vb: ILogger(Of FarmBackgroundServiceHost(Of T))
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of FarmMaster.BackgroundServices.FarmBackgroundServiceHost(Of T))
  name.vb: ILogger(Of FarmBackgroundServiceHost(Of T))
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1
    name: FarmBackgroundServiceHost
    nameWithType: FarmBackgroundServiceHost
    fullName: FarmMaster.BackgroundServices.FarmBackgroundServiceHost
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1
    name: FarmBackgroundServiceHost
    nameWithType: FarmBackgroundServiceHost
    fullName: FarmMaster.BackgroundServices.FarmBackgroundServiceHost
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Hosting.IApplicationLifetime
  commentId: T:Microsoft.Extensions.Hosting.IApplicationLifetime
  parent: Microsoft.Extensions.Hosting
  isExternal: true
  name: IApplicationLifetime
  nameWithType: IApplicationLifetime
  fullName: Microsoft.Extensions.Hosting.IApplicationLifetime
- uid: Microsoft.Extensions.DependencyInjection
  commentId: N:Microsoft.Extensions.DependencyInjection
  isExternal: true
  name: Microsoft.Extensions.DependencyInjection
  nameWithType: Microsoft.Extensions.DependencyInjection
  fullName: Microsoft.Extensions.DependencyInjection
- uid: Microsoft.Extensions.Logging.ILogger`1
  commentId: T:Microsoft.Extensions.Logging.ILogger`1
  isExternal: true
  name: ILogger<TCategoryName>
  nameWithType: ILogger<TCategoryName>
  fullName: Microsoft.Extensions.Logging.ILogger<TCategoryName>
  nameWithType.vb: ILogger(Of TCategoryName)
  fullName.vb: Microsoft.Extensions.Logging.ILogger(Of TCategoryName)
  name.vb: ILogger(Of TCategoryName)
  spec.csharp:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Extensions.Logging.ILogger`1
    name: ILogger
    nameWithType: ILogger
    fullName: Microsoft.Extensions.Logging.ILogger
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TCategoryName
    nameWithType: TCategoryName
    fullName: TCategoryName
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Extensions.Logging
  commentId: N:Microsoft.Extensions.Logging
  isExternal: true
  name: Microsoft.Extensions.Logging
  nameWithType: Microsoft.Extensions.Logging
  fullName: Microsoft.Extensions.Logging
- uid: Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  parent: Microsoft.Extensions.Hosting.BackgroundService
  isExternal: true
  name: ExecuteAsync(CancellationToken)
  nameWithType: BackgroundService.ExecuteAsync(CancellationToken)
  fullName: Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken)
  spec.csharp:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: BackgroundService.ExecuteAsync
    fullName: Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync(System.Threading.CancellationToken)
    name: ExecuteAsync
    nameWithType: BackgroundService.ExecuteAsync
    fullName: Microsoft.Extensions.Hosting.BackgroundService.ExecuteAsync
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Threading.CancellationToken
    name: CancellationToken
    nameWithType: CancellationToken
    fullName: System.Threading.CancellationToken
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.ExecuteAsync*
  commentId: Overload:FarmMaster.BackgroundServices.FarmBackgroundServiceHost`1.ExecuteAsync
  name: ExecuteAsync
  nameWithType: FarmBackgroundServiceHost<T>.ExecuteAsync
  fullName: FarmMaster.BackgroundServices.FarmBackgroundServiceHost<T>.ExecuteAsync
  nameWithType.vb: FarmBackgroundServiceHost(Of T).ExecuteAsync
  fullName.vb: FarmMaster.BackgroundServices.FarmBackgroundServiceHost(Of T).ExecuteAsync
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: true
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: true
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
