### YamlMime:ManagedReference
items:
- uid: Business.Model.Animal
  commentId: T:Business.Model.Animal
  id: Animal
  parent: Business.Model
  children:
  - Business.Model.Animal.AnimalId
  - Business.Model.Animal.Breeds
  - Business.Model.Animal.Characteristics
  - Business.Model.Animal.CharacteristicsId
  - Business.Model.Animal.Children
  - Business.Model.Animal.Children_DAD
  - Business.Model.Animal.Children_MUM
  - Business.Model.Animal.Dad
  - Business.Model.Animal.DadId
  - Business.Model.Animal.Groups
  - Business.Model.Animal.Holding
  - Business.Model.Animal.HoldingId
  - Business.Model.Animal.Image
  - Business.Model.Animal.ImageId
  - Business.Model.Animal.IsEndOfSystem
  - Business.Model.Animal.LifeEventEntries
  - Business.Model.Animal.Mum
  - Business.Model.Animal.MumId
  - Business.Model.Animal.Name
  - Business.Model.Animal.Owner
  - Business.Model.Animal.OwnerId
  - Business.Model.Animal.Sex
  - Business.Model.Animal.Species
  - Business.Model.Animal.SpeciesId
  - Business.Model.Animal.Tag
  - Business.Model.Animal.Timestamp
  langs:
  - csharp
  - vb
  name: Animal
  nameWithType: Animal
  fullName: Business.Model.Animal
  type: Class
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Animal
    path: ../Business/Model/Animal.cs
    startLine: 9
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public class Animal
    content.vb: Public Class Animal
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Business.Model.Animal.AnimalId
  commentId: P:Business.Model.Animal.AnimalId
  id: AnimalId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: AnimalId
  nameWithType: Animal.AnimalId
  fullName: Business.Model.Animal.AnimalId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: AnimalId
    path: ../Business/Model/Animal.cs
    startLine: 18
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Key]

      public int AnimalId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Key>

      Public Property AnimalId As Integer
  overload: Business.Model.Animal.AnimalId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.KeyAttribute
    ctor: System.ComponentModel.DataAnnotations.KeyAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Name
  commentId: P:Business.Model.Animal.Name
  id: Name
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: Animal.Name
  fullName: Business.Model.Animal.Name
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Name
    path: ../Business/Model/Animal.cs
    startLine: 21
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [StringLength(75)]

      public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <StringLength(75)>

      Public Property Name As String
  overload: Business.Model.Animal.Name*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 75
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Sex
  commentId: P:Business.Model.Animal.Sex
  id: Sex
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Sex
  nameWithType: Animal.Sex
  fullName: Business.Model.Animal.Sex
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Sex
    path: ../Business/Model/Animal.cs
    startLine: 25
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public Animal.Gender Sex { get; set; }
    parameters: []
    return:
      type: Business.Model.Animal.Gender
    content.vb: >-
      <Required>

      Public Property Sex As Animal.Gender
  overload: Business.Model.Animal.Sex*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Tag
  commentId: P:Business.Model.Animal.Tag
  id: Tag
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Tag
  nameWithType: Animal.Tag
  fullName: Business.Model.Animal.Tag
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Tag
    path: ../Business/Model/Animal.cs
    startLine: 28
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [StringLength(20)]

      public string Tag { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <StringLength(20)>

      Public Property Tag As String
  overload: Business.Model.Animal.Tag*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 20
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.OwnerId
  commentId: P:Business.Model.Animal.OwnerId
  id: OwnerId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: OwnerId
  nameWithType: Animal.OwnerId
  fullName: Business.Model.Animal.OwnerId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: OwnerId
    path: ../Business/Model/Animal.cs
    startLine: 32
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public int OwnerId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      Public Property OwnerId As Integer
  overload: Business.Model.Animal.OwnerId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Owner
  commentId: P:Business.Model.Animal.Owner
  id: Owner
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: Animal.Owner
  fullName: Business.Model.Animal.Owner
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Owner
    path: ../Business/Model/Animal.cs
    startLine: 34
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Contact Owner { get; set; }
    parameters: []
    return:
      type: Business.Model.Contact
    content.vb: Public Property Owner As Contact
  overload: Business.Model.Animal.Owner*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.SpeciesId
  commentId: P:Business.Model.Animal.SpeciesId
  id: SpeciesId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: SpeciesId
  nameWithType: Animal.SpeciesId
  fullName: Business.Model.Animal.SpeciesId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: SpeciesId
    path: ../Business/Model/Animal.cs
    startLine: 36
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public int SpeciesId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      Public Property SpeciesId As Integer
  overload: Business.Model.Animal.SpeciesId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Species
  commentId: P:Business.Model.Animal.Species
  id: Species
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Species
  nameWithType: Animal.Species
  fullName: Business.Model.Animal.Species
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Species
    path: ../Business/Model/Animal.cs
    startLine: 38
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Species Species { get; set; }
    parameters: []
    return:
      type: Business.Model.Species
    content.vb: Public Property Species As Species
  overload: Business.Model.Animal.Species*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.CharacteristicsId
  commentId: P:Business.Model.Animal.CharacteristicsId
  id: CharacteristicsId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: CharacteristicsId
  nameWithType: Animal.CharacteristicsId
  fullName: Business.Model.Animal.CharacteristicsId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: CharacteristicsId
    path: ../Business/Model/Animal.cs
    startLine: 40
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public int CharacteristicsId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      Public Property CharacteristicsId As Integer
  overload: Business.Model.Animal.CharacteristicsId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Characteristics
  commentId: P:Business.Model.Animal.Characteristics
  id: Characteristics
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Characteristics
  nameWithType: Animal.Characteristics
  fullName: Business.Model.Animal.Characteristics
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Characteristics
    path: ../Business/Model/Animal.cs
    startLine: 42
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public AnimalCharacteristicList Characteristics { get; set; }
    parameters: []
    return:
      type: Business.Model.AnimalCharacteristicList
    content.vb: Public Property Characteristics As AnimalCharacteristicList
  overload: Business.Model.Animal.Characteristics*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.ImageId
  commentId: P:Business.Model.Animal.ImageId
  id: ImageId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: ImageId
  nameWithType: Animal.ImageId
  fullName: Business.Model.Animal.ImageId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: ImageId
    path: ../Business/Model/Animal.cs
    startLine: 44
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public int? ImageId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property ImageId As Integer?
  overload: Business.Model.Animal.ImageId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Image
  commentId: P:Business.Model.Animal.Image
  id: Image
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Image
  nameWithType: Animal.Image
  fullName: Business.Model.Animal.Image
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Image
    path: ../Business/Model/Animal.cs
    startLine: 45
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Image Image { get; set; }
    parameters: []
    return:
      type: Business.Model.Image
    content.vb: Public Property Image As Image
  overload: Business.Model.Animal.Image*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.MumId
  commentId: P:Business.Model.Animal.MumId
  id: MumId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: MumId
  nameWithType: Animal.MumId
  fullName: Business.Model.Animal.MumId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: MumId
    path: ../Business/Model/Animal.cs
    startLine: 47
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public int? MumId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property MumId As Integer?
  overload: Business.Model.Animal.MumId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Mum
  commentId: P:Business.Model.Animal.Mum
  id: Mum
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Mum
  nameWithType: Animal.Mum
  fullName: Business.Model.Animal.Mum
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Mum
    path: ../Business/Model/Animal.cs
    startLine: 48
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Animal Mum { get; set; }
    parameters: []
    return:
      type: Business.Model.Animal
    content.vb: Public Property Mum As Animal
  overload: Business.Model.Animal.Mum*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.DadId
  commentId: P:Business.Model.Animal.DadId
  id: DadId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: DadId
  nameWithType: Animal.DadId
  fullName: Business.Model.Animal.DadId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: DadId
    path: ../Business/Model/Animal.cs
    startLine: 50
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public int? DadId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property DadId As Integer?
  overload: Business.Model.Animal.DadId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Dad
  commentId: P:Business.Model.Animal.Dad
  id: Dad
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Dad
  nameWithType: Animal.Dad
  fullName: Business.Model.Animal.Dad
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Dad
    path: ../Business/Model/Animal.cs
    startLine: 51
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Animal Dad { get; set; }
    parameters: []
    return:
      type: Business.Model.Animal
    content.vb: Public Property Dad As Animal
  overload: Business.Model.Animal.Dad*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.HoldingId
  commentId: P:Business.Model.Animal.HoldingId
  id: HoldingId
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: HoldingId
  nameWithType: Animal.HoldingId
  fullName: Business.Model.Animal.HoldingId
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: HoldingId
    path: ../Business/Model/Animal.cs
    startLine: 53
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public int? HoldingId { get; set; }
    parameters: []
    return:
      type: System.Nullable{System.Int32}
    content.vb: Public Property HoldingId As Integer?
  overload: Business.Model.Animal.HoldingId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Holding
  commentId: P:Business.Model.Animal.Holding
  id: Holding
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Holding
  nameWithType: Animal.Holding
  fullName: Business.Model.Animal.Holding
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Holding
    path: ../Business/Model/Animal.cs
    startLine: 54
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public Holding Holding { get; set; }
    parameters: []
    return:
      type: Business.Model.Holding
    content.vb: Public Property Holding As Holding
  overload: Business.Model.Animal.Holding*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Timestamp
  commentId: P:Business.Model.Animal.Timestamp
  id: Timestamp
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: Animal.Timestamp
  fullName: Business.Model.Animal.Timestamp
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Timestamp
    path: ../Business/Model/Animal.cs
    startLine: 56
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Timestamp]

      public byte[] Timestamp { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: >-
      <Timestamp>

      Public Property Timestamp As Byte()
  overload: Business.Model.Animal.Timestamp*
  attributes:
  - type: System.ComponentModel.DataAnnotations.TimestampAttribute
    ctor: System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Breeds
  commentId: P:Business.Model.Animal.Breeds
  id: Breeds
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Breeds
  nameWithType: Animal.Breeds
  fullName: Business.Model.Animal.Breeds
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Breeds
    path: ../Business/Model/Animal.cs
    startLine: 59
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<MapBreedToAnimal> Breeds { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.MapBreedToAnimal}
    content.vb: Public Property Breeds As IEnumerable(Of MapBreedToAnimal)
  overload: Business.Model.Animal.Breeds*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.LifeEventEntries
  commentId: P:Business.Model.Animal.LifeEventEntries
  id: LifeEventEntries
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: LifeEventEntries
  nameWithType: Animal.LifeEventEntries
  fullName: Business.Model.Animal.LifeEventEntries
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: LifeEventEntries
    path: ../Business/Model/Animal.cs
    startLine: 61
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<MapLifeEventEntryToAnimal> LifeEventEntries { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.MapLifeEventEntryToAnimal}
    content.vb: Public Property LifeEventEntries As IEnumerable(Of MapLifeEventEntryToAnimal)
  overload: Business.Model.Animal.LifeEventEntries*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Groups
  commentId: P:Business.Model.Animal.Groups
  id: Groups
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Groups
  nameWithType: Animal.Groups
  fullName: Business.Model.Animal.Groups
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Groups
    path: ../Business/Model/Animal.cs
    startLine: 63
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<MapAnimalToAnimalGroup> Groups { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.MapAnimalToAnimalGroup}
    content.vb: Public Property Groups As IEnumerable(Of MapAnimalToAnimalGroup)
  overload: Business.Model.Animal.Groups*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Children
  commentId: P:Business.Model.Animal.Children
  id: Children
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Children
  nameWithType: Animal.Children
  fullName: Business.Model.Animal.Children
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Children
    path: ../Business/Model/Animal.cs
    startLine: 65
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public IEnumerable<Animal> Children { get; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.Animal}
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property Children As IEnumerable(Of Animal)
  overload: Business.Model.Animal.Children*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Business.Model.Animal.Children_MUM
  commentId: P:Business.Model.Animal.Children_MUM
  id: Children_MUM
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Children_MUM
  nameWithType: Animal.Children_MUM
  fullName: Business.Model.Animal.Children_MUM
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Children_MUM
    path: ../Business/Model/Animal.cs
    startLine: 71
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [InverseProperty("Mum")]

      public IEnumerable<Animal> Children_MUM { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.Animal}
    content.vb: >-
      <InverseProperty("Mum")>

      Public Property Children_MUM As IEnumerable(Of Animal)
  overload: Business.Model.Animal.Children_MUM*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Mum
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.Children_DAD
  commentId: P:Business.Model.Animal.Children_DAD
  id: Children_DAD
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: Children_DAD
  nameWithType: Animal.Children_DAD
  fullName: Business.Model.Animal.Children_DAD
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Children_DAD
    path: ../Business/Model/Animal.cs
    startLine: 75
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [InverseProperty("Dad")]

      public IEnumerable<Animal> Children_DAD { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.Animal}
    content.vb: >-
      <InverseProperty("Dad")>

      Public Property Children_DAD As IEnumerable(Of Animal)
  overload: Business.Model.Animal.Children_DAD*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.InversePropertyAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: Dad
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.Animal.IsEndOfSystem
  commentId: P:Business.Model.Animal.IsEndOfSystem
  id: IsEndOfSystem
  parent: Business.Model.Animal
  langs:
  - csharp
  - vb
  name: IsEndOfSystem
  nameWithType: Animal.IsEndOfSystem
  fullName: Business.Model.Animal.IsEndOfSystem
  type: Property
  source:
    remote:
      path: Business/Model/Animal.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsEndOfSystem
    path: ../Business/Model/Animal.cs
    startLine: 78
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public bool IsEndOfSystem { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property IsEndOfSystem As Boolean
  overload: Business.Model.Animal.IsEndOfSystem*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model.Animal.AnimalId*
  commentId: Overload:Business.Model.Animal.AnimalId
  name: AnimalId
  nameWithType: Animal.AnimalId
  fullName: Business.Model.Animal.AnimalId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Business.Model.Animal.Name*
  commentId: Overload:Business.Model.Animal.Name
  name: Name
  nameWithType: Animal.Name
  fullName: Business.Model.Animal.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Business.Model.Animal.Sex*
  commentId: Overload:Business.Model.Animal.Sex
  name: Sex
  nameWithType: Animal.Sex
  fullName: Business.Model.Animal.Sex
- uid: Business.Model.Animal.Gender
  commentId: T:Business.Model.Animal.Gender
  parent: Business.Model
  name: Animal.Gender
  nameWithType: Animal.Gender
  fullName: Business.Model.Animal.Gender
- uid: Business.Model.Animal.Tag*
  commentId: Overload:Business.Model.Animal.Tag
  name: Tag
  nameWithType: Animal.Tag
  fullName: Business.Model.Animal.Tag
- uid: Business.Model.Animal.OwnerId*
  commentId: Overload:Business.Model.Animal.OwnerId
  name: OwnerId
  nameWithType: Animal.OwnerId
  fullName: Business.Model.Animal.OwnerId
- uid: Business.Model.Animal.Owner*
  commentId: Overload:Business.Model.Animal.Owner
  name: Owner
  nameWithType: Animal.Owner
  fullName: Business.Model.Animal.Owner
- uid: Business.Model.Contact
  commentId: T:Business.Model.Contact
  parent: Business.Model
  name: Contact
  nameWithType: Contact
  fullName: Business.Model.Contact
- uid: Business.Model.Animal.SpeciesId*
  commentId: Overload:Business.Model.Animal.SpeciesId
  name: SpeciesId
  nameWithType: Animal.SpeciesId
  fullName: Business.Model.Animal.SpeciesId
- uid: Business.Model.Animal.Species*
  commentId: Overload:Business.Model.Animal.Species
  name: Species
  nameWithType: Animal.Species
  fullName: Business.Model.Animal.Species
- uid: Business.Model.Species
  commentId: T:Business.Model.Species
  parent: Business.Model
  name: Species
  nameWithType: Species
  fullName: Business.Model.Species
- uid: Business.Model.Animal.CharacteristicsId*
  commentId: Overload:Business.Model.Animal.CharacteristicsId
  name: CharacteristicsId
  nameWithType: Animal.CharacteristicsId
  fullName: Business.Model.Animal.CharacteristicsId
- uid: Business.Model.Animal.Characteristics*
  commentId: Overload:Business.Model.Animal.Characteristics
  name: Characteristics
  nameWithType: Animal.Characteristics
  fullName: Business.Model.Animal.Characteristics
- uid: Business.Model.AnimalCharacteristicList
  commentId: T:Business.Model.AnimalCharacteristicList
  parent: Business.Model
  name: AnimalCharacteristicList
  nameWithType: AnimalCharacteristicList
  fullName: Business.Model.AnimalCharacteristicList
- uid: Business.Model.Animal.ImageId*
  commentId: Overload:Business.Model.Animal.ImageId
  name: ImageId
  nameWithType: Animal.ImageId
  fullName: Business.Model.Animal.ImageId
- uid: System.Nullable{System.Int32}
  commentId: T:System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  nameWithType: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  nameWithType.vb: Nullable(Of Int32)
  fullName.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullName.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Animal.Image*
  commentId: Overload:Business.Model.Animal.Image
  name: Image
  nameWithType: Animal.Image
  fullName: Business.Model.Animal.Image
- uid: Business.Model.Image
  commentId: T:Business.Model.Image
  parent: Business.Model
  name: Image
  nameWithType: Image
  fullName: Business.Model.Image
- uid: Business.Model.Animal.MumId*
  commentId: Overload:Business.Model.Animal.MumId
  name: MumId
  nameWithType: Animal.MumId
  fullName: Business.Model.Animal.MumId
- uid: Business.Model.Animal.Mum*
  commentId: Overload:Business.Model.Animal.Mum
  name: Mum
  nameWithType: Animal.Mum
  fullName: Business.Model.Animal.Mum
- uid: Business.Model.Animal
  commentId: T:Business.Model.Animal
  parent: Business.Model
  name: Animal
  nameWithType: Animal
  fullName: Business.Model.Animal
- uid: Business.Model.Animal.DadId*
  commentId: Overload:Business.Model.Animal.DadId
  name: DadId
  nameWithType: Animal.DadId
  fullName: Business.Model.Animal.DadId
- uid: Business.Model.Animal.Dad*
  commentId: Overload:Business.Model.Animal.Dad
  name: Dad
  nameWithType: Animal.Dad
  fullName: Business.Model.Animal.Dad
- uid: Business.Model.Animal.HoldingId*
  commentId: Overload:Business.Model.Animal.HoldingId
  name: HoldingId
  nameWithType: Animal.HoldingId
  fullName: Business.Model.Animal.HoldingId
- uid: Business.Model.Animal.Holding*
  commentId: Overload:Business.Model.Animal.Holding
  name: Holding
  nameWithType: Animal.Holding
  fullName: Business.Model.Animal.Holding
- uid: Business.Model.Holding
  commentId: T:Business.Model.Holding
  parent: Business.Model
  name: Holding
  nameWithType: Holding
  fullName: Business.Model.Holding
- uid: Business.Model.Animal.Timestamp*
  commentId: Overload:Business.Model.Animal.Timestamp
  name: Timestamp
  nameWithType: Animal.Timestamp
  fullName: Business.Model.Animal.Timestamp
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Business.Model.Animal.Breeds*
  commentId: Overload:Business.Model.Animal.Breeds
  name: Breeds
  nameWithType: Animal.Breeds
  fullName: Business.Model.Animal.Breeds
- uid: System.Collections.Generic.IEnumerable{Business.Model.MapBreedToAnimal}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.MapBreedToAnimal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MapBreedToAnimal>
  nameWithType: IEnumerable<MapBreedToAnimal>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.MapBreedToAnimal>
  nameWithType.vb: IEnumerable(Of MapBreedToAnimal)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.MapBreedToAnimal)
  name.vb: IEnumerable(Of MapBreedToAnimal)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.MapBreedToAnimal
    name: MapBreedToAnimal
    nameWithType: MapBreedToAnimal
    fullName: Business.Model.MapBreedToAnimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.MapBreedToAnimal
    name: MapBreedToAnimal
    nameWithType: MapBreedToAnimal
    fullName: Business.Model.MapBreedToAnimal
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Business.Model.Animal.LifeEventEntries*
  commentId: Overload:Business.Model.Animal.LifeEventEntries
  name: LifeEventEntries
  nameWithType: Animal.LifeEventEntries
  fullName: Business.Model.Animal.LifeEventEntries
- uid: System.Collections.Generic.IEnumerable{Business.Model.MapLifeEventEntryToAnimal}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.MapLifeEventEntryToAnimal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MapLifeEventEntryToAnimal>
  nameWithType: IEnumerable<MapLifeEventEntryToAnimal>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.MapLifeEventEntryToAnimal>
  nameWithType.vb: IEnumerable(Of MapLifeEventEntryToAnimal)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.MapLifeEventEntryToAnimal)
  name.vb: IEnumerable(Of MapLifeEventEntryToAnimal)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.MapLifeEventEntryToAnimal
    name: MapLifeEventEntryToAnimal
    nameWithType: MapLifeEventEntryToAnimal
    fullName: Business.Model.MapLifeEventEntryToAnimal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.MapLifeEventEntryToAnimal
    name: MapLifeEventEntryToAnimal
    nameWithType: MapLifeEventEntryToAnimal
    fullName: Business.Model.MapLifeEventEntryToAnimal
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Animal.Groups*
  commentId: Overload:Business.Model.Animal.Groups
  name: Groups
  nameWithType: Animal.Groups
  fullName: Business.Model.Animal.Groups
- uid: System.Collections.Generic.IEnumerable{Business.Model.MapAnimalToAnimalGroup}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.MapAnimalToAnimalGroup}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<MapAnimalToAnimalGroup>
  nameWithType: IEnumerable<MapAnimalToAnimalGroup>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.MapAnimalToAnimalGroup>
  nameWithType.vb: IEnumerable(Of MapAnimalToAnimalGroup)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.MapAnimalToAnimalGroup)
  name.vb: IEnumerable(Of MapAnimalToAnimalGroup)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.MapAnimalToAnimalGroup
    name: MapAnimalToAnimalGroup
    nameWithType: MapAnimalToAnimalGroup
    fullName: Business.Model.MapAnimalToAnimalGroup
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.MapAnimalToAnimalGroup
    name: MapAnimalToAnimalGroup
    nameWithType: MapAnimalToAnimalGroup
    fullName: Business.Model.MapAnimalToAnimalGroup
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Animal.Children*
  commentId: Overload:Business.Model.Animal.Children
  name: Children
  nameWithType: Animal.Children
  fullName: Business.Model.Animal.Children
- uid: System.Collections.Generic.IEnumerable{Business.Model.Animal}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.Animal}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Animal>
  nameWithType: IEnumerable<Animal>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.Animal>
  nameWithType.vb: IEnumerable(Of Animal)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.Animal)
  name.vb: IEnumerable(Of Animal)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.Animal
    name: Animal
    nameWithType: Animal
    fullName: Business.Model.Animal
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.Animal
    name: Animal
    nameWithType: Animal
    fullName: Business.Model.Animal
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.Animal.Children_MUM*
  commentId: Overload:Business.Model.Animal.Children_MUM
  name: Children_MUM
  nameWithType: Animal.Children_MUM
  fullName: Business.Model.Animal.Children_MUM
- uid: Business.Model.Animal.Children_DAD*
  commentId: Overload:Business.Model.Animal.Children_DAD
  name: Children_DAD
  nameWithType: Animal.Children_DAD
  fullName: Business.Model.Animal.Children_DAD
- uid: Business.Model.Animal.IsEndOfSystem*
  commentId: Overload:Business.Model.Animal.IsEndOfSystem
  name: IsEndOfSystem
  nameWithType: Animal.IsEndOfSystem
  fullName: Business.Model.Animal.IsEndOfSystem
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
