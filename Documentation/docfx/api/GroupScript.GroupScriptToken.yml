### YamlMime:ManagedReference
items:
- uid: GroupScript.GroupScriptToken
  commentId: T:GroupScript.GroupScriptToken
  id: GroupScriptToken
  parent: GroupScript
  children:
  - GroupScript.GroupScriptToken.Column
  - GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf(GroupScript.GroupScriptTokenType[])
  - GroupScript.GroupScriptToken.Line
  - GroupScript.GroupScriptToken.Text
  - GroupScript.GroupScriptToken.Type
  langs:
  - csharp
  - vb
  name: GroupScriptToken
  nameWithType: GroupScriptToken
  fullName: GroupScript.GroupScriptToken
  type: Class
  source:
    remote:
      path: GroupScript/GroupScriptParser.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: GroupScriptToken
    path: ../GroupScript/GroupScriptParser.cs
    startLine: 38
  assemblies:
  - GroupScript
  namespace: GroupScript
  syntax:
    content: public class GroupScriptToken
    content.vb: Public Class GroupScriptToken
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: GroupScript.GroupScriptToken.Line
  commentId: P:GroupScript.GroupScriptToken.Line
  id: Line
  parent: GroupScript.GroupScriptToken
  langs:
  - csharp
  - vb
  name: Line
  nameWithType: GroupScriptToken.Line
  fullName: GroupScript.GroupScriptToken.Line
  type: Property
  source:
    remote:
      path: GroupScript/GroupScriptParser.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Line
    path: ../GroupScript/GroupScriptParser.cs
    startLine: 40
  assemblies:
  - GroupScript
  namespace: GroupScript
  syntax:
    content: public int Line { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Line As Integer
  overload: GroupScript.GroupScriptToken.Line*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GroupScript.GroupScriptToken.Column
  commentId: P:GroupScript.GroupScriptToken.Column
  id: Column
  parent: GroupScript.GroupScriptToken
  langs:
  - csharp
  - vb
  name: Column
  nameWithType: GroupScriptToken.Column
  fullName: GroupScript.GroupScriptToken.Column
  type: Property
  source:
    remote:
      path: GroupScript/GroupScriptParser.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Column
    path: ../GroupScript/GroupScriptParser.cs
    startLine: 41
  assemblies:
  - GroupScript
  namespace: GroupScript
  syntax:
    content: public int Column { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: Public Property Column As Integer
  overload: GroupScript.GroupScriptToken.Column*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GroupScript.GroupScriptToken.Text
  commentId: P:GroupScript.GroupScriptToken.Text
  id: Text
  parent: GroupScript.GroupScriptToken
  langs:
  - csharp
  - vb
  name: Text
  nameWithType: GroupScriptToken.Text
  fullName: GroupScript.GroupScriptToken.Text
  type: Property
  source:
    remote:
      path: GroupScript/GroupScriptParser.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Text
    path: ../GroupScript/GroupScriptParser.cs
    startLine: 42
  assemblies:
  - GroupScript
  namespace: GroupScript
  syntax:
    content: public string Text { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Text As String
  overload: GroupScript.GroupScriptToken.Text*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GroupScript.GroupScriptToken.Type
  commentId: P:GroupScript.GroupScriptToken.Type
  id: Type
  parent: GroupScript.GroupScriptToken
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: GroupScriptToken.Type
  fullName: GroupScript.GroupScriptToken.Type
  type: Property
  source:
    remote:
      path: GroupScript/GroupScriptParser.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Type
    path: ../GroupScript/GroupScriptParser.cs
    startLine: 43
  assemblies:
  - GroupScript
  namespace: GroupScript
  syntax:
    content: public GroupScriptTokenType Type { get; set; }
    parameters: []
    return:
      type: GroupScript.GroupScriptTokenType
    content.vb: Public Property Type As GroupScriptTokenType
  overload: GroupScript.GroupScriptToken.Type*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf(GroupScript.GroupScriptTokenType[])
  commentId: M:GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf(GroupScript.GroupScriptTokenType[])
  id: EnforceTokenTypeIsAnyOf(GroupScript.GroupScriptTokenType[])
  parent: GroupScript.GroupScriptToken
  langs:
  - csharp
  - vb
  name: EnforceTokenTypeIsAnyOf(GroupScriptTokenType[])
  nameWithType: GroupScriptToken.EnforceTokenTypeIsAnyOf(GroupScriptTokenType[])
  fullName: GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf(GroupScript.GroupScriptTokenType[])
  type: Method
  source:
    remote:
      path: GroupScript/GroupScriptParser.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: EnforceTokenTypeIsAnyOf
    path: ../GroupScript/GroupScriptParser.cs
    startLine: 45
  assemblies:
  - GroupScript
  namespace: GroupScript
  syntax:
    content: public void EnforceTokenTypeIsAnyOf(params GroupScriptTokenType[] types)
    parameters:
    - id: types
      type: GroupScript.GroupScriptTokenType[]
    content.vb: Public Sub EnforceTokenTypeIsAnyOf(ParamArray types As GroupScriptTokenType())
  overload: GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf*
  nameWithType.vb: GroupScriptToken.EnforceTokenTypeIsAnyOf(GroupScriptTokenType())
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf(GroupScript.GroupScriptTokenType())
  name.vb: EnforceTokenTypeIsAnyOf(GroupScriptTokenType())
references:
- uid: GroupScript
  commentId: N:GroupScript
  name: GroupScript
  nameWithType: GroupScript
  fullName: GroupScript
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: GroupScript.GroupScriptToken.Line*
  commentId: Overload:GroupScript.GroupScriptToken.Line
  name: Line
  nameWithType: GroupScriptToken.Line
  fullName: GroupScript.GroupScriptToken.Line
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: GroupScript.GroupScriptToken.Column*
  commentId: Overload:GroupScript.GroupScriptToken.Column
  name: Column
  nameWithType: GroupScriptToken.Column
  fullName: GroupScript.GroupScriptToken.Column
- uid: GroupScript.GroupScriptToken.Text*
  commentId: Overload:GroupScript.GroupScriptToken.Text
  name: Text
  nameWithType: GroupScriptToken.Text
  fullName: GroupScript.GroupScriptToken.Text
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: GroupScript.GroupScriptToken.Type*
  commentId: Overload:GroupScript.GroupScriptToken.Type
  name: Type
  nameWithType: GroupScriptToken.Type
  fullName: GroupScript.GroupScriptToken.Type
- uid: GroupScript.GroupScriptTokenType
  commentId: T:GroupScript.GroupScriptTokenType
  parent: GroupScript
  name: GroupScriptTokenType
  nameWithType: GroupScriptTokenType
  fullName: GroupScript.GroupScriptTokenType
- uid: GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf*
  commentId: Overload:GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf
  name: EnforceTokenTypeIsAnyOf
  nameWithType: GroupScriptToken.EnforceTokenTypeIsAnyOf
  fullName: GroupScript.GroupScriptToken.EnforceTokenTypeIsAnyOf
- uid: GroupScript.GroupScriptTokenType[]
  isExternal: true
  name: GroupScriptTokenType[]
  nameWithType: GroupScriptTokenType[]
  fullName: GroupScript.GroupScriptTokenType[]
  nameWithType.vb: GroupScriptTokenType()
  fullName.vb: GroupScript.GroupScriptTokenType()
  name.vb: GroupScriptTokenType()
  spec.csharp:
  - uid: GroupScript.GroupScriptTokenType
    name: GroupScriptTokenType
    nameWithType: GroupScriptTokenType
    fullName: GroupScript.GroupScriptTokenType
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: GroupScript.GroupScriptTokenType
    name: GroupScriptTokenType
    nameWithType: GroupScriptTokenType
    fullName: GroupScript.GroupScriptTokenType
  - name: ()
    nameWithType: ()
    fullName: ()
