### YamlMime:ManagedReference
items:
- uid: Business.Model.LifeEvent.TargetFlags
  commentId: T:Business.Model.LifeEvent.TargetFlags
  id: LifeEvent.TargetFlags
  parent: Business.Model
  children:
  - Business.Model.LifeEvent.TargetFlags.EndOfSystem
  - Business.Model.LifeEvent.TargetFlags.IsBuiltin
  - Business.Model.LifeEvent.TargetFlags.IsUnique
  - Business.Model.LifeEvent.TargetFlags.None
  langs:
  - csharp
  - vb
  name: LifeEvent.TargetFlags
  nameWithType: LifeEvent.TargetFlags
  fullName: Business.Model.LifeEvent.TargetFlags
  type: Enum
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: TargetFlags
    path: ../Business/Model/LifeEvent.cs
    startLine: 27
  assemblies:
  - Business
  namespace: Business.Model
  summary: "\nFlags relating to the life event, and special functions it may perform on its targets.\n\nWhere possible, keep flags ambiguous so I don&apos;t need to add functionality to filter\nthem based on target type.\n"
  example: []
  syntax:
    content: >-
      [Flags]

      public enum TargetFlags
    content.vb: >-
      <Flags>

      Public Enum TargetFlags
  attributes:
  - type: System.FlagsAttribute
    ctor: System.FlagsAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - enum
  modifiers.vb:
  - Public
  - Enum
- uid: Business.Model.LifeEvent.TargetFlags.None
  commentId: F:Business.Model.LifeEvent.TargetFlags.None
  id: None
  parent: Business.Model.LifeEvent.TargetFlags
  langs:
  - csharp
  - vb
  name: None
  nameWithType: LifeEvent.TargetFlags.None
  fullName: Business.Model.LifeEvent.TargetFlags.None
  type: Field
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: None
    path: ../Business/Model/LifeEvent.cs
    startLine: 33
  assemblies:
  - Business
  namespace: Business.Model
  summary: "\nFailsafe value.\n"
  example: []
  syntax:
    content: None = 0
    return:
      type: Business.Model.LifeEvent.TargetFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Business.Model.LifeEvent.TargetFlags.EndOfSystem
  commentId: F:Business.Model.LifeEvent.TargetFlags.EndOfSystem
  id: EndOfSystem
  parent: Business.Model.LifeEvent.TargetFlags
  langs:
  - csharp
  - vb
  name: EndOfSystem
  nameWithType: LifeEvent.TargetFlags.EndOfSystem
  fullName: Business.Model.LifeEvent.TargetFlags.EndOfSystem
  type: Field
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: EndOfSystem
    path: ../Business/Model/LifeEvent.cs
    startLine: 38
  assemblies:
  - Business
  namespace: Business.Model
  summary: "\nMark that the target has reached end of system (sold, died, broke, etc.)\n"
  example: []
  syntax:
    content: EndOfSystem = 1
    return:
      type: Business.Model.LifeEvent.TargetFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Business.Model.LifeEvent.TargetFlags.IsBuiltin
  commentId: F:Business.Model.LifeEvent.TargetFlags.IsBuiltin
  id: IsBuiltin
  parent: Business.Model.LifeEvent.TargetFlags
  langs:
  - csharp
  - vb
  name: IsBuiltin
  nameWithType: LifeEvent.TargetFlags.IsBuiltin
  fullName: Business.Model.LifeEvent.TargetFlags.IsBuiltin
  type: Field
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsBuiltin
    path: ../Business/Model/LifeEvent.cs
    startLine: 43
  assemblies:
  - Business
  namespace: Business.Model
  summary: "\nThe life event is built-in, so cannot be modified by a user.\n"
  example: []
  syntax:
    content: IsBuiltin = 2
    return:
      type: Business.Model.LifeEvent.TargetFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: Business.Model.LifeEvent.TargetFlags.IsUnique
  commentId: F:Business.Model.LifeEvent.TargetFlags.IsUnique
  id: IsUnique
  parent: Business.Model.LifeEvent.TargetFlags
  langs:
  - csharp
  - vb
  name: IsUnique
  nameWithType: LifeEvent.TargetFlags.IsUnique
  fullName: Business.Model.LifeEvent.TargetFlags.IsUnique
  type: Field
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsUnique
    path: ../Business/Model/LifeEvent.cs
    startLine: 48
  assemblies:
  - Business
  namespace: Business.Model
  summary: "\nThe life event is unique, so only one entry can exist per target.\n"
  example: []
  syntax:
    content: IsUnique = 4
    return:
      type: Business.Model.LifeEvent.TargetFlags
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: Business.Model.LifeEvent.TargetFlags
  commentId: T:Business.Model.LifeEvent.TargetFlags
  parent: Business.Model
  name: LifeEvent.TargetFlags
  nameWithType: LifeEvent.TargetFlags
  fullName: Business.Model.LifeEvent.TargetFlags
