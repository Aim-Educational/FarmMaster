### YamlMime:ManagedReference
items:
- uid: Business.Model.LifeEvent
  commentId: T:Business.Model.LifeEvent
  id: LifeEvent
  parent: Business.Model
  children:
  - Business.Model.LifeEvent.Description
  - Business.Model.LifeEvent.Entries
  - Business.Model.LifeEvent.Fields
  - Business.Model.LifeEvent.Flags
  - Business.Model.LifeEvent.IsBuiltin
  - Business.Model.LifeEvent.IsEndOfSystem
  - Business.Model.LifeEvent.IsInUse
  - Business.Model.LifeEvent.IsUnique
  - Business.Model.LifeEvent.LifeEventId
  - Business.Model.LifeEvent.Name
  - Business.Model.LifeEvent.Target
  - Business.Model.LifeEvent.Timestamp
  langs:
  - csharp
  - vb
  name: LifeEvent
  nameWithType: LifeEvent
  fullName: Business.Model.LifeEvent
  type: Class
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: LifeEvent
    path: ../Business/Model/LifeEvent.cs
    startLine: 9
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public class LifeEvent
    content.vb: Public Class LifeEvent
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Business.Model.LifeEvent.LifeEventId
  commentId: P:Business.Model.LifeEvent.LifeEventId
  id: LifeEventId
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: LifeEventId
  nameWithType: LifeEvent.LifeEventId
  fullName: Business.Model.LifeEvent.LifeEventId
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: LifeEventId
    path: ../Business/Model/LifeEvent.cs
    startLine: 51
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public int LifeEventId { get; set; }
    parameters: []
    return:
      type: System.Int32
    content.vb: >-
      <Required>

      Public Property LifeEventId As Integer
  overload: Business.Model.LifeEvent.LifeEventId*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.Name
  commentId: P:Business.Model.LifeEvent.Name
  id: Name
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: LifeEvent.Name
  fullName: Business.Model.LifeEvent.Name
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Name
    path: ../Business/Model/LifeEvent.cs
    startLine: 54
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [StringLength(75)]

      public string Name { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <StringLength(75)>

      Public Property Name As String
  overload: Business.Model.LifeEvent.Name*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 75
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.Description
  commentId: P:Business.Model.LifeEvent.Description
  id: Description
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: Description
  nameWithType: LifeEvent.Description
  fullName: Business.Model.LifeEvent.Description
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Description
    path: ../Business/Model/LifeEvent.cs
    startLine: 58
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      [StringLength(255)]

      public string Description { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: >-
      <Required>

      <StringLength(255)>

      Public Property Description As String
  overload: Business.Model.LifeEvent.Description*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  - type: System.ComponentModel.DataAnnotations.StringLengthAttribute
    ctor: System.ComponentModel.DataAnnotations.StringLengthAttribute.#ctor(System.Int32)
    arguments:
    - type: System.Int32
      value: 255
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.Target
  commentId: P:Business.Model.LifeEvent.Target
  id: Target
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: Target
  nameWithType: LifeEvent.Target
  fullName: Business.Model.LifeEvent.Target
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Target
    path: ../Business/Model/LifeEvent.cs
    startLine: 62
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public LifeEvent.TargetType Target { get; set; }
    parameters: []
    return:
      type: Business.Model.LifeEvent.TargetType
    content.vb: >-
      <Required>

      Public Property Target As LifeEvent.TargetType
  overload: Business.Model.LifeEvent.Target*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.Flags
  commentId: P:Business.Model.LifeEvent.Flags
  id: Flags
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: Flags
  nameWithType: LifeEvent.Flags
  fullName: Business.Model.LifeEvent.Flags
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Flags
    path: ../Business/Model/LifeEvent.cs
    startLine: 65
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Required]

      public LifeEvent.TargetFlags Flags { get; set; }
    parameters: []
    return:
      type: Business.Model.LifeEvent.TargetFlags
    content.vb: >-
      <Required>

      Public Property Flags As LifeEvent.TargetFlags
  overload: Business.Model.LifeEvent.Flags*
  attributes:
  - type: System.ComponentModel.DataAnnotations.RequiredAttribute
    ctor: System.ComponentModel.DataAnnotations.RequiredAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.Timestamp
  commentId: P:Business.Model.LifeEvent.Timestamp
  id: Timestamp
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: Timestamp
  nameWithType: LifeEvent.Timestamp
  fullName: Business.Model.LifeEvent.Timestamp
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Timestamp
    path: ../Business/Model/LifeEvent.cs
    startLine: 68
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [Timestamp]

      public byte[] Timestamp { get; set; }
    parameters: []
    return:
      type: System.Byte[]
    content.vb: >-
      <Timestamp>

      Public Property Timestamp As Byte()
  overload: Business.Model.LifeEvent.Timestamp*
  attributes:
  - type: System.ComponentModel.DataAnnotations.TimestampAttribute
    ctor: System.ComponentModel.DataAnnotations.TimestampAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.Fields
  commentId: P:Business.Model.LifeEvent.Fields
  id: Fields
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: Fields
  nameWithType: LifeEvent.Fields
  fullName: Business.Model.LifeEvent.Fields
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Fields
    path: ../Business/Model/LifeEvent.cs
    startLine: 71
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<LifeEventDynamicFieldInfo> Fields { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.LifeEventDynamicFieldInfo}
    content.vb: Public Property Fields As IEnumerable(Of LifeEventDynamicFieldInfo)
  overload: Business.Model.LifeEvent.Fields*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.Entries
  commentId: P:Business.Model.LifeEvent.Entries
  id: Entries
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: Entries
  nameWithType: LifeEvent.Entries
  fullName: Business.Model.LifeEvent.Entries
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Entries
    path: ../Business/Model/LifeEvent.cs
    startLine: 72
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: public IEnumerable<LifeEventEntry> Entries { get; set; }
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry}
    content.vb: Public Property Entries As IEnumerable(Of LifeEventEntry)
  overload: Business.Model.LifeEvent.Entries*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.IsInUse
  commentId: P:Business.Model.LifeEvent.IsInUse
  id: IsInUse
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: IsInUse
  nameWithType: LifeEvent.IsInUse
  fullName: Business.Model.LifeEvent.IsInUse
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsInUse
    path: ../Business/Model/LifeEvent.cs
    startLine: 74
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public bool IsInUse { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property IsInUse As Boolean
  overload: Business.Model.LifeEvent.IsInUse*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Business.Model.LifeEvent.IsBuiltin
  commentId: P:Business.Model.LifeEvent.IsBuiltin
  id: IsBuiltin
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: IsBuiltin
  nameWithType: LifeEvent.IsBuiltin
  fullName: Business.Model.LifeEvent.IsBuiltin
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsBuiltin
    path: ../Business/Model/LifeEvent.cs
    startLine: 77
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public bool IsBuiltin { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <NotMapped>

      Public ReadOnly Property IsBuiltin As Boolean
  overload: Business.Model.LifeEvent.IsBuiltin*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Business.Model.LifeEvent.IsEndOfSystem
  commentId: P:Business.Model.LifeEvent.IsEndOfSystem
  id: IsEndOfSystem
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: IsEndOfSystem
  nameWithType: LifeEvent.IsEndOfSystem
  fullName: Business.Model.LifeEvent.IsEndOfSystem
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsEndOfSystem
    path: ../Business/Model/LifeEvent.cs
    startLine: 80
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public bool IsEndOfSystem { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <NotMapped>

      Public Property IsEndOfSystem As Boolean
  overload: Business.Model.LifeEvent.IsEndOfSystem*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Business.Model.LifeEvent.IsUnique
  commentId: P:Business.Model.LifeEvent.IsUnique
  id: IsUnique
  parent: Business.Model.LifeEvent
  langs:
  - csharp
  - vb
  name: IsUnique
  nameWithType: LifeEvent.IsUnique
  fullName: Business.Model.LifeEvent.IsUnique
  type: Property
  source:
    remote:
      path: Business/Model/LifeEvent.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IsUnique
    path: ../Business/Model/LifeEvent.cs
    startLine: 93
  assemblies:
  - Business
  namespace: Business.Model
  syntax:
    content: >-
      [NotMapped]

      public bool IsUnique { get; set; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: >-
      <NotMapped>

      Public Property IsUnique As Boolean
  overload: Business.Model.LifeEvent.IsUnique*
  attributes:
  - type: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute
    ctor: System.ComponentModel.DataAnnotations.Schema.NotMappedAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model.LifeEvent.LifeEventId*
  commentId: Overload:Business.Model.LifeEvent.LifeEventId
  name: LifeEventId
  nameWithType: LifeEvent.LifeEventId
  fullName: Business.Model.LifeEvent.LifeEventId
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Business.Model.LifeEvent.Name*
  commentId: Overload:Business.Model.LifeEvent.Name
  name: Name
  nameWithType: LifeEvent.Name
  fullName: Business.Model.LifeEvent.Name
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Business.Model.LifeEvent.Description*
  commentId: Overload:Business.Model.LifeEvent.Description
  name: Description
  nameWithType: LifeEvent.Description
  fullName: Business.Model.LifeEvent.Description
- uid: Business.Model.LifeEvent.Target*
  commentId: Overload:Business.Model.LifeEvent.Target
  name: Target
  nameWithType: LifeEvent.Target
  fullName: Business.Model.LifeEvent.Target
- uid: Business.Model.LifeEvent.TargetType
  commentId: T:Business.Model.LifeEvent.TargetType
  parent: Business.Model
  name: LifeEvent.TargetType
  nameWithType: LifeEvent.TargetType
  fullName: Business.Model.LifeEvent.TargetType
- uid: Business.Model.LifeEvent.Flags*
  commentId: Overload:Business.Model.LifeEvent.Flags
  name: Flags
  nameWithType: LifeEvent.Flags
  fullName: Business.Model.LifeEvent.Flags
- uid: Business.Model.LifeEvent.TargetFlags
  commentId: T:Business.Model.LifeEvent.TargetFlags
  parent: Business.Model
  name: LifeEvent.TargetFlags
  nameWithType: LifeEvent.TargetFlags
  fullName: Business.Model.LifeEvent.TargetFlags
- uid: Business.Model.LifeEvent.Timestamp*
  commentId: Overload:Business.Model.LifeEvent.Timestamp
  name: Timestamp
  nameWithType: LifeEvent.Timestamp
  fullName: Business.Model.LifeEvent.Timestamp
- uid: System.Byte[]
  isExternal: true
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullName.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Business.Model.LifeEvent.Fields*
  commentId: Overload:Business.Model.LifeEvent.Fields
  name: Fields
  nameWithType: LifeEvent.Fields
  fullName: Business.Model.LifeEvent.Fields
- uid: System.Collections.Generic.IEnumerable{Business.Model.LifeEventDynamicFieldInfo}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.LifeEventDynamicFieldInfo}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<LifeEventDynamicFieldInfo>
  nameWithType: IEnumerable<LifeEventDynamicFieldInfo>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.LifeEventDynamicFieldInfo>
  nameWithType.vb: IEnumerable(Of LifeEventDynamicFieldInfo)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.LifeEventDynamicFieldInfo)
  name.vb: IEnumerable(Of LifeEventDynamicFieldInfo)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventDynamicFieldInfo
    name: LifeEventDynamicFieldInfo
    nameWithType: LifeEventDynamicFieldInfo
    fullName: Business.Model.LifeEventDynamicFieldInfo
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: true
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Business.Model.LifeEvent.Entries*
  commentId: Overload:Business.Model.LifeEvent.Entries
  name: Entries
  nameWithType: LifeEvent.Entries
  fullName: Business.Model.LifeEvent.Entries
- uid: System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry}
  commentId: T:System.Collections.Generic.IEnumerable{Business.Model.LifeEventEntry}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<LifeEventEntry>
  nameWithType: IEnumerable<LifeEventEntry>
  fullName: System.Collections.Generic.IEnumerable<Business.Model.LifeEventEntry>
  nameWithType.vb: IEnumerable(Of LifeEventEntry)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Business.Model.LifeEventEntry)
  name.vb: IEnumerable(Of LifeEventEntry)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.LifeEventEntry
    name: LifeEventEntry
    nameWithType: LifeEventEntry
    fullName: Business.Model.LifeEventEntry
  - name: )
    nameWithType: )
    fullName: )
- uid: Business.Model.LifeEvent.IsInUse*
  commentId: Overload:Business.Model.LifeEvent.IsInUse
  name: IsInUse
  nameWithType: LifeEvent.IsInUse
  fullName: Business.Model.LifeEvent.IsInUse
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Business.Model.LifeEvent.IsBuiltin*
  commentId: Overload:Business.Model.LifeEvent.IsBuiltin
  name: IsBuiltin
  nameWithType: LifeEvent.IsBuiltin
  fullName: Business.Model.LifeEvent.IsBuiltin
- uid: Business.Model.LifeEvent.IsEndOfSystem*
  commentId: Overload:Business.Model.LifeEvent.IsEndOfSystem
  name: IsEndOfSystem
  nameWithType: LifeEvent.IsEndOfSystem
  fullName: Business.Model.LifeEvent.IsEndOfSystem
- uid: Business.Model.LifeEvent.IsUnique*
  commentId: Overload:Business.Model.LifeEvent.IsUnique
  name: IsUnique
  nameWithType: LifeEvent.IsUnique
  fullName: Business.Model.LifeEvent.IsUnique
