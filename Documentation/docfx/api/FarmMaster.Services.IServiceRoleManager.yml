### YamlMime:ManagedReference
items:
- uid: FarmMaster.Services.IServiceRoleManager
  commentId: T:FarmMaster.Services.IServiceRoleManager
  id: IServiceRoleManager
  parent: FarmMaster.Services
  children:
  - FarmMaster.Services.IServiceRoleManager.AddPermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  - FarmMaster.Services.IServiceRoleManager.Create(System.String,System.String,System.String[])
  - FarmMaster.Services.IServiceRoleManager.HasPermission(Business.Model.Role,System.String)
  - FarmMaster.Services.IServiceRoleManager.RemovePermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  - FarmMaster.Services.IServiceRoleManager.RemoveRole(Business.Model.Role)
  - FarmMaster.Services.IServiceRoleManager.RoleFromName(System.String)
  langs:
  - csharp
  - vb
  name: IServiceRoleManager
  nameWithType: IServiceRoleManager
  fullName: FarmMaster.Services.IServiceRoleManager
  type: Interface
  source:
    remote:
      path: FarmMaster/Services/IServiceRoleManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: IServiceRoleManager
    path: Services/IServiceRoleManager.cs
    startLine: 10
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: 'public interface IServiceRoleManager : IServiceEntityManager<Role>'
    content.vb: >-
      Public Interface IServiceRoleManager

          Inherits IServiceEntityManager(Of Role)
  inheritedMembers:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.Query
  - FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.QueryAllIncluded
  - FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.GetIdFor(Business.Model.Role)
  - FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.Update(Business.Model.Role)
  extensionMethods:
  - FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(System.Int32)
  - FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(System.Int32)
  - FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.FarmMaster.Services.IServiceEntityDataExtentions.For``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: FarmMaster.Services.IServiceRoleManager.Create(System.String,System.String,System.String[])
  commentId: M:FarmMaster.Services.IServiceRoleManager.Create(System.String,System.String,System.String[])
  id: Create(System.String,System.String,System.String[])
  parent: FarmMaster.Services.IServiceRoleManager
  langs:
  - csharp
  - vb
  name: Create(String, String, String[])
  nameWithType: IServiceRoleManager.Create(String, String, String[])
  fullName: FarmMaster.Services.IServiceRoleManager.Create(System.String, System.String, System.String[])
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceRoleManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: Create
    path: Services/IServiceRoleManager.cs
    startLine: 12
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: Role Create(string name, string description, params string[] permInternalNames)
    parameters:
    - id: name
      type: System.String
    - id: description
      type: System.String
    - id: permInternalNames
      type: System.String[]
    return:
      type: Business.Model.Role
    content.vb: Function Create(name As String, description As String, ParamArray permInternalNames As String()) As Role
  overload: FarmMaster.Services.IServiceRoleManager.Create*
  nameWithType.vb: IServiceRoleManager.Create(String, String, String())
  fullName.vb: FarmMaster.Services.IServiceRoleManager.Create(System.String, System.String, System.String())
  name.vb: Create(String, String, String())
- uid: FarmMaster.Services.IServiceRoleManager.RoleFromName(System.String)
  commentId: M:FarmMaster.Services.IServiceRoleManager.RoleFromName(System.String)
  id: RoleFromName(System.String)
  parent: FarmMaster.Services.IServiceRoleManager
  langs:
  - csharp
  - vb
  name: RoleFromName(String)
  nameWithType: IServiceRoleManager.RoleFromName(String)
  fullName: FarmMaster.Services.IServiceRoleManager.RoleFromName(System.String)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceRoleManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: RoleFromName
    path: Services/IServiceRoleManager.cs
    startLine: 13
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: Role RoleFromName(string name)
    parameters:
    - id: name
      type: System.String
    return:
      type: Business.Model.Role
    content.vb: Function RoleFromName(name As String) As Role
  overload: FarmMaster.Services.IServiceRoleManager.RoleFromName*
- uid: FarmMaster.Services.IServiceRoleManager.RemoveRole(Business.Model.Role)
  commentId: M:FarmMaster.Services.IServiceRoleManager.RemoveRole(Business.Model.Role)
  id: RemoveRole(Business.Model.Role)
  parent: FarmMaster.Services.IServiceRoleManager
  langs:
  - csharp
  - vb
  name: RemoveRole(Role)
  nameWithType: IServiceRoleManager.RemoveRole(Role)
  fullName: FarmMaster.Services.IServiceRoleManager.RemoveRole(Business.Model.Role)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceRoleManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: RemoveRole
    path: Services/IServiceRoleManager.cs
    startLine: 14
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: void RemoveRole(Role role)
    parameters:
    - id: role
      type: Business.Model.Role
    content.vb: Sub RemoveRole(role As Role)
  overload: FarmMaster.Services.IServiceRoleManager.RemoveRole*
- uid: FarmMaster.Services.IServiceRoleManager.AddPermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  commentId: M:FarmMaster.Services.IServiceRoleManager.AddPermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  id: AddPermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  parent: FarmMaster.Services.IServiceRoleManager
  langs:
  - csharp
  - vb
  name: AddPermission(Role, String, SaveChanges)
  nameWithType: IServiceRoleManager.AddPermission(Role, String, SaveChanges)
  fullName: FarmMaster.Services.IServiceRoleManager.AddPermission(Business.Model.Role, System.String, FarmMaster.Misc.SaveChanges)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceRoleManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: AddPermission
    path: Services/IServiceRoleManager.cs
    startLine: 15
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: void AddPermission(Role role, string permInternalName, SaveChanges saveChanges = SaveChanges.Yes)
    parameters:
    - id: role
      type: Business.Model.Role
    - id: permInternalName
      type: System.String
    - id: saveChanges
      type: FarmMaster.Misc.SaveChanges
    content.vb: Sub AddPermission(role As Role, permInternalName As String, saveChanges As SaveChanges = SaveChanges.Yes)
  overload: FarmMaster.Services.IServiceRoleManager.AddPermission*
- uid: FarmMaster.Services.IServiceRoleManager.RemovePermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  commentId: M:FarmMaster.Services.IServiceRoleManager.RemovePermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  id: RemovePermission(Business.Model.Role,System.String,FarmMaster.Misc.SaveChanges)
  parent: FarmMaster.Services.IServiceRoleManager
  langs:
  - csharp
  - vb
  name: RemovePermission(Role, String, SaveChanges)
  nameWithType: IServiceRoleManager.RemovePermission(Role, String, SaveChanges)
  fullName: FarmMaster.Services.IServiceRoleManager.RemovePermission(Business.Model.Role, System.String, FarmMaster.Misc.SaveChanges)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceRoleManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: RemovePermission
    path: Services/IServiceRoleManager.cs
    startLine: 16
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: void RemovePermission(Role role, string permInternalName, SaveChanges saveChanges = SaveChanges.Yes)
    parameters:
    - id: role
      type: Business.Model.Role
    - id: permInternalName
      type: System.String
    - id: saveChanges
      type: FarmMaster.Misc.SaveChanges
    content.vb: Sub RemovePermission(role As Role, permInternalName As String, saveChanges As SaveChanges = SaveChanges.Yes)
  overload: FarmMaster.Services.IServiceRoleManager.RemovePermission*
- uid: FarmMaster.Services.IServiceRoleManager.HasPermission(Business.Model.Role,System.String)
  commentId: M:FarmMaster.Services.IServiceRoleManager.HasPermission(Business.Model.Role,System.String)
  id: HasPermission(Business.Model.Role,System.String)
  parent: FarmMaster.Services.IServiceRoleManager
  langs:
  - csharp
  - vb
  name: HasPermission(Role, String)
  nameWithType: IServiceRoleManager.HasPermission(Role, String)
  fullName: FarmMaster.Services.IServiceRoleManager.HasPermission(Business.Model.Role, System.String)
  type: Method
  source:
    remote:
      path: FarmMaster/Services/IServiceRoleManager.cs
      branch: assignment_script
      repo: https://github.com/Aim-Educational/FarmMaster.git
    id: HasPermission
    path: Services/IServiceRoleManager.cs
    startLine: 17
  assemblies:
  - FarmMaster
  namespace: FarmMaster.Services
  syntax:
    content: bool HasPermission(Role role, string permInternalName)
    parameters:
    - id: role
      type: Business.Model.Role
    - id: permInternalName
      type: System.String
    return:
      type: System.Boolean
    content.vb: Function HasPermission(role As Role, permInternalName As String) As Boolean
  overload: FarmMaster.Services.IServiceRoleManager.HasPermission*
references:
- uid: FarmMaster.Services
  commentId: N:FarmMaster.Services
  name: FarmMaster.Services
  nameWithType: FarmMaster.Services
  fullName: FarmMaster.Services
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.Query
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.Query
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}
  definition: FarmMaster.Services.IServiceEntityManager`1.Query
  name: Query()
  nameWithType: IServiceEntityManager<Role>.Query()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.Query()
  nameWithType.vb: IServiceEntityManager(Of Role).Query()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).Query()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager<Role>.Query
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager(Of Role).Query
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.QueryAllIncluded
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.QueryAllIncluded
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}
  definition: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  name: QueryAllIncluded()
  nameWithType: IServiceEntityManager<Role>.QueryAllIncluded()
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.QueryAllIncluded()
  nameWithType.vb: IServiceEntityManager(Of Role).QueryAllIncluded()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).QueryAllIncluded()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager<Role>.QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager(Of Role).QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.GetIdFor(Business.Model.Role)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.GetIdFor(Business.Model.Role)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}
  definition: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  name: GetIdFor(Role)
  nameWithType: IServiceEntityManager<Role>.GetIdFor(Role)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.GetIdFor(Business.Model.Role)
  nameWithType.vb: IServiceEntityManager(Of Role).GetIdFor(Role)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).GetIdFor(Business.Model.Role)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager<Role>.GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager(Of Role).GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.Update(Business.Model.Role)
  commentId: M:FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.Update(Business.Model.Role)
  parent: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}
  definition: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  name: Update(Role)
  nameWithType: IServiceEntityManager<Role>.Update(Role)
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.Update(Business.Model.Role)
  nameWithType.vb: IServiceEntityManager(Of Role).Update(Role)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).Update(Business.Model.Role)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager<Role>.Update
    fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>.Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager(Of Role).Update
    fullName: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role).Update
  - name: (
    nameWithType: (
    fullName: (
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(System.Int32)
  commentId: M:FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  parent: FarmMaster.Services.IServiceEntityDataExtentions
  definition: FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  name: FromId<Role>(Int32)
  nameWithType: IServiceEntityDataExtentions.FromId<Role>(Int32)
  fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromId<Business.Model.Role>(System.Int32)
  nameWithType.vb: IServiceEntityDataExtentions.FromId(Of Role)(Int32)
  fullName.vb: FarmMaster.Services.IServiceEntityDataExtentions.FromId(Of Business.Model.Role)(System.Int32)
  name.vb: FromId(Of Role)(Int32)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(System.Int32)
    name: FromId<Role>
    nameWithType: IServiceEntityDataExtentions.FromId<Role>
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromId<Business.Model.Role>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(System.Int32)
    name: FromId(Of Role)
    nameWithType: IServiceEntityDataExtentions.FromId(Of Role)
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromId(Of Business.Model.Role)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(System.Int32)
  commentId: M:FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  parent: FarmMaster.Services.IServiceEntityDataExtentions
  definition: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  name: FromIdAllIncluded<Role>(Int32)
  nameWithType: IServiceEntityDataExtentions.FromIdAllIncluded<Role>(Int32)
  fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded<Business.Model.Role>(System.Int32)
  nameWithType.vb: IServiceEntityDataExtentions.FromIdAllIncluded(Of Role)(Int32)
  fullName.vb: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded(Of Business.Model.Role)(System.Int32)
  name.vb: FromIdAllIncluded(Of Role)(Int32)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(System.Int32)
    name: FromIdAllIncluded<Role>
    nameWithType: IServiceEntityDataExtentions.FromIdAllIncluded<Role>
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded<Business.Model.Role>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(System.Int32)
    name: FromIdAllIncluded(Of Role)
    nameWithType: IServiceEntityDataExtentions.FromIdAllIncluded(Of Role)
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded(Of Business.Model.Role)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}.FarmMaster.Services.IServiceEntityDataExtentions.For``1
  commentId: M:FarmMaster.Services.IServiceEntityDataExtentions.For``1(FarmMaster.Services.IServiceEntityManager{``0})
  parent: FarmMaster.Services.IServiceEntityDataExtentions
  definition: FarmMaster.Services.IServiceEntityDataExtentions.For``1(FarmMaster.Services.IServiceEntityManager{``0})
  name: For<Role>()
  nameWithType: IServiceEntityDataExtentions.For<Role>()
  fullName: FarmMaster.Services.IServiceEntityDataExtentions.For<Business.Model.Role>()
  nameWithType.vb: IServiceEntityDataExtentions.For(Of Role)()
  fullName.vb: FarmMaster.Services.IServiceEntityDataExtentions.For(Of Business.Model.Role)()
  name.vb: For(Of Role)()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.For``1
    name: For<Role>
    nameWithType: IServiceEntityDataExtentions.For<Role>
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.For<Business.Model.Role>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.For``1
    name: For(Of Role)
    nameWithType: IServiceEntityDataExtentions.For(Of Role)
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.For(Of Business.Model.Role)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1.Query
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.Query
  name: Query()
  nameWithType: IServiceEntityManager<T>.Query()
  fullName: FarmMaster.Services.IServiceEntityManager<T>.Query()
  nameWithType.vb: IServiceEntityManager(Of T).Query()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).Query()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager<T>.Query
    fullName: FarmMaster.Services.IServiceEntityManager<T>.Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Query
    name: Query
    nameWithType: IServiceEntityManager(Of T).Query
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).Query
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager{Business.Model.Role}
  commentId: T:FarmMaster.Services.IServiceEntityManager{Business.Model.Role}
  parent: FarmMaster.Services
  definition: FarmMaster.Services.IServiceEntityManager`1
  name: IServiceEntityManager<Role>
  nameWithType: IServiceEntityManager<Role>
  fullName: FarmMaster.Services.IServiceEntityManager<Business.Model.Role>
  nameWithType.vb: IServiceEntityManager(Of Role)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of Business.Model.Role)
  name.vb: IServiceEntityManager(Of Role)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Business.Model.Role
    name: Role
    nameWithType: Role
    fullName: Business.Model.Role
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
  name: QueryAllIncluded()
  nameWithType: IServiceEntityManager<T>.QueryAllIncluded()
  fullName: FarmMaster.Services.IServiceEntityManager<T>.QueryAllIncluded()
  nameWithType.vb: IServiceEntityManager(Of T).QueryAllIncluded()
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).QueryAllIncluded()
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager<T>.QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager<T>.QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.QueryAllIncluded
    name: QueryAllIncluded
    nameWithType: IServiceEntityManager(Of T).QueryAllIncluded
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).QueryAllIncluded
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
  name: GetIdFor(T)
  nameWithType: IServiceEntityManager<T>.GetIdFor(T)
  fullName: FarmMaster.Services.IServiceEntityManager<T>.GetIdFor(T)
  nameWithType.vb: IServiceEntityManager(Of T).GetIdFor(T)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).GetIdFor(T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager<T>.GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager<T>.GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.GetIdFor(`0)
    name: GetIdFor
    nameWithType: IServiceEntityManager(Of T).GetIdFor
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).GetIdFor
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  commentId: M:FarmMaster.Services.IServiceEntityManager`1.Update(`0)
  name: Update(T)
  nameWithType: IServiceEntityManager<T>.Update(T)
  fullName: FarmMaster.Services.IServiceEntityManager<T>.Update(T)
  nameWithType.vb: IServiceEntityManager(Of T).Update(T)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T).Update(T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager<T>.Update
    fullName: FarmMaster.Services.IServiceEntityManager<T>.Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1.Update(`0)
    name: Update
    nameWithType: IServiceEntityManager(Of T).Update
    fullName: FarmMaster.Services.IServiceEntityManager(Of T).Update
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  commentId: M:FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  isExternal: true
  name: FromId<T>(IServiceEntityManager<T>, Int32)
  nameWithType: IServiceEntityDataExtentions.FromId<T>(IServiceEntityManager<T>, Int32)
  fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromId<T>(FarmMaster.Services.IServiceEntityManager<T>, System.Int32)
  nameWithType.vb: IServiceEntityDataExtentions.FromId(Of T)(IServiceEntityManager(Of T), Int32)
  fullName.vb: FarmMaster.Services.IServiceEntityDataExtentions.FromId(Of T)(FarmMaster.Services.IServiceEntityManager(Of T), System.Int32)
  name.vb: FromId(Of T)(IServiceEntityManager(Of T), Int32)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
    name: FromId<T>
    nameWithType: IServiceEntityDataExtentions.FromId<T>
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromId<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromId``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
    name: FromId(Of T)
    nameWithType: IServiceEntityDataExtentions.FromId(Of T)
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromId(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityDataExtentions
  commentId: T:FarmMaster.Services.IServiceEntityDataExtentions
  parent: FarmMaster.Services
  name: IServiceEntityDataExtentions
  nameWithType: IServiceEntityDataExtentions
  fullName: FarmMaster.Services.IServiceEntityDataExtentions
- uid: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  commentId: M:FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
  isExternal: true
  name: FromIdAllIncluded<T>(IServiceEntityManager<T>, Int32)
  nameWithType: IServiceEntityDataExtentions.FromIdAllIncluded<T>(IServiceEntityManager<T>, Int32)
  fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded<T>(FarmMaster.Services.IServiceEntityManager<T>, System.Int32)
  nameWithType.vb: IServiceEntityDataExtentions.FromIdAllIncluded(Of T)(IServiceEntityManager(Of T), Int32)
  fullName.vb: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded(Of T)(FarmMaster.Services.IServiceEntityManager(Of T), System.Int32)
  name.vb: FromIdAllIncluded(Of T)(IServiceEntityManager(Of T), Int32)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
    name: FromIdAllIncluded<T>
    nameWithType: IServiceEntityDataExtentions.FromIdAllIncluded<T>
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded``1(FarmMaster.Services.IServiceEntityManager{``0},System.Int32)
    name: FromIdAllIncluded(Of T)
    nameWithType: IServiceEntityDataExtentions.FromIdAllIncluded(Of T)
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.FromIdAllIncluded(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityDataExtentions.For``1(FarmMaster.Services.IServiceEntityManager{``0})
  commentId: M:FarmMaster.Services.IServiceEntityDataExtentions.For``1(FarmMaster.Services.IServiceEntityManager{``0})
  name: For<T>(IServiceEntityManager<T>)
  nameWithType: IServiceEntityDataExtentions.For<T>(IServiceEntityManager<T>)
  fullName: FarmMaster.Services.IServiceEntityDataExtentions.For<T>(FarmMaster.Services.IServiceEntityManager<T>)
  nameWithType.vb: IServiceEntityDataExtentions.For(Of T)(IServiceEntityManager(Of T))
  fullName.vb: FarmMaster.Services.IServiceEntityDataExtentions.For(Of T)(FarmMaster.Services.IServiceEntityManager(Of T))
  name.vb: For(Of T)(IServiceEntityManager(Of T))
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.For``1(FarmMaster.Services.IServiceEntityManager{``0})
    name: For<T>
    nameWithType: IServiceEntityDataExtentions.For<T>
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.For<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityDataExtentions.For``1(FarmMaster.Services.IServiceEntityManager{``0})
    name: For(Of T)
    nameWithType: IServiceEntityDataExtentions.For(Of T)
    fullName: FarmMaster.Services.IServiceEntityDataExtentions.For(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceEntityManager`1
  commentId: T:FarmMaster.Services.IServiceEntityManager`1
  name: IServiceEntityManager<T>
  nameWithType: IServiceEntityManager<T>
  fullName: FarmMaster.Services.IServiceEntityManager<T>
  nameWithType.vb: IServiceEntityManager(Of T)
  fullName.vb: FarmMaster.Services.IServiceEntityManager(Of T)
  name.vb: IServiceEntityManager(Of T)
  spec.csharp:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: FarmMaster.Services.IServiceEntityManager`1
    name: IServiceEntityManager
    nameWithType: IServiceEntityManager
    fullName: FarmMaster.Services.IServiceEntityManager
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: FarmMaster.Services.IServiceRoleManager.Create*
  commentId: Overload:FarmMaster.Services.IServiceRoleManager.Create
  name: Create
  nameWithType: IServiceRoleManager.Create
  fullName: FarmMaster.Services.IServiceRoleManager.Create
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.String[]
  isExternal: true
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullName.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Business.Model.Role
  commentId: T:Business.Model.Role
  parent: Business.Model
  name: Role
  nameWithType: Role
  fullName: Business.Model.Role
- uid: System
  commentId: N:System
  isExternal: true
  name: System
  nameWithType: System
  fullName: System
- uid: Business.Model
  commentId: N:Business.Model
  name: Business.Model
  nameWithType: Business.Model
  fullName: Business.Model
- uid: FarmMaster.Services.IServiceRoleManager.RoleFromName*
  commentId: Overload:FarmMaster.Services.IServiceRoleManager.RoleFromName
  name: RoleFromName
  nameWithType: IServiceRoleManager.RoleFromName
  fullName: FarmMaster.Services.IServiceRoleManager.RoleFromName
- uid: FarmMaster.Services.IServiceRoleManager.RemoveRole*
  commentId: Overload:FarmMaster.Services.IServiceRoleManager.RemoveRole
  name: RemoveRole
  nameWithType: IServiceRoleManager.RemoveRole
  fullName: FarmMaster.Services.IServiceRoleManager.RemoveRole
- uid: FarmMaster.Services.IServiceRoleManager.AddPermission*
  commentId: Overload:FarmMaster.Services.IServiceRoleManager.AddPermission
  name: AddPermission
  nameWithType: IServiceRoleManager.AddPermission
  fullName: FarmMaster.Services.IServiceRoleManager.AddPermission
- uid: FarmMaster.Misc.SaveChanges
  commentId: T:FarmMaster.Misc.SaveChanges
  parent: FarmMaster.Misc
  name: SaveChanges
  nameWithType: SaveChanges
  fullName: FarmMaster.Misc.SaveChanges
- uid: FarmMaster.Misc
  commentId: N:FarmMaster.Misc
  name: FarmMaster.Misc
  nameWithType: FarmMaster.Misc
  fullName: FarmMaster.Misc
- uid: FarmMaster.Services.IServiceRoleManager.RemovePermission*
  commentId: Overload:FarmMaster.Services.IServiceRoleManager.RemovePermission
  name: RemovePermission
  nameWithType: IServiceRoleManager.RemovePermission
  fullName: FarmMaster.Services.IServiceRoleManager.RemovePermission
- uid: FarmMaster.Services.IServiceRoleManager.HasPermission*
  commentId: Overload:FarmMaster.Services.IServiceRoleManager.HasPermission
  name: HasPermission
  nameWithType: IServiceRoleManager.HasPermission
  fullName: FarmMaster.Services.IServiceRoleManager.HasPermission
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
